{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/webpack/universalModuleDefinition", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/webpack/bootstrap", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/webpack/runtime/define property getters", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/webpack/runtime/hasOwnProperty shorthand", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/webpack/runtime/make namespace object", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/src/utils.ts", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/src/index.ts", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/src/components.ts", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/src/blocks.ts", "../../node_modules/.pnpm/grapesjs-custom-code@1.0.2/node_modules/grapesjs-custom-code/dist/webpack:/grapesjs-custom-code/src/commands.ts"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-custom-code\"] = factory();\n\telse\n\t\troot[\"grapesjs-custom-code\"] = factory();\n})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this), () => {\nreturn ", "// The require scope\nvar __webpack_require__ = {};\n\n", "// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};", "__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))", "// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};", "export const keyCustomCode = 'custom-code-plugin__code';\nexport const typeCustomCode = 'custom-code';\nexport const commandNameCustomCode = 'custom-code:open-modal';", "import type { BlockProperties, ComponentDefinition, Plugin } from 'grapesjs';\nimport loadBlocks from './blocks';\nimport loadCommands from './commands';\nimport loadComponents from './components';\n\nexport type PluginOptions = {\n  /**\n   * Object to extend the default custom code block. Pass a falsy value to avoid adding the block\n   * @example\n   * { label: 'Custom Code', category: 'Extra', ... }\n   */\n   blockCustomCode?: Partial<BlockProperties>;\n\n  /**\n   * Object to extend the default custom code properties.\n   * @example\n   * { name: 'Custom Code', droppable: false, ... }\n   */\n   propsCustomCode?: ComponentDefinition;\n\n  /**\n   * Object to extend the default component's toolbar button for the code. Pass a falsy value to avoid adding the button\n   * @example\n   * { label: '</>', attributes: { title: 'Open custom code' } }\n   */\n   toolbarBtnCustomCode?: Record<string, any>;\n\n   /**\n    * Content to show when the custom code contains `<script>`\n    */\n   placeholderScript?: string;\n\n   /**\n    * Title for the custom code modal\n    * @default 'Insert your code'\n    */\n   modalTitle?: string;\n\n   /**\n    * Additional options for the code viewer.\n    * @example\n    * { theme: 'hopscotch', readOnly: 0 }\n    */\n   codeViewOptions?: Record<string, any>;\n\n   /**\n    * Label for the default save button\n    * @default 'Save'\n    */\n    buttonLabel?: string;\n\n    /**\n     * Object to extend the default custom code command.\n     */\n    commandCustomCode?: Record<string, any>;\n};\n\nconst plugin: Plugin<PluginOptions> = (editor, opts = {}) => {\n  const options: PluginOptions = {\n    blockCustomCode: {},\n    propsCustomCode: {},\n    toolbarBtnCustomCode: {},\n    placeholderScript: `<div style=\"pointer-events: none; padding: 10px;\">\n      <svg viewBox=\"0 0 24 24\" style=\"height: 30px; vertical-align: middle;\">\n        <path d=\"M13 14h-2v-4h2m0 8h-2v-2h2M1 21h22L12 2 1 21z\"></path>\n        </svg>\n      Custom code with <i>&lt;script&gt;</i> can't be rendered on the canvas\n    </div>`,\n    modalTitle: 'Insert your code',\n    codeViewOptions: {},\n    buttonLabel: 'Save',\n    commandCustomCode: {},\n    ...opts\n  };\n\n  // Add components\n  loadComponents(editor, options);\n\n  // Add blocks\n  loadBlocks(editor, options);\n\n  // Add commands\n  loadCommands(editor, options);\n};\n\nexport default plugin;\n", "import type { Editor } from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { keyCustomCode, commandNameCustomCode, typeCustomCode } from './utils';\n\nexport default (editor: Editor, opts: PluginOptions = {}) => {\n  const { Components } = editor;\n  const { toolbarBtnCustomCode } = opts;\n  let timedInterval: NodeJS.Timeout;\n\n  Components.addType('script', {\n    view: {\n      onRender() {\n        const { model, el } = this;\n        const isCC = model.closestType(typeCustomCode);\n        isCC && (el.innerHTML = '');\n      }\n    },\n  });\n\n  Components.addType(typeCustomCode, {\n    model: {\n      defaults: {\n        name: 'Custom Code',\n        editable: true,\n        components: {\n          tagName: 'span',\n          components: { type: 'textnode', content: 'Insert here your custom code' }\n        } as any,\n        ...opts.propsCustomCode,\n      },\n\n      /**\n       * Initilize the component\n       */\n      init() {\n        this.on(`change:${keyCustomCode}`, this.onCustomCodeChange);\n        const initialCode = this.get(keyCustomCode);\n        !this.components().length && this.components(initialCode);\n        const toolbar = this.get('toolbar')!;\n        const id = 'custom-code';\n\n        // Add the custom code toolbar button if requested and it's not already in\n        if (toolbarBtnCustomCode && !toolbar.filter(tlb => tlb.id === id ).length) {\n          toolbar.unshift({\n            id,\n            command: commandNameCustomCode,\n            label: `<svg viewBox=\"0 0 24 24\">\n              <path d=\"M14.6 16.6l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4m-5.2 0L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4z\"></path>\n            </svg>`,\n            ...toolbarBtnCustomCode\n          });\n        }\n      },\n\n      /**\n       * Callback to launch on keyCustomCode change\n       */\n      onCustomCodeChange() {\n        this.components(this.get(keyCustomCode));\n      },\n    },\n\n    view: {\n      events: {\n        dblclick: 'onActive',\n      } as any,\n\n      init() {\n        this.listenTo(this.model.components(), 'add remove reset', this.onComponentsChange);\n        this.onComponentsChange();\n      },\n\n      /**\n       * Things to do once inner components of custom code are changed\n       */\n      onComponentsChange() {\n        timedInterval && clearInterval(timedInterval);\n        timedInterval = setTimeout(() => {\n          const { model, el } = this;\n          const content = model.get(keyCustomCode) || '';\n          let droppable = true;\n\n          // Avoid rendering codes with scripts\n          if (content.indexOf('<script') >= 0 && opts.placeholderScript) {\n            el.innerHTML = opts.placeholderScript;\n            droppable = false;\n          }\n\n          model.set({ droppable });\n        }, 0);\n      },\n\n      onActive() {\n        const { model, em } = this;\n        em.get('Commands').run(commandNameCustomCode, { target: model });\n      },\n    },\n  });\n}\n", "import type { Editor } from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { typeCustomCode } from './utils';\n\nexport default (editor: Editor, { blockCustomCode }: PluginOptions = {}) => {\n  const { Blocks } = editor;\n\n  blockCustomCode && Blocks.add(typeCustomCode, {\n    label: 'Custom Code',\n    media: `\n      <svg viewBox=\"0 0 24 24\">\n        <path d=\"M14.6 16.6l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4m-5.2 0L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4z\"></path>\n      </svg>\n    `,\n    category: 'Extra',\n    activate: true,\n    select: true,\n    content: { type: typeCustomCode },\n    ...blockCustomCode\n  });\n}\n", "import type { Editor, Component } from 'grapesjs';\nimport { PluginOptions } from '.';\nimport { commandNameCustomCode, keyCustomCode } from './utils';\n\ntype ContentTypes = HTMLElement | string | undefined;\n\nexport default (editor: Editor, opts: PluginOptions = {}) => {\n  const { modalTitle, codeViewOptions, commandCustomCode } = opts;\n\n  const appendToContent = (target: HTMLElement, content?: ContentTypes) => {\n    if (content instanceof HTMLElement) {\n        target.appendChild(content);\n    } else if (content) {\n        target.insertAdjacentHTML('beforeend', content);\n    }\n  }\n\n  // Add the custom code command\n  editor.Commands.add(commandNameCustomCode, {\n    keyCustomCode,\n    target: null as null | Component,\n    codeViewer: null as any,\n\n    run(editor, s, opts = {}) {\n      const target = opts.target || editor.getSelected();\n      this.target = target;\n\n      if (target?.get('editable')) {\n        this.showCustomCode(target, opts);\n      }\n    },\n\n    stop(editor) {\n      editor.Modal.close();\n    },\n\n    /**\n     * Method which tells how to show the custom code\n     * @param  {Component} target\n     */\n    showCustomCode(target: Component, options: any) {\n      const title = options.title || modalTitle;\n      const code = target.get(keyCustomCode) || '';\n      const content = this.getContent();\n      editor.Modal\n        .open({ title, content })\n        .onceClose(() => editor.stopCommand(commandNameCustomCode))\n      this.getCodeViewer().setContent(code);\n    },\n\n    /**\n     * Custom pre-content. Can be a simple string or an HTMLElement\n     */\n    getPreContent() {},\n\n    /**\n     * Custom post-content. Can be a simple string or an HTMLElement\n     */\n    getPostContent() {},\n\n    /**\n     * Get all the content for the custom code\n     * @return {HTMLElement}\n     */\n    getContent() {\n      const codeViewer = this.getCodeViewer();\n      const content = document.createElement('div');\n      const pfx = editor.getConfig('stylePrefix');\n      content.className = `${pfx}custom-code`;\n      appendToContent(content, this.getPreContent() as ContentTypes);\n      content.appendChild(codeViewer.getElement());\n      appendToContent(content, this.getPostContent() as ContentTypes);\n      appendToContent(content, this.getContentActions());\n      codeViewer.refresh();\n      setTimeout(()=> codeViewer.focus(), 0);\n\n      return content;\n    },\n\n    /**\n     * Get the actions content. Can be a simple string or an HTMLElement\n     * @return {HTMLElement|String}\n     */\n    getContentActions() {\n      const btn = document.createElement('button');\n      btn.setAttribute('type', 'button');\n      const pfx = editor.getConfig('stylePrefix');\n      btn.innerHTML = opts.buttonLabel!;\n      btn.className = `${pfx}btn-prim ${pfx}btn-import__custom-code`;\n      btn.onclick = () => this.handleSave();\n\n      return btn;\n    },\n\n    /**\n     * Handle the main save task\n     */\n    handleSave() {\n      const { target } = this;\n      const code = this.getCodeViewer().getContent();\n      target?.set(keyCustomCode, code);\n      editor.Modal.close();\n    },\n\n    /**\n     * Return the code viewer instance\n     * @return {CodeViewer}\n     */\n    getCodeViewer() {\n      if (!this.codeViewer) {\n        this.codeViewer = editor.CodeManager.createViewer({\n          codeName: 'htmlmixed',\n          theme: 'hopscotch',\n          readOnly: 0,\n          ...codeViewOptions,\n        });\n      }\n      return this.codeViewer;\n    },\n\n    ...commandCustomCode,\n  });\n};\n"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "globalThis", "window", "this", "__webpack_require__", "definition", "key", "o", "Object", "defineProperty", "enumerable", "get", "obj", "prop", "prototype", "hasOwnProperty", "call", "Symbol", "toStringTag", "value", "keyCustomCode", "typeCustomCode", "commandNameCustomCode", "e", "t", "n", "i", "editor", "opts", "options", "blockCustomCode", "propsCustomCode", "toolbarBtnCustomCode", "placeholderScript", "modalTitle", "codeViewOptions", "buttonLabel", "commandCustomCode", "timedInterval", "Components", "addType", "view", "onRender", "model", "el", "closestType", "innerHTML", "defaults", "name", "editable", "components", "tagName", "type", "content", "init", "on", "onCustomCodeChange", "initialCode", "length", "toolbar", "id", "filter", "tlb", "unshift", "command", "label", "events", "dblclick", "listenTo", "onComponentsChange", "clearInterval", "setTimeout", "droppable", "indexOf", "set", "s", "onActive", "run", "target", "Blocks", "add", "media", "category", "activate", "select", "appendToContent", "HTMLElement", "appendChild", "insertAdjacentHTML", "Commands", "codeViewer", "getSelected", "showCustomCode", "stop", "Modal", "close", "title", "code", "getContent", "open", "c", "onceClose", "stopCommand", "getCodeViewer", "setContent", "getPreContent", "getPostContent", "document", "createElement", "pfx", "getConfig", "className", "getElement", "getContentActions", "refresh", "focus", "btn", "setAttribute", "onclick", "handleSave", "CodeManager", "createViewer", "codeName", "theme", "readOnly"]
}
