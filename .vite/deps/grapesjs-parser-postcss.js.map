{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/webpack/universalModuleDefinition", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/picocolors/picocolors.browser.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/at-rule.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/comment.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/container.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/css-syntax-error.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/declaration.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/document.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/fromJSON.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/input.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/lazy-result.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/list.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/map-generator.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/no-work-result.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/node.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/parse.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/parser.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/postcss.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/previous-map.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/processor.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/result.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/root.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/rule.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/stringifier.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/stringify.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/symbols.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/tokenize.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/warn-once.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/warning.js", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/nanoid/non-secure/index.cjs", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/webpack/bootstrap", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/webpack/runtime/define property getters", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/webpack/runtime/hasOwnProperty shorthand", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/webpack/runtime/make namespace object", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/node_modules/postcss/lib/postcss.mjs", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/src/parser.ts", "../../node_modules/.pnpm/grapesjs-parser-postcss@1.0.1/node_modules/grapesjs-parser-postcss/dist/webpack:/grapesjs-parser-postcss/src/index.ts"],
  "sourcesContent": ["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"grapesjs-parser-postcss\"] = factory();\n\telse\n\t\troot[\"grapesjs-parser-postcss\"] = factory();\n})(typeof globalThis !== 'undefined' ? globalThis : (typeof window !== 'undefined' ? window : this), () => {\nreturn ", "var x=String;\nvar create=function() {return {isColorSupported:false,reset:x,bold:x,dim:x,italic:x,underline:x,inverse:x,hidden:x,strikethrough:x,black:x,red:x,green:x,yellow:x,blue:x,magenta:x,cyan:x,white:x,gray:x,bgBlack:x,bgRed:x,bgGreen:x,bgYellow:x,bgBlue:x,bgMagenta:x,bgCyan:x,bgWhite:x}};\nmodule.exports=create();\nmodule.exports.createColors = create;\n", "'use strict'\n\nlet Container = require('./container')\n\nclass AtRule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'atrule'\n  }\n\n  append(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.append(...children)\n  }\n\n  prepend(...children) {\n    if (!this.proxyOf.nodes) this.nodes = []\n    return super.prepend(...children)\n  }\n}\n\nmodule.exports = AtRule\nAtRule.default = AtRule\n\nContainer.registerAtRule(AtRule)\n", "'use strict'\n\nlet Node = require('./node')\n\nclass Comment extends Node {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'comment'\n  }\n}\n\nmodule.exports = Comment\nComment.default = Comment\n", "'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet Declaration = require('./declaration')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root' && this.type !== 'document') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      /* c8 ignore next */\n      if (!i[my]) Container.rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this.proxyOf\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n\n/* c8 ignore start */\nContainer.rebuild = node => {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  }\n\n  node[my] = true\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      Container.rebuild(child)\n    })\n  }\n}\n/* c8 ignore stop */\n", "'use strict'\n\nlet pico = require('picocolors')\n\nlet terminalHighlight = require('./terminal-highlight')\n\nclass CssSyntaxError extends Error {\n  constructor(message, line, column, source, file, plugin) {\n    super(message)\n    this.name = 'CssSyntaxError'\n    this.reason = message\n\n    if (file) {\n      this.file = file\n    }\n    if (source) {\n      this.source = source\n    }\n    if (plugin) {\n      this.plugin = plugin\n    }\n    if (typeof line !== 'undefined' && typeof column !== 'undefined') {\n      if (typeof line === 'number') {\n        this.line = line\n        this.column = column\n      } else {\n        this.line = line.line\n        this.column = line.column\n        this.endLine = column.line\n        this.endColumn = column.column\n      }\n    }\n\n    this.setMessage()\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CssSyntaxError)\n    }\n  }\n\n  setMessage() {\n    this.message = this.plugin ? this.plugin + ': ' : ''\n    this.message += this.file ? this.file : '<css input>'\n    if (typeof this.line !== 'undefined') {\n      this.message += ':' + this.line + ':' + this.column\n    }\n    this.message += ': ' + this.reason\n  }\n\n  showSourceCode(color) {\n    if (!this.source) return ''\n\n    let css = this.source\n    if (color == null) color = pico.isColorSupported\n    if (terminalHighlight) {\n      if (color) css = terminalHighlight(css)\n    }\n\n    let lines = css.split(/\\r?\\n/)\n    let start = Math.max(this.line - 3, 0)\n    let end = Math.min(this.line + 2, lines.length)\n\n    let maxWidth = String(end).length\n\n    let mark, aside\n    if (color) {\n      let { bold, red, gray } = pico.createColors(true)\n      mark = text => bold(red(text))\n      aside = text => gray(text)\n    } else {\n      mark = aside = str => str\n    }\n\n    return lines\n      .slice(start, end)\n      .map((line, index) => {\n        let number = start + 1 + index\n        let gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | '\n        if (number === this.line) {\n          let spacing =\n            aside(gutter.replace(/\\d/g, ' ')) +\n            line.slice(0, this.column - 1).replace(/[^\\t]/g, ' ')\n          return mark('>') + aside(gutter) + line + '\\n ' + spacing + mark('^')\n        }\n        return ' ' + aside(gutter) + line\n      })\n      .join('\\n')\n  }\n\n  toString() {\n    let code = this.showSourceCode()\n    if (code) {\n      code = '\\n\\n' + code + '\\n'\n    }\n    return this.name + ': ' + this.message + code\n  }\n}\n\nmodule.exports = CssSyntaxError\nCssSyntaxError.default = CssSyntaxError\n", "'use strict'\n\nlet Node = require('./node')\n\nclass Declaration extends Node {\n  constructor(defaults) {\n    if (\n      defaults &&\n      typeof defaults.value !== 'undefined' &&\n      typeof defaults.value !== 'string'\n    ) {\n      defaults = { ...defaults, value: String(defaults.value) }\n    }\n    super(defaults)\n    this.type = 'decl'\n  }\n\n  get variable() {\n    return this.prop.startsWith('--') || this.prop[0] === '$'\n  }\n}\n\nmodule.exports = Declaration\nDeclaration.default = Declaration\n", "'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Document extends Container {\n  constructor(defaults) {\n    // type needs to be passed to super, otherwise child roots won't be normalized correctly\n    super({ type: 'document', ...defaults })\n\n    if (!this.nodes) {\n      this.nodes = []\n    }\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n\n    return lazy.stringify()\n  }\n}\n\nDocument.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nDocument.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Document\nDocument.default = Document\n", "'use strict'\n\nlet Declaration = require('./declaration')\nlet PreviousMap = require('./previous-map')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Input = require('./input')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\n\n  let { inputs: ownInputs, ...defaults } = json\n  if (ownInputs) {\n    inputs = []\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input, __proto__: Input.prototype }\n      if (inputHydrated.map) {\n        inputHydrated.map = {\n          ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        }\n      }\n      inputs.push(inputHydrated)\n    }\n  }\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\n  }\n  if (defaults.source) {\n    let { inputId, ...source } = defaults.source\n    defaults.source = source\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId]\n    }\n  }\n  if (defaults.type === 'root') {\n    return new Root(defaults)\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults)\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults)\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults)\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults)\n  } else {\n    throw new Error('Unknown node type: ' + json.type)\n  }\n}\n\nmodule.exports = fromJSON\nfromJSON.default = fromJSON\n", "'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { fileURLToPath, pathToFileURL } = require('url')\nlet { resolve, isAbsolute } = require('path')\nlet { nanoid } = require('nanoid/non-secure')\n\nlet terminalHighlight = require('./terminal-highlight')\nlet CssSyntaxError = require('./css-syntax-error')\nlet PreviousMap = require('./previous-map')\n\nlet fromOffsetCache = Symbol('fromOffsetCache')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(resolve && isAbsolute)\n\nclass Input {\n  constructor(css, opts = {}) {\n    if (\n      css === null ||\n      typeof css === 'undefined' ||\n      (typeof css === 'object' && !css.toString)\n    ) {\n      throw new Error(`PostCSS received ${css} instead of CSS string`)\n    }\n\n    this.css = css.toString()\n\n    if (this.css[0] === '\\uFEFF' || this.css[0] === '\\uFFFE') {\n      this.hasBOM = true\n      this.css = this.css.slice(1)\n    } else {\n      this.hasBOM = false\n    }\n\n    if (opts.from) {\n      if (\n        !pathAvailable ||\n        /^\\w+:\\/\\//.test(opts.from) ||\n        isAbsolute(opts.from)\n      ) {\n        this.file = opts.from\n      } else {\n        this.file = resolve(opts.from)\n      }\n    }\n\n    if (pathAvailable && sourceMapAvailable) {\n      let map = new PreviousMap(this.css, opts)\n      if (map.text) {\n        this.map = map\n        let file = map.consumer().file\n        if (!this.file && file) this.file = this.mapResolve(file)\n      }\n    }\n\n    if (!this.file) {\n      this.id = '<input css ' + nanoid(6) + '>'\n    }\n    if (this.map) this.map.file = this.from\n  }\n\n  fromOffset(offset) {\n    let lastLine, lineToIndex\n    if (!this[fromOffsetCache]) {\n      let lines = this.css.split('\\n')\n      lineToIndex = new Array(lines.length)\n      let prevIndex = 0\n\n      for (let i = 0, l = lines.length; i < l; i++) {\n        lineToIndex[i] = prevIndex\n        prevIndex += lines[i].length + 1\n      }\n\n      this[fromOffsetCache] = lineToIndex\n    } else {\n      lineToIndex = this[fromOffsetCache]\n    }\n    lastLine = lineToIndex[lineToIndex.length - 1]\n\n    let min = 0\n    if (offset >= lastLine) {\n      min = lineToIndex.length - 1\n    } else {\n      let max = lineToIndex.length - 2\n      let mid\n      while (min < max) {\n        mid = min + ((max - min) >> 1)\n        if (offset < lineToIndex[mid]) {\n          max = mid - 1\n        } else if (offset >= lineToIndex[mid + 1]) {\n          min = mid + 1\n        } else {\n          min = mid\n          break\n        }\n      }\n    }\n    return {\n      line: min + 1,\n      col: offset - lineToIndex[min] + 1\n    }\n  }\n\n  error(message, line, column, opts = {}) {\n    let result, endLine, endColumn\n\n    if (line && typeof line === 'object') {\n      let start = line\n      let end = column\n      if (typeof line.offset === 'number') {\n        let pos = this.fromOffset(start.offset)\n        line = pos.line\n        column = pos.col\n      } else {\n        line = start.line\n        column = start.column\n      }\n      if (typeof end.offset === 'number') {\n        let pos = this.fromOffset(end.offset)\n        endLine = pos.line\n        endColumn = pos.col\n      } else {\n        endLine = end.line\n        endColumn = end.column\n      }\n    } else if (!column) {\n      let pos = this.fromOffset(line)\n      line = pos.line\n      column = pos.col\n    }\n\n    let origin = this.origin(line, column, endLine, endColumn)\n    if (origin) {\n      result = new CssSyntaxError(\n        message,\n        origin.endLine === undefined\n          ? origin.line\n          : { line: origin.line, column: origin.column },\n        origin.endLine === undefined\n          ? origin.column\n          : { line: origin.endLine, column: origin.endColumn },\n        origin.source,\n        origin.file,\n        opts.plugin\n      )\n    } else {\n      result = new CssSyntaxError(\n        message,\n        endLine === undefined ? line : { line, column },\n        endLine === undefined ? column : { line: endLine, column: endColumn },\n        this.css,\n        this.file,\n        opts.plugin\n      )\n    }\n\n    result.input = { line, column, endLine, endColumn, source: this.css }\n    if (this.file) {\n      if (pathToFileURL) {\n        result.input.url = pathToFileURL(this.file).toString()\n      }\n      result.input.file = this.file\n    }\n\n    return result\n  }\n\n  origin(line, column, endLine, endColumn) {\n    if (!this.map) return false\n    let consumer = this.map.consumer()\n\n    let from = consumer.originalPositionFor({ line, column })\n    if (!from.source) return false\n\n    let to\n    if (typeof endLine === 'number') {\n      to = consumer.originalPositionFor({ line: endLine, column: endColumn })\n    }\n\n    let fromUrl\n\n    if (isAbsolute(from.source)) {\n      fromUrl = pathToFileURL(from.source)\n    } else {\n      fromUrl = new URL(\n        from.source,\n        this.map.consumer().sourceRoot || pathToFileURL(this.map.mapFile)\n      )\n    }\n\n    let result = {\n      url: fromUrl.toString(),\n      line: from.line,\n      column: from.column,\n      endLine: to && to.line,\n      endColumn: to && to.column\n    }\n\n    if (fromUrl.protocol === 'file:') {\n      if (fileURLToPath) {\n        result.file = fileURLToPath(fromUrl)\n      } else {\n        /* c8 ignore next 2 */\n        throw new Error(`file: protocol is not available in this PostCSS build`)\n      }\n    }\n\n    let source = consumer.sourceContentFor(from.source)\n    if (source) result.source = source\n\n    return result\n  }\n\n  mapResolve(file) {\n    if (/^\\w+:\\/\\//.test(file)) {\n      return file\n    }\n    return resolve(this.map.consumer().sourceRoot || this.map.root || '.', file)\n  }\n\n  get from() {\n    return this.file || this.id\n  }\n\n  toJSON() {\n    let json = {}\n    for (let name of ['hasBOM', 'css', 'file', 'id']) {\n      if (this[name] != null) {\n        json[name] = this[name]\n      }\n    }\n    if (this.map) {\n      json.map = { ...this.map }\n      if (json.map.consumerCache) {\n        json.map.consumerCache = undefined\n      }\n    }\n    return json\n  }\n}\n\nmodule.exports = Input\nInput.default = Input\n\nif (terminalHighlight && terminalHighlight.registerInput) {\n  terminalHighlight.registerInput(Input)\n}\n", "'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet Container = require('./container')\nlet Document = require('./document')\nlet warnOnce = require('./warn-once')\nlet Result = require('./result')\nlet parse = require('./parse')\nlet Root = require('./root')\n\nconst TYPE_TO_CLASS_NAME = {\n  document: 'Document',\n  root: 'Root',\n  atrule: 'AtRule',\n  rule: 'Rule',\n  decl: 'Declaration',\n  comment: 'Comment'\n}\n\nconst PLUGIN_PROPS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true,\n  Document: true,\n  Root: true,\n  Declaration: true,\n  Rule: true,\n  AtRule: true,\n  Comment: true,\n  DeclarationExit: true,\n  RuleExit: true,\n  AtRuleExit: true,\n  CommentExit: true,\n  RootExit: true,\n  DocumentExit: true,\n  OnceExit: true\n}\n\nconst NOT_VISITORS = {\n  postcssPlugin: true,\n  prepare: true,\n  Once: true\n}\n\nconst CHILDREN = 0\n\nfunction isPromise(obj) {\n  return typeof obj === 'object' && typeof obj.then === 'function'\n}\n\nfunction getEvents(node) {\n  let key = false\n  let type = TYPE_TO_CLASS_NAME[node.type]\n  if (node.type === 'decl') {\n    key = node.prop.toLowerCase()\n  } else if (node.type === 'atrule') {\n    key = node.name.toLowerCase()\n  }\n\n  if (key && node.append) {\n    return [\n      type,\n      type + '-' + key,\n      CHILDREN,\n      type + 'Exit',\n      type + 'Exit-' + key\n    ]\n  } else if (key) {\n    return [type, type + '-' + key, type + 'Exit', type + 'Exit-' + key]\n  } else if (node.append) {\n    return [type, CHILDREN, type + 'Exit']\n  } else {\n    return [type, type + 'Exit']\n  }\n}\n\nfunction toStack(node) {\n  let events\n  if (node.type === 'document') {\n    events = ['Document', CHILDREN, 'DocumentExit']\n  } else if (node.type === 'root') {\n    events = ['Root', CHILDREN, 'RootExit']\n  } else {\n    events = getEvents(node)\n  }\n\n  return {\n    node,\n    events,\n    eventIndex: 0,\n    visitors: [],\n    visitorIndex: 0,\n    iterator: 0\n  }\n}\n\nfunction cleanMarks(node) {\n  node[isClean] = false\n  if (node.nodes) node.nodes.forEach(i => cleanMarks(i))\n  return node\n}\n\nlet postcss = {}\n\nclass LazyResult {\n  constructor(processor, css, opts) {\n    this.stringified = false\n    this.processed = false\n\n    let root\n    if (\n      typeof css === 'object' &&\n      css !== null &&\n      (css.type === 'root' || css.type === 'document')\n    ) {\n      root = cleanMarks(css)\n    } else if (css instanceof LazyResult || css instanceof Result) {\n      root = cleanMarks(css.root)\n      if (css.map) {\n        if (typeof opts.map === 'undefined') opts.map = {}\n        if (!opts.map.inline) opts.map.inline = false\n        opts.map.prev = css.map\n      }\n    } else {\n      let parser = parse\n      if (opts.syntax) parser = opts.syntax.parse\n      if (opts.parser) parser = opts.parser\n      if (parser.parse) parser = parser.parse\n\n      try {\n        root = parser(css, opts)\n      } catch (error) {\n        this.processed = true\n        this.error = error\n      }\n\n      if (root && !root[my]) {\n        /* c8 ignore next 2 */\n        Container.rebuild(root)\n      }\n    }\n\n    this.result = new Result(processor, root, opts)\n    this.helpers = { ...postcss, result: this.result, postcss }\n    this.plugins = this.processor.plugins.map(plugin => {\n      if (typeof plugin === 'object' && plugin.prepare) {\n        return { ...plugin, ...plugin.prepare(this.result) }\n      } else {\n        return plugin\n      }\n    })\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'LazyResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.stringify().css\n  }\n\n  get content() {\n    return this.stringify().content\n  }\n\n  get map() {\n    return this.stringify().map\n  }\n\n  get root() {\n    return this.sync().root\n  }\n\n  get messages() {\n    return this.sync().messages\n  }\n\n  warnings() {\n    return this.sync().warnings()\n  }\n\n  toString() {\n    return this.css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this.opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    if (this.processed) return Promise.resolve(this.result)\n    if (!this.processing) {\n      this.processing = this.runAsync()\n    }\n    return this.processing\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    if (this.processed) return this.result\n    this.processed = true\n\n    if (this.processing) {\n      throw this.getAsyncError()\n    }\n\n    for (let plugin of this.plugins) {\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        this.walkSync(root)\n      }\n      if (this.listeners.OnceExit) {\n        if (root.type === 'document') {\n          for (let subRoot of root.nodes) {\n            this.visitSync(this.listeners.OnceExit, subRoot)\n          }\n        } else {\n          this.visitSync(this.listeners.OnceExit, root)\n        }\n      }\n    }\n\n    return this.result\n  }\n\n  stringify() {\n    if (this.error) throw this.error\n    if (this.stringified) return this.result\n    this.stringified = true\n\n    this.sync()\n\n    let opts = this.result.opts\n    let str = stringify\n    if (opts.syntax) str = opts.syntax.stringify\n    if (opts.stringifier) str = opts.stringifier\n    if (str.stringify) str = str.stringify\n\n    let map = new MapGenerator(str, this.result.root, this.result.opts)\n    let data = map.generate()\n    this.result.css = data[0]\n    this.result.map = data[1]\n\n    return this.result\n  }\n\n  walkSync(node) {\n    node[isClean] = true\n    let events = getEvents(node)\n    for (let event of events) {\n      if (event === CHILDREN) {\n        if (node.nodes) {\n          node.each(child => {\n            if (!child[isClean]) this.walkSync(child)\n          })\n        }\n      } else {\n        let visitors = this.listeners[event]\n        if (visitors) {\n          if (this.visitSync(visitors, node.toProxy())) return\n        }\n      }\n    }\n  }\n\n  visitSync(visitors, node) {\n    for (let [plugin, visitor] of visitors) {\n      this.result.lastPlugin = plugin\n      let promise\n      try {\n        promise = visitor(node, this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node.proxyOf)\n      }\n      if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n        return true\n      }\n      if (isPromise(promise)) {\n        throw this.getAsyncError()\n      }\n    }\n  }\n\n  runOnRoot(plugin) {\n    this.result.lastPlugin = plugin\n    try {\n      if (typeof plugin === 'object' && plugin.Once) {\n        if (this.result.root.type === 'document') {\n          let roots = this.result.root.nodes.map(root =>\n            plugin.Once(root, this.helpers)\n          )\n\n          if (isPromise(roots[0])) {\n            return Promise.all(roots)\n          }\n\n          return roots\n        }\n\n        return plugin.Once(this.result.root, this.helpers)\n      } else if (typeof plugin === 'function') {\n        return plugin(this.result.root, this.result)\n      }\n    } catch (error) {\n      throw this.handleError(error)\n    }\n  }\n\n  getAsyncError() {\n    throw new Error('Use process(css).then(cb) to work with async plugins')\n  }\n\n  handleError(error, node) {\n    let plugin = this.result.lastPlugin\n    try {\n      if (node) node.addToError(error)\n      this.error = error\n      if (error.name === 'CssSyntaxError' && !error.plugin) {\n        error.plugin = plugin.postcssPlugin\n        error.setMessage()\n      } else if (plugin.postcssVersion) {\n        if (process.env.NODE_ENV !== 'production') {\n          let pluginName = plugin.postcssPlugin\n          let pluginVer = plugin.postcssVersion\n          let runtimeVer = this.result.processor.version\n          let a = pluginVer.split('.')\n          let b = runtimeVer.split('.')\n\n          if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {\n            // eslint-disable-next-line no-console\n            console.error(\n              'Unknown error from PostCSS plugin. Your current PostCSS ' +\n                'version is ' +\n                runtimeVer +\n                ', but ' +\n                pluginName +\n                ' uses ' +\n                pluginVer +\n                '. Perhaps this is the source of the error below.'\n            )\n          }\n        }\n      }\n    } catch (err) {\n      /* c8 ignore next 3 */\n      // eslint-disable-next-line no-console\n      if (console && console.error) console.error(err)\n    }\n    return error\n  }\n\n  async runAsync() {\n    this.plugin = 0\n    for (let i = 0; i < this.plugins.length; i++) {\n      let plugin = this.plugins[i]\n      let promise = this.runOnRoot(plugin)\n      if (isPromise(promise)) {\n        try {\n          await promise\n        } catch (error) {\n          throw this.handleError(error)\n        }\n      }\n    }\n\n    this.prepareVisitors()\n    if (this.hasListener) {\n      let root = this.result.root\n      while (!root[isClean]) {\n        root[isClean] = true\n        let stack = [toStack(root)]\n        while (stack.length > 0) {\n          let promise = this.visitTick(stack)\n          if (isPromise(promise)) {\n            try {\n              await promise\n            } catch (e) {\n              let node = stack[stack.length - 1].node\n              throw this.handleError(e, node)\n            }\n          }\n        }\n      }\n\n      if (this.listeners.OnceExit) {\n        for (let [plugin, visitor] of this.listeners.OnceExit) {\n          this.result.lastPlugin = plugin\n          try {\n            if (root.type === 'document') {\n              let roots = root.nodes.map(subRoot =>\n                visitor(subRoot, this.helpers)\n              )\n\n              await Promise.all(roots)\n            } else {\n              await visitor(root, this.helpers)\n            }\n          } catch (e) {\n            throw this.handleError(e)\n          }\n        }\n      }\n    }\n\n    this.processed = true\n    return this.stringify()\n  }\n\n  prepareVisitors() {\n    this.listeners = {}\n    let add = (plugin, type, cb) => {\n      if (!this.listeners[type]) this.listeners[type] = []\n      this.listeners[type].push([plugin, cb])\n    }\n    for (let plugin of this.plugins) {\n      if (typeof plugin === 'object') {\n        for (let event in plugin) {\n          if (!PLUGIN_PROPS[event] && /^[A-Z]/.test(event)) {\n            throw new Error(\n              `Unknown event ${event} in ${plugin.postcssPlugin}. ` +\n                `Try to update PostCSS (${this.processor.version} now).`\n            )\n          }\n          if (!NOT_VISITORS[event]) {\n            if (typeof plugin[event] === 'object') {\n              for (let filter in plugin[event]) {\n                if (filter === '*') {\n                  add(plugin, event, plugin[event][filter])\n                } else {\n                  add(\n                    plugin,\n                    event + '-' + filter.toLowerCase(),\n                    plugin[event][filter]\n                  )\n                }\n              }\n            } else if (typeof plugin[event] === 'function') {\n              add(plugin, event, plugin[event])\n            }\n          }\n        }\n      }\n    }\n    this.hasListener = Object.keys(this.listeners).length > 0\n  }\n\n  visitTick(stack) {\n    let visit = stack[stack.length - 1]\n    let { node, visitors } = visit\n\n    if (node.type !== 'root' && node.type !== 'document' && !node.parent) {\n      stack.pop()\n      return\n    }\n\n    if (visitors.length > 0 && visit.visitorIndex < visitors.length) {\n      let [plugin, visitor] = visitors[visit.visitorIndex]\n      visit.visitorIndex += 1\n      if (visit.visitorIndex === visitors.length) {\n        visit.visitors = []\n        visit.visitorIndex = 0\n      }\n      this.result.lastPlugin = plugin\n      try {\n        return visitor(node.toProxy(), this.helpers)\n      } catch (e) {\n        throw this.handleError(e, node)\n      }\n    }\n\n    if (visit.iterator !== 0) {\n      let iterator = visit.iterator\n      let child\n      while ((child = node.nodes[node.indexes[iterator]])) {\n        node.indexes[iterator] += 1\n        if (!child[isClean]) {\n          child[isClean] = true\n          stack.push(toStack(child))\n          return\n        }\n      }\n      visit.iterator = 0\n      delete node.indexes[iterator]\n    }\n\n    let events = visit.events\n    while (visit.eventIndex < events.length) {\n      let event = events[visit.eventIndex]\n      visit.eventIndex += 1\n      if (event === CHILDREN) {\n        if (node.nodes && node.nodes.length) {\n          node[isClean] = true\n          visit.iterator = node.getIterator()\n        }\n        return\n      } else if (this.listeners[event]) {\n        visit.visitors = this.listeners[event]\n        return\n      }\n    }\n    stack.pop()\n  }\n}\n\nLazyResult.registerPostcss = dependant => {\n  postcss = dependant\n}\n\nmodule.exports = LazyResult\nLazyResult.default = LazyResult\n\nRoot.registerLazyResult(LazyResult)\nDocument.registerLazyResult(LazyResult)\n", "'use strict'\n\nlet list = {\n  split(string, separators, last) {\n    let array = []\n    let current = ''\n    let split = false\n\n    let func = 0\n    let quote = false\n    let escape = false\n\n    for (let letter of string) {\n      if (escape) {\n        escape = false\n      } else if (letter === '\\\\') {\n        escape = true\n      } else if (quote) {\n        if (letter === quote) {\n          quote = false\n        }\n      } else if (letter === '\"' || letter === \"'\") {\n        quote = letter\n      } else if (letter === '(') {\n        func += 1\n      } else if (letter === ')') {\n        if (func > 0) func -= 1\n      } else if (func === 0) {\n        if (separators.includes(letter)) split = true\n      }\n\n      if (split) {\n        if (current !== '') array.push(current.trim())\n        current = ''\n        split = false\n      } else {\n        current += letter\n      }\n    }\n\n    if (last || current !== '') array.push(current.trim())\n    return array\n  },\n\n  space(string) {\n    let spaces = [' ', '\\n', '\\t']\n    return list.split(string, spaces)\n  },\n\n  comma(string) {\n    return list.split(string, [','], true)\n  }\n}\n\nmodule.exports = list\nlist.default = list\n", "'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\n\nlet Input = require('./input')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts, cssString) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n    this.css = cssString\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      if (this.root) {\n        this.root.walk(node => {\n          if (node.source && node.source.input.map) {\n            let map = node.source.input.map\n            if (!this.previousMaps.includes(map)) {\n              this.previousMaps.push(map)\n            }\n          }\n        })\n      } else {\n        let input = new Input(this.css, this.opts)\n        if (input.map) this.previousMaps.push(input.map)\n      }\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    if (this.root) {\n      let node\n      for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i]\n        if (node.type !== 'comment') continue\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i)\n        }\n      }\n    } else if (this.css) {\n      this.css = this.css.replace(/(\\n)?\\/\\*#[\\S\\s]*?\\*\\/$/gm, '')\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    if (this.root) {\n      this.root.walk(node => {\n        if (node.source) {\n          let from = node.source.input.from\n          if (from && !already[from]) {\n            already[from] = true\n            this.map.setSourceContent(\n              this.toUrl(this.path(from)),\n              node.source.input.css\n            )\n          }\n        }\n      })\n    } else if (this.css) {\n      let from = this.opts.from\n        ? this.toUrl(this.path(this.opts.from))\n        : '<no source>'\n      this.map.setSourceContent(from, this.css)\n    }\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    } else if (this.opts.from) {\n      return this.path(this.opts.from)\n    } else {\n      return 'to.css'\n    }\n  }\n\n  generateMap() {\n    if (this.root) {\n      this.generateString()\n    } else if (this.previous().length === 1) {\n      let prev = this.previous()[0].consumer()\n      prev.file = this.outputFile()\n      this.map = SourceMapGenerator.fromSourceMap(prev)\n    } else {\n      this.map = new SourceMapGenerator({ file: this.outputFile() })\n      this.map.addMapping({\n        source: this.opts.from\n          ? this.toUrl(this.path(this.opts.from))\n          : '<no source>',\n        generated: { line: 1, column: 0 },\n        original: { line: 1, column: 0 }\n      })\n    }\n\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.root && this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    } else {\n      return [this.css, this.map]\n    }\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.mapOpts.absolute) {\n      if (pathToFileURL) {\n        return pathToFileURL(node.source.input.from).toString()\n      } else {\n        throw new Error(\n          '`map.absolute` option is not available in this PostCSS build'\n        )\n      }\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    } else {\n      let result = ''\n      this.stringify(this.root, i => {\n        result += i\n      })\n      return [result]\n    }\n  }\n}\n\nmodule.exports = MapGenerator\n", "'use strict'\n\nlet MapGenerator = require('./map-generator')\nlet stringify = require('./stringify')\nlet warnOnce = require('./warn-once')\nlet parse = require('./parse')\nconst Result = require('./result')\n\nclass NoWorkResult {\n  constructor(processor, css, opts) {\n    css = css.toString()\n    this.stringified = false\n\n    this._processor = processor\n    this._css = css\n    this._opts = opts\n    this._map = undefined\n    let root\n\n    let str = stringify\n    this.result = new Result(this._processor, root, this._opts)\n    this.result.css = css\n\n    let self = this\n    Object.defineProperty(this.result, 'root', {\n      get() {\n        return self.root\n      }\n    })\n\n    let map = new MapGenerator(str, root, this._opts, css)\n    if (map.isMap()) {\n      let [generatedCSS, generatedMap] = map.generate()\n      if (generatedCSS) {\n        this.result.css = generatedCSS\n      }\n      if (generatedMap) {\n        this.result.map = generatedMap\n      }\n    }\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'NoWorkResult'\n  }\n\n  get processor() {\n    return this.result.processor\n  }\n\n  get opts() {\n    return this.result.opts\n  }\n\n  get css() {\n    return this.result.css\n  }\n\n  get content() {\n    return this.result.css\n  }\n\n  get map() {\n    return this.result.map\n  }\n\n  get root() {\n    if (this._root) {\n      return this._root\n    }\n\n    let root\n    let parser = parse\n\n    try {\n      root = parser(this._css, this._opts)\n    } catch (error) {\n      this.error = error\n    }\n\n    if (this.error) {\n      throw this.error\n    } else {\n      this._root = root\n      return root\n    }\n  }\n\n  get messages() {\n    return []\n  }\n\n  warnings() {\n    return []\n  }\n\n  toString() {\n    return this._css\n  }\n\n  then(onFulfilled, onRejected) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!('from' in this._opts)) {\n        warnOnce(\n          'Without `from` option PostCSS could generate wrong source map ' +\n            'and will not find Browserslist config. Set it to CSS file path ' +\n            'or to `undefined` to prevent this warning.'\n        )\n      }\n    }\n\n    return this.async().then(onFulfilled, onRejected)\n  }\n\n  catch(onRejected) {\n    return this.async().catch(onRejected)\n  }\n\n  finally(onFinally) {\n    return this.async().then(onFinally, onFinally)\n  }\n\n  async() {\n    if (this.error) return Promise.reject(this.error)\n    return Promise.resolve(this.result)\n  }\n\n  sync() {\n    if (this.error) throw this.error\n    return this.result\n  }\n}\n\nmodule.exports = NoWorkResult\nNoWorkResult.default = NoWorkResult\n", "'use strict'\n\nlet { isClean, my } = require('./symbols')\nlet CssSyntaxError = require('./css-syntax-error')\nlet Stringifier = require('./stringifier')\nlet stringify = require('./stringify')\n\nfunction cloneNode(obj, parent) {\n  let cloned = new obj.constructor()\n\n  for (let i in obj) {\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) {\n      /* c8 ignore next 2 */\n      continue\n    }\n    if (i === 'proxyCache') continue\n    let value = obj[i]\n    let type = typeof value\n\n    if (i === 'parent' && type === 'object') {\n      if (parent) cloned[i] = parent\n    } else if (i === 'source') {\n      cloned[i] = value\n    } else if (Array.isArray(value)) {\n      cloned[i] = value.map(j => cloneNode(j, cloned))\n    } else {\n      if (type === 'object' && value !== null) value = cloneNode(value)\n      cloned[i] = value\n    }\n  }\n\n  return cloned\n}\n\nclass Node {\n  constructor(defaults = {}) {\n    this.raws = {}\n    this[isClean] = false\n    this[my] = true\n\n    for (let name in defaults) {\n      if (name === 'nodes') {\n        this.nodes = []\n        for (let node of defaults[name]) {\n          if (typeof node.clone === 'function') {\n            this.append(node.clone())\n          } else {\n            this.append(node)\n          }\n        }\n      } else {\n        this[name] = defaults[name]\n      }\n    }\n  }\n\n  error(message, opts = {}) {\n    if (this.source) {\n      let { start, end } = this.rangeBy(opts)\n      return this.source.input.error(\n        message,\n        { line: start.line, column: start.column },\n        { line: end.line, column: end.column },\n        opts\n      )\n    }\n    return new CssSyntaxError(message)\n  }\n\n  warn(result, text, opts) {\n    let data = { node: this }\n    for (let i in opts) data[i] = opts[i]\n    return result.warn(text, data)\n  }\n\n  remove() {\n    if (this.parent) {\n      this.parent.removeChild(this)\n    }\n    this.parent = undefined\n    return this\n  }\n\n  toString(stringifier = stringify) {\n    if (stringifier.stringify) stringifier = stringifier.stringify\n    let result = ''\n    stringifier(this, i => {\n      result += i\n    })\n    return result\n  }\n\n  assign(overrides = {}) {\n    for (let name in overrides) {\n      this[name] = overrides[name]\n    }\n    return this\n  }\n\n  clone(overrides = {}) {\n    let cloned = cloneNode(this)\n    for (let name in overrides) {\n      cloned[name] = overrides[name]\n    }\n    return cloned\n  }\n\n  cloneBefore(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertBefore(this, cloned)\n    return cloned\n  }\n\n  cloneAfter(overrides = {}) {\n    let cloned = this.clone(overrides)\n    this.parent.insertAfter(this, cloned)\n    return cloned\n  }\n\n  replaceWith(...nodes) {\n    if (this.parent) {\n      let bookmark = this\n      let foundSelf = false\n      for (let node of nodes) {\n        if (node === this) {\n          foundSelf = true\n        } else if (foundSelf) {\n          this.parent.insertAfter(bookmark, node)\n          bookmark = node\n        } else {\n          this.parent.insertBefore(bookmark, node)\n        }\n      }\n\n      if (!foundSelf) {\n        this.remove()\n      }\n    }\n\n    return this\n  }\n\n  next() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index + 1]\n  }\n\n  prev() {\n    if (!this.parent) return undefined\n    let index = this.parent.index(this)\n    return this.parent.nodes[index - 1]\n  }\n\n  before(add) {\n    this.parent.insertBefore(this, add)\n    return this\n  }\n\n  after(add) {\n    this.parent.insertAfter(this, add)\n    return this\n  }\n\n  root() {\n    let result = this\n    while (result.parent && result.parent.type !== 'document') {\n      result = result.parent\n    }\n    return result\n  }\n\n  raw(prop, defaultType) {\n    let str = new Stringifier()\n    return str.raw(this, prop, defaultType)\n  }\n\n  cleanRaws(keepBetween) {\n    delete this.raws.before\n    delete this.raws.after\n    if (!keepBetween) delete this.raws.between\n  }\n\n  toJSON(_, inputs) {\n    let fixed = {}\n    let emitInputs = inputs == null\n    inputs = inputs || new Map()\n    let inputsNextIndex = 0\n\n    for (let name in this) {\n      if (!Object.prototype.hasOwnProperty.call(this, name)) {\n        /* c8 ignore next 2 */\n        continue\n      }\n      if (name === 'parent' || name === 'proxyCache') continue\n      let value = this[name]\n\n      if (Array.isArray(value)) {\n        fixed[name] = value.map(i => {\n          if (typeof i === 'object' && i.toJSON) {\n            return i.toJSON(null, inputs)\n          } else {\n            return i\n          }\n        })\n      } else if (typeof value === 'object' && value.toJSON) {\n        fixed[name] = value.toJSON(null, inputs)\n      } else if (name === 'source') {\n        let inputId = inputs.get(value.input)\n        if (inputId == null) {\n          inputId = inputsNextIndex\n          inputs.set(value.input, inputsNextIndex)\n          inputsNextIndex++\n        }\n        fixed[name] = {\n          inputId,\n          start: value.start,\n          end: value.end\n        }\n      } else {\n        fixed[name] = value\n      }\n    }\n\n    if (emitInputs) {\n      fixed.inputs = [...inputs.keys()].map(input => input.toJSON())\n    }\n\n    return fixed\n  }\n\n  positionInside(index) {\n    let string = this.toString()\n    let column = this.source.start.column\n    let line = this.source.start.line\n\n    for (let i = 0; i < index; i++) {\n      if (string[i] === '\\n') {\n        column = 1\n        line += 1\n      } else {\n        column += 1\n      }\n    }\n\n    return { line, column }\n  }\n\n  positionBy(opts) {\n    let pos = this.source.start\n    if (opts.index) {\n      pos = this.positionInside(opts.index)\n    } else if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) pos = this.positionInside(index)\n    }\n    return pos\n  }\n\n  rangeBy(opts) {\n    let start = {\n      line: this.source.start.line,\n      column: this.source.start.column\n    }\n    let end = this.source.end\n      ? {\n          line: this.source.end.line,\n          column: this.source.end.column + 1\n        }\n      : {\n          line: start.line,\n          column: start.column + 1\n        }\n\n    if (opts.word) {\n      let index = this.toString().indexOf(opts.word)\n      if (index !== -1) {\n        start = this.positionInside(index)\n        end = this.positionInside(index + opts.word.length)\n      }\n    } else {\n      if (opts.start) {\n        start = {\n          line: opts.start.line,\n          column: opts.start.column\n        }\n      } else if (opts.index) {\n        start = this.positionInside(opts.index)\n      }\n\n      if (opts.end) {\n        end = {\n          line: opts.end.line,\n          column: opts.end.column\n        }\n      } else if (opts.endIndex) {\n        end = this.positionInside(opts.endIndex)\n      } else if (opts.index) {\n        end = this.positionInside(opts.index + 1)\n      }\n    }\n\n    if (\n      end.line < start.line ||\n      (end.line === start.line && end.column <= start.column)\n    ) {\n      end = { line: start.line, column: start.column + 1 }\n    }\n\n    return { start, end }\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (\n          prop === 'prop' ||\n          prop === 'value' ||\n          prop === 'name' ||\n          prop === 'params' ||\n          prop === 'important' ||\n          /* c8 ignore next */\n          prop === 'text'\n        ) {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  toProxy() {\n    if (!this.proxyCache) {\n      this.proxyCache = new Proxy(this, this.getProxyProcessor())\n    }\n    return this.proxyCache\n  }\n\n  addToError(error) {\n    error.postcssNode = this\n    if (error.stack && this.source && /\\n\\s{4}at /.test(error.stack)) {\n      let s = this.source\n      error.stack = error.stack.replace(\n        /\\n\\s{4}at /,\n        `$&${s.input.from}:${s.start.line}:${s.start.column}$&`\n      )\n    }\n    return error\n  }\n\n  markDirty() {\n    if (this[isClean]) {\n      this[isClean] = false\n      let next = this\n      while ((next = next.parent)) {\n        next[isClean] = false\n      }\n    }\n  }\n\n  get proxyOf() {\n    return this\n  }\n}\n\nmodule.exports = Node\nNode.default = Node\n", "'use strict'\n\nlet Container = require('./container')\nlet Parser = require('./parser')\nlet Input = require('./input')\n\nfunction parse(css, opts) {\n  let input = new Input(css, opts)\n  let parser = new Parser(input)\n  try {\n    parser.parse()\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (e.name === 'CssSyntaxError' && opts && opts.from) {\n        if (/\\.scss$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse SCSS with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-scss parser'\n        } else if (/\\.sass/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Sass with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-sass parser'\n        } else if (/\\.less$/i.test(opts.from)) {\n          e.message +=\n            '\\nYou tried to parse Less with ' +\n            'the standard CSS parser; ' +\n            'try again with the postcss-less parser'\n        }\n      }\n    }\n    throw e\n  }\n\n  return parser.root\n}\n\nmodule.exports = parse\nparse.default = parse\n\nContainer.registerParse(parse)\n", "'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nconst SAFE_COMMENT_NEIGHBOR = {\n  empty: true,\n  space: true\n}\n\nfunction findLastWithPosition(tokens) {\n  for (let i = tokens.length - 1; i >= 0; i--) {\n    let token = tokens[i]\n    let pos = token[3] || token[2]\n    if (pos) return pos\n  }\n}\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      if (!customProperty) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0]\n          if (token !== 'space' && token !== 'comment') break\n          this.tokenizer.back(tokens.pop())\n        }\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n\n    node.source.end = this.getPosition(\n      last[3] || last[2] || findLastWithPosition(tokens)\n    )\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n\n    let firstSpaces = []\n    let next\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      firstSpaces.push(tokens.shift())\n    }\n\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n\n    if (hasWord) {\n      node.raws.between += firstSpaces.map(i => i[1]).join('')\n      firstSpaces = []\n    }\n    this.raw(node, 'value', firstSpaces.concat(tokens), customProperty)\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens, customProperty) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n      if (type === 'space' && i === length - 1 && !customProperty) {\n        clean = false\n      } else if (type === 'comment') {\n        prev = tokens[i - 1] ? tokens[i - 1][0] : 'empty'\n        next = tokens[i + 1] ? tokens[i + 1][0] : 'empty'\n        if (!SAFE_COMMENT_NEIGHBOR[prev] && !SAFE_COMMENT_NEIGHBOR[next]) {\n          if (value.slice(-1) === ',') {\n            clean = false\n          } else {\n            value += token[1]\n          }\n        } else {\n          clean = false\n        }\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error(\n      'Unclosed bracket',\n      { offset: bracket[2] },\n      { offset: bracket[2] + 1 }\n    )\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error(\n      'Unknown word',\n      { offset: tokens[0][2] },\n      { offset: tokens[0][2] + tokens[0][1].length }\n    )\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error(\n      'Unexpected }',\n      { offset: token[2] },\n      { offset: token[2] + 1 }\n    )\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error(\n      'Double colon',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error(\n      'At-rule without name',\n      { offset: token[2] },\n      { offset: token[2] + token[1].length }\n    )\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    // If the token is a word, e.g. `!important`, `red` or any other valid property's value.\n    // Then we need to return the colon after that word token. [3] is the \"end\" colon of that word.\n    // And because we need it after that one we do +1 to get the next one.\n    throw this.input.error(\n      'Missed semicolon',\n      token[0] === 'word' ? token[3] + 1 : token[2]\n    )\n  }\n}\n\nmodule.exports = Parser\n", "'use strict'\n\nlet CssSyntaxError = require('./css-syntax-error')\nlet Declaration = require('./declaration')\nlet LazyResult = require('./lazy-result')\nlet Container = require('./container')\nlet Processor = require('./processor')\nlet stringify = require('./stringify')\nlet fromJSON = require('./fromJSON')\nlet Document = require('./document')\nlet Warning = require('./warning')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Result = require('./result.js')\nlet Input = require('./input')\nlet parse = require('./parse')\nlet list = require('./list')\nlet Rule = require('./rule')\nlet Root = require('./root')\nlet Node = require('./node')\n\nfunction postcss(...plugins) {\n  if (plugins.length === 1 && Array.isArray(plugins[0])) {\n    plugins = plugins[0]\n  }\n  return new Processor(plugins)\n}\n\npostcss.plugin = function plugin(name, initializer) {\n  let warningPrinted = false\n  function creator(...args) {\n    // eslint-disable-next-line no-console\n    if (console && console.warn && !warningPrinted) {\n      warningPrinted = true\n      // eslint-disable-next-line no-console\n      console.warn(\n        name +\n          ': postcss.plugin was deprecated. Migration guide:\\n' +\n          'https://evilmartians.com/chronicles/postcss-8-plugin-migration'\n      )\n      if (process.env.LANG && process.env.LANG.startsWith('cn')) {\n        /* c8 ignore next 7 */\n        // eslint-disable-next-line no-console\n        console.warn(\n          name +\n            ': 里面 postcss.plugin 被弃用. 迁移指南:\\n' +\n            'https://www.w3ctech.com/topic/2226'\n        )\n      }\n    }\n    let transformer = initializer(...args)\n    transformer.postcssPlugin = name\n    transformer.postcssVersion = new Processor().version\n    return transformer\n  }\n\n  let cache\n  Object.defineProperty(creator, 'postcss', {\n    get() {\n      if (!cache) cache = creator()\n      return cache\n    }\n  })\n\n  creator.process = function (css, processOpts, pluginOpts) {\n    return postcss([creator(pluginOpts)]).process(css, processOpts)\n  }\n\n  return creator\n}\n\npostcss.stringify = stringify\npostcss.parse = parse\npostcss.fromJSON = fromJSON\npostcss.list = list\n\npostcss.comment = defaults => new Comment(defaults)\npostcss.atRule = defaults => new AtRule(defaults)\npostcss.decl = defaults => new Declaration(defaults)\npostcss.rule = defaults => new Rule(defaults)\npostcss.root = defaults => new Root(defaults)\npostcss.document = defaults => new Document(defaults)\n\npostcss.CssSyntaxError = CssSyntaxError\npostcss.Declaration = Declaration\npostcss.Container = Container\npostcss.Processor = Processor\npostcss.Document = Document\npostcss.Comment = Comment\npostcss.Warning = Warning\npostcss.AtRule = AtRule\npostcss.Result = Result\npostcss.Input = Input\npostcss.Rule = Rule\npostcss.Root = Root\npostcss.Node = Node\n\nLazyResult.registerPostcss(postcss)\n\nmodule.exports = postcss\npostcss.default = postcss\n", "'use strict'\n\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map-js')\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    /* c8 ignore next 2 */\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString.replace(/^\\/\\*\\s*# sourceMappingURL=/, '').trim()\n  }\n\n  loadAnnotation(css) {\n    let comments = css.match(/\\/\\*\\s*# sourceMappingURL=/gm)\n    if (!comments) return\n\n    // sourceMappingURLs from comments, strings, etc.\n    let start = css.lastIndexOf(comments.pop())\n    let end = css.indexOf('*/', start)\n\n    if (start > -1 && end > -1) {\n      // Locate the last sourceMappingURL to avoid pickin\n      this.annotation = this.getAnnotationURL(css.substring(start, end))\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n", "'use strict'\n\nlet NoWorkResult = require('./no-work-result')\nlet LazyResult = require('./lazy-result')\nlet Document = require('./document')\nlet Root = require('./root')\n\nclass Processor {\n  constructor(plugins = []) {\n    this.version = '8.4.14'\n    this.plugins = this.normalize(plugins)\n  }\n\n  use(plugin) {\n    this.plugins = this.plugins.concat(this.normalize([plugin]))\n    return this\n  }\n\n  process(css, opts = {}) {\n    if (\n      this.plugins.length === 0 &&\n      typeof opts.parser === 'undefined' &&\n      typeof opts.stringifier === 'undefined' &&\n      typeof opts.syntax === 'undefined'\n    ) {\n      return new NoWorkResult(this, css, opts)\n    } else {\n      return new LazyResult(this, css, opts)\n    }\n  }\n\n  normalize(plugins) {\n    let normalized = []\n    for (let i of plugins) {\n      if (i.postcss === true) {\n        i = i()\n      } else if (i.postcss) {\n        i = i.postcss\n      }\n\n      if (typeof i === 'object' && Array.isArray(i.plugins)) {\n        normalized = normalized.concat(i.plugins)\n      } else if (typeof i === 'object' && i.postcssPlugin) {\n        normalized.push(i)\n      } else if (typeof i === 'function') {\n        normalized.push(i)\n      } else if (typeof i === 'object' && (i.parse || i.stringify)) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'PostCSS syntaxes cannot be used as plugins. Instead, please use ' +\n              'one of the syntax/parser/stringifier options as outlined ' +\n              'in your PostCSS runner documentation.'\n          )\n        }\n      } else {\n        throw new Error(i + ' is not a PostCSS plugin')\n      }\n    }\n    return normalized\n  }\n}\n\nmodule.exports = Processor\nProcessor.default = Processor\n\nRoot.registerProcessor(Processor)\nDocument.registerProcessor(Processor)\n", "'use strict'\n\nlet Warning = require('./warning')\n\nclass Result {\n  constructor(processor, root, opts) {\n    this.processor = processor\n    this.messages = []\n    this.root = root\n    this.opts = opts\n    this.css = undefined\n    this.map = undefined\n  }\n\n  toString() {\n    return this.css\n  }\n\n  warn(text, opts = {}) {\n    if (!opts.plugin) {\n      if (this.lastPlugin && this.lastPlugin.postcssPlugin) {\n        opts.plugin = this.lastPlugin.postcssPlugin\n      }\n    }\n\n    let warning = new Warning(text, opts)\n    this.messages.push(warning)\n\n    return warning\n  }\n\n  warnings() {\n    return this.messages.filter(i => i.type === 'warning')\n  }\n\n  get content() {\n    return this.css\n  }\n}\n\nmodule.exports = Result\nResult.default = Result\n", "'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n", "'use strict'\n\nlet Container = require('./container')\nlet list = require('./list')\n\nclass Rule extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'rule'\n    if (!this.nodes) this.nodes = []\n  }\n\n  get selectors() {\n    return list.comma(this.selector)\n  }\n\n  set selectors(values) {\n    let match = this.selector ? this.selector.match(/,\\s*/) : null\n    let sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen')\n    this.selector = values.join(sep)\n  }\n}\n\nmodule.exports = Rule\nRule.default = Rule\n\nContainer.registerRule(Rule)\n", "'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* c8 ignore start */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    /* c8 ignore stop */\n    this[node.type](node, semicolon)\n  }\n\n  document(node) {\n    this.body(node)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    if (detect === 'before') {\n      // Hack for first rule in CSS\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n\n      // `root` nodes in `document` should use only their own raws\n      if (parent && parent.type === 'document') {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\nStringifier.default = Stringifier\n", "'use strict'\n\nlet Stringifier = require('./stringifier')\n\nfunction stringify(node, builder) {\n  let str = new Stringifier(builder)\n  str.stringify(node)\n}\n\nmodule.exports = stringify\nstringify.default = stringify\n", "'use strict'\n\nmodule.exports.isClean = Symbol('isClean')\n\nmodule.exports.my = Symbol('my')\n", "'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n", "/* eslint-disable no-console */\n'use strict'\n\nlet printed = {}\n\nmodule.exports = function warnOnce(message) {\n  if (printed[message]) return\n  printed[message] = true\n\n  if (typeof console !== 'undefined' && console.warn) {\n    console.warn(message)\n  }\n}\n", "'use strict'\n\nclass Warning {\n  constructor(text, opts = {}) {\n    this.type = 'warning'\n    this.text = text\n\n    if (opts.node && opts.node.source) {\n      let range = opts.node.rangeBy(opts)\n      this.line = range.start.line\n      this.column = range.start.column\n      this.endLine = range.end.line\n      this.endColumn = range.end.column\n    }\n\n    for (let opt in opts) this[opt] = opts[opt]\n  }\n\n  toString() {\n    if (this.node) {\n      return this.node.error(this.text, {\n        plugin: this.plugin,\n        index: this.index,\n        word: this.word\n      }).message\n    }\n\n    if (this.plugin) {\n      return this.plugin + ': ' + this.text\n    }\n\n    return this.text\n  }\n}\n\nmodule.exports = Warning\nWarning.default = Warning\n", "let urlAlphabet =\n  'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'\nlet customAlphabet = (alphabet, defaultSize = 21) => {\n  return (size = defaultSize) => {\n    let id = ''\n    let i = size\n    while (i--) {\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\nlet nanoid = (size = 21) => {\n  let id = ''\n  let i = size\n  while (i--) {\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\nmodule.exports = { nanoid, customAlphabet }\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};", "__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))", "// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};", "import postcss from './postcss.js'\n\nexport default postcss\n\nexport const stringify = postcss.stringify\nexport const fromJSON = postcss.fromJSON\nexport const plugin = postcss.plugin\nexport const parse = postcss.parse\nexport const list = postcss.list\n\nexport const document = postcss.document\nexport const comment = postcss.comment\nexport const atRule = postcss.atRule\nexport const rule = postcss.rule\nexport const decl = postcss.decl\nexport const root = postcss.root\n\nexport const CssSyntaxError = postcss.CssSyntaxError\nexport const Declaration = postcss.Declaration\nexport const Container = postcss.Container\nexport const Processor = postcss.Processor\nexport const Document = postcss.Document\nexport const Comment = postcss.Comment\nexport const Warning = postcss.Warning\nexport const AtRule = postcss.AtRule\nexport const Result = postcss.Result\nexport const Input = postcss.Input\nexport const Rule = postcss.Rule\nexport const Root = postcss.Root\nexport const Node = postcss.Node\n", "import type grapesjs from 'grapesjs';\nimport postcss, { Rule, AtRule, Declaration } from 'postcss';\n\nexport type ParsedRule = {\n  selectors: string;\n  style: Record<string, string>;\n  atRule?: string;\n  params?: string;\n}\n\ntype Editor = grapesjs.Editor;\n\n/**\n * Log stuff\n * @param  {Editor} editor\n * @param  {*} msg\n */\nexport const log = (editor: Editor, msg: any) =>\n  editor && editor.log(msg, { ns: 'parser-poscss' });\n\n/**\n * Create rule from node\n * @param  {Object} node\n * @return {Object}\n */\nexport const createRule = (node: Rule): ParsedRule => {\n  const declarations = (node.nodes as Declaration[]) || [];\n  const style: Record<string, string> = {};\n\n  declarations.forEach(({ prop, value, important }) => {\n    style[prop] = value + (important ? ' !important' : '');\n  });\n\n  return {\n    selectors: node.selector || '',\n    style,\n  }\n};\n\n/**\n * Create at rule from node\n * @param  {Object} node\n * @param  {Array<Object>} result\n * @return {Object}\n */\nexport const createAtRule = (node: AtRule, result: ParsedRule[]) => {\n  const { name, params } = node;\n  const isNested = ['media', 'keyframes'].indexOf(name) >= 0;\n\n  if (isNested) {\n    node.nodes.forEach(node => {\n      result.push({\n        ...createRule(node as Rule),\n        atRule: name,\n        params,\n      })\n    });\n  } else {\n    result.push({\n      // @ts-ignore\n      ...createRule(node as Rule),\n      atRule: name,\n    })\n  }\n};\n\nexport default (css: string, editor: Editor) => {\n  const result: ParsedRule[] = [];\n  log(editor, ['Input CSS', css]);\n\n  const ast = postcss().process(css).sync().root;\n  log(editor, ['PostCSS AST', ast]);\n\n  ast.nodes.forEach(node => {\n    const { type } = node;\n\n    switch (type) {\n      case 'rule':\n        result.push(createRule(node));\n        break;\n      case 'atrule':\n        createAtRule(node, result);\n        break;\n    }\n  });\n\n  log(editor, ['Output', result]);\n\n  return result;\n}\n", "import type grapesjs from 'grapesjs';\nimport parser from './parser';\n\nconst plugin: grapesjs.Plugin = (editor) => {\n  editor.setCustomParserCss(parser);\n};\n\nexport default plugin;\n"],
  "mappings": ";;;;;;;KAAA,SAA2CA,GAAMC,GAAAA;AAC1B,kBAAA,OAAZC,WAA0C,YAAA,OAAXC,SACxCA,OAAOD,UAAUD,EAAAA,IACQ,cAAA,OAAXG,UAAyBA,OAAOC,MAC9CD,OAAO,CAAA,GAAIH,CAAAA,IACe,YAAA,OAAZC,UACdA,QAAQ,yBAAA,IAA6BD,EAAAA,IAErCD,EAAK,yBAAA,IAA6BC,EAAAA;IACnC,EAAwB,eAAA,OAAfK,aAA6BA,aAAgC,eAAA,OAAXC,SAAyBA,SAASC,SAAO,OAAA,MAAA;AAAA,UAAA,IAAA,EAAA,KAAA,CAAAC,OAAA;ACTrG,YAAIC,KAAEC,QACFC,KAAO,WAAA;AAAY,iBAAO,EAACC,kBAAAA,OAAuBC,OAAMJ,IAAEK,MAAKL,IAAEM,KAAIN,IAAEO,QAAOP,IAAEQ,WAAUR,IAAES,SAAQT,IAAEU,QAAOV,IAAEW,eAAcX,IAAEY,OAAMZ,IAAEa,KAAIb,IAAEc,OAAMd,IAAEe,QAAOf,IAAEgB,MAAKhB,IAAEiB,SAAQjB,IAAEkB,MAAKlB,IAAEmB,OAAMnB,IAAEoB,MAAKpB,IAAEqB,SAAQrB,IAAEsB,OAAMtB,IAAEuB,SAAQvB,IAAEwB,UAASxB,IAAEyB,QAAOzB,IAAE0B,WAAU1B,IAAE2B,QAAO3B,IAAE4B,SAAQ5B,GAAAA;QAAE;AACxRP,QAAAA,GAAOD,UAAQU,GAAAA,GACfT,GAAOD,QAAQqC,eAAe3B;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACD9B,YAAI4B,KAAYC,GAAQ,EAAA;QAExB,MAAMC,UAAeF,GAAAA;UACnBG,YAAYC,IAAAA;AACVC,kBAAMD,EAAAA,GACNpC,KAAKsC,OAAO;UACd;UAEAC,UAAUC,IAAAA;AAER,mBADKxC,KAAKyC,QAAQC,UAAO1C,KAAK0C,QAAQ,CAAA,IAC/BL,MAAME,OAAAA,GAAUC,EAAAA;UACzB;UAEAG,WAAWH,IAAAA;AAET,mBADKxC,KAAKyC,QAAQC,UAAO1C,KAAK0C,QAAQ,CAAA,IAC/BL,MAAMM,QAAAA,GAAWH,EAAAA;UAC1B;QAAA;AAGF7C,QAAAA,GAAOD,UAAUwC,GACjBA,EAAOU,UAAUV,GAEjBF,GAAUa,eAAeX,CAAAA;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACtBzB,YAAIY,KAAOb,GAAQ,GAAA;QAEnB,MAAMc,UAAgBD,GAAAA;UACpBX,YAAYC,IAAAA;AACVC,kBAAMD,EAAAA,GACNpC,KAAKsC,OAAO;UACd;QAAA;AAGF3C,QAAAA,GAAOD,UAAUqD,GACjBA,EAAQH,UAAUG;MAAAA,GAAAA,IAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACVlB,YAKIC,IAAOC,GAAMf,GAAAA,EALb,SAAEgB,GAAO,IAAEC,EAAAA,IAAOlB,GAAQ,GAAA,GAC1BmB,IAAcnB,GAAQ,GAAA,GACtBc,IAAUd,GAAQ,GAAA,GAClBa,IAAOb,GAAQ,GAAA;AAInB,iBAASoB,EAAYX,IAAAA;AACnB,iBAAOA,GAAMY,IAAIC,CAAAA,QACXA,GAAEb,UAAOa,GAAEb,QAAQW,EAAYE,GAAEb,KAAAA,IAAAA,OAC9Ba,GAAEC,QACFD,GAAAA;QAEX;AAEA,iBAASE,EAAYC,IAAAA;AAEnB,cADAA,GAAKR,CAAAA,IAAAA,OACDQ,GAAKjB,QAAQC;AACf,qBAASa,MAAKG,GAAKjB,QAAQC;AACzBe,gBAAYF,EAAAA;QAGlB;QAEA,MAAMvB,UAAkBc,EAAAA;UACtBa,KAAKC,IAAAA;AAGH,mBAFAA,GAAMC,SAAS7D,MACfA,KAAKyC,QAAQC,MAAMiB,KAAKC,EAAAA,GACjB5D;UACT;UAEA8D,KAAKC,IAAAA;AACH,gBAAA,CAAK/D,KAAKyC,QAAQC;AAAO;AACzB,gBAEIsB,IAAOC,IAFPC,KAAWlE,KAAKmE,YAAAA;AAGpB,mBAAOnE,KAAKoE,QAAQF,EAAAA,IAAYlE,KAAKyC,QAAQC,MAAM2B,WACjDL,KAAQhE,KAAKoE,QAAQF,EAAAA,GACrBD,KAASF,GAAS/D,KAAKyC,QAAQC,MAAMsB,EAAAA,GAAQA,EAAAA,GAAAA,UACzCC;AAEJjE,mBAAKoE,QAAQF,EAAAA,KAAa;AAI5B,mBAAA,OADOlE,KAAKoE,QAAQF,EAAAA,GACbD;UACT;UAEAK,KAAKP,IAAAA;AACH,mBAAO/D,KAAK8D,KAAK,CAACF,IAAOL,OAAAA;AACvB,kBAAIU;AACJ,kBAAA;AACEA,gBAAAA,KAASF,GAASH,IAAOL,EAAAA;cAG3B,SAFStD,IAAAA;AACP,sBAAM2D,GAAMW,WAAWtE,EAAAA;cACzB;AAKA,qBAAA,UAJIgE,MAAoBL,GAAMU,SAC5BL,KAASL,GAAMU,KAAKP,EAAAA,IAGfE;YAAAA,CAAAA;UAEX;UAEAO,UAAUC,IAAMV,IAAAA;AACd,mBAAKA,KAQDU,cAAgBC,SACX1E,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,WAAfK,GAAMtB,QAAmBmC,GAAKE,KAAKf,GAAMa,IAAAA;AAC3C,uBAAOV,GAASH,IAAOL,EAAAA;YACzB,CAAA,IAGGvD,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,WAAfK,GAAMtB,QAAmBsB,GAAMa,SAASA;AAC1C,uBAAOV,GAASH,IAAOL,EAAAA;YACzB,CAAA,KAjBAQ,KAAWU,IACJzE,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,WAAfK,GAAMtB;AACR,uBAAOyB,GAASH,IAAOL,EAAAA;YACzB,CAAA;UAeN;UAEAqB,UAAUC,IAAUd,IAAAA;AAClB,mBAAKA,KASDc,cAAoBH,SACf1E,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,WAAfK,GAAMtB,QAAmBuC,GAASF,KAAKf,GAAMiB,QAAAA;AAC/C,uBAAOd,GAASH,IAAOL,EAAAA;YACzB,CAAA,IAGGvD,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,WAAfK,GAAMtB,QAAmBsB,GAAMiB,aAAaA;AAC9C,uBAAOd,GAASH,IAAOL,EAAAA;YACzB,CAAA,KAlBAQ,KAAWc,IAEJ7E,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,WAAfK,GAAMtB;AACR,uBAAOyB,GAASH,IAAOL,EAAAA;YACzB,CAAA;UAeN;UAEAuB,YAAYC,IAAMhB,IAAAA;AAChB,mBAAKA,KAQDgB,cAAgBL,SACX1E,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,aAAfK,GAAMtB,QAAqByC,GAAKJ,KAAKf,GAAMmB,IAAAA;AAC7C,uBAAOhB,GAASH,IAAOL,EAAAA;YACzB,CAAA,IAGGvD,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,aAAfK,GAAMtB,QAAqBsB,GAAMmB,SAASA;AAC5C,uBAAOhB,GAASH,IAAOL,EAAAA;YACzB,CAAA,KAjBAQ,KAAWgB,IACJ/E,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,aAAfK,GAAMtB;AACR,uBAAOyB,GAASH,IAAOL,EAAAA;YACzB,CAAA;UAeN;UAEAyB,aAAajB,IAAAA;AACX,mBAAO/D,KAAKsE,KAAK,CAACV,IAAOL,OAAAA;AACvB,kBAAmB,cAAfK,GAAMtB;AACR,uBAAOyB,GAASH,IAAOL,EAAAA;YACzB,CAAA;UAEJ;UAEAhB,UAAUC,IAAAA;AACR,qBAASoB,MAASpB,IAAU;AAC1B,kBAAIE,KAAQ1C,KAAKiF,UAAUrB,IAAO5D,KAAKkF,IAAAA;AACvC,uBAASxB,MAAQhB;AAAO1C,qBAAKyC,QAAQC,MAAMiB,KAAKD,EAAAA;YAClD;AAIA,mBAFA1D,KAAKmF,UAAAA,GAEEnF;UACT;UAEA2C,WAAWH,IAAAA;AACTA,YAAAA,KAAWA,GAAS4C,QAAAA;AACpB,qBAASxB,MAASpB,IAAU;AAC1B,kBAAIE,KAAQ1C,KAAKiF,UAAUrB,IAAO5D,KAAKqF,OAAO,SAAA,EAAWD,QAAAA;AACzD,uBAAS1B,MAAQhB;AAAO1C,qBAAKyC,QAAQC,MAAM4C,QAAQ5B,EAAAA;AACnD,uBAAS6B,MAAMvF,KAAKoE;AAClBpE,qBAAKoE,QAAQmB,EAAAA,IAAMvF,KAAKoE,QAAQmB,EAAAA,IAAM7C,GAAM2B;YAEhD;AAIA,mBAFArE,KAAKmF,UAAAA,GAEEnF;UACT;UAEAwF,UAAUC,IAAAA;AAER,gBADApD,MAAMmD,UAAUC,EAAAA,GACZzF,KAAK0C;AACP,uBAASgB,MAAQ1D,KAAK0C;AAAOgB,gBAAAA,GAAK8B,UAAUC,EAAAA;UAEhD;UAEAC,aAAaC,IAAOC,IAAAA;AAGlB,gBAII5B,IAJA1B,KAAiB,OAFrBqD,KAAQ3F,KAAKgE,MAAM2B,EAAAA,MAEM,WACrBjD,KAAQ1C,KAAKiF,UAAUW,IAAK5F,KAAKyC,QAAQC,MAAMiD,EAAAA,GAAQrD,EAAAA,EAAM8C,QAAAA;AACjE,qBAAS1B,MAAQhB;AAAO1C,mBAAKyC,QAAQC,MAAMmD,OAAOF,IAAO,GAAGjC,EAAAA;AAG5D,qBAAS6B,MAAMvF,KAAKoE;AAClBJ,cAAAA,KAAQhE,KAAKoE,QAAQmB,EAAAA,GACjBI,MAAS3B,OACXhE,KAAKoE,QAAQmB,EAAAA,IAAMvB,KAAQtB,GAAM2B;AAMrC,mBAFArE,KAAKmF,UAAAA,GAEEnF;UACT;UAEA8F,YAAYH,IAAOC,IAAAA;AACjBD,YAAAA,KAAQ3F,KAAKgE,MAAM2B,EAAAA;AAEnB,gBAGI3B,IAHAtB,KAAQ1C,KAAKiF,UAAUW,IAAK5F,KAAKyC,QAAQC,MAAMiD,EAAAA,CAAAA,EAAQP,QAAAA;AAC3D,qBAAS1B,MAAQhB;AAAO1C,mBAAKyC,QAAQC,MAAMmD,OAAOF,KAAQ,GAAG,GAAGjC,EAAAA;AAGhE,qBAAS6B,MAAMvF,KAAKoE;AAClBJ,cAAAA,KAAQhE,KAAKoE,QAAQmB,EAAAA,GACjBI,KAAQ3B,OACVhE,KAAKoE,QAAQmB,EAAAA,IAAMvB,KAAQtB,GAAM2B;AAMrC,mBAFArE,KAAKmF,UAAAA,GAEEnF;UACT;UAEA+F,YAAYnC,IAAAA;AAKV,gBAAII;AAJJJ,YAAAA,KAAQ5D,KAAKgE,MAAMJ,EAAAA,GACnB5D,KAAKyC,QAAQC,MAAMkB,EAAAA,EAAOC,SAAAA,QAC1B7D,KAAKyC,QAAQC,MAAMmD,OAAOjC,IAAO,CAAA;AAGjC,qBAAS2B,MAAMvF,KAAKoE;AAClBJ,cAAAA,KAAQhE,KAAKoE,QAAQmB,EAAAA,GACjBvB,MAASJ,OACX5D,KAAKoE,QAAQmB,EAAAA,IAAMvB,KAAQ;AAM/B,mBAFAhE,KAAKmF,UAAAA,GAEEnF;UACT;UAEAgG,YAAAA;AACE,qBAAStC,MAAQ1D,KAAKyC,QAAQC;AAAOgB,cAAAA,GAAKG,SAAAA;AAK1C,mBAJA7D,KAAKyC,QAAQC,QAAQ,CAAA,GAErB1C,KAAKmF,UAAAA,GAEEnF;UACT;UAEAiG,cAAcC,IAASC,IAAMpC,IAAAA;AAe3B,mBAdKA,OACHA,KAAWoC,IACXA,KAAO,CAAC,IAGVnG,KAAKwE,UAAU4B,CAAAA,OAAAA;AACTD,cAAAA,GAAKE,SAAAA,CAAUF,GAAKE,MAAMC,SAASF,GAAK3B,IAAAA,KACxC0B,GAAKI,QAAAA,CAASH,GAAKI,MAAMF,SAASH,GAAKI,IAAAA,MAE3CH,GAAKI,QAAQJ,GAAKI,MAAMC,QAAQP,IAASnC,EAAAA;YAAQ,CAAA,GAGnD/D,KAAKmF,UAAAA,GAEEnF;UACT;UAEA0G,MAAMC,IAAAA;AACJ,mBAAO3G,KAAK0C,MAAMgE,MAAMC,EAAAA;UAC1B;UAEAC,KAAKD,IAAAA;AACH,mBAAO3G,KAAK0C,MAAMkE,KAAKD,EAAAA;UACzB;UAEA3C,MAAMJ,IAAAA;AACJ,mBAAqB,YAAA,OAAVA,KAA2BA,MAClCA,GAAMnB,YAASmB,KAAQA,GAAMnB,UAC1BzC,KAAKyC,QAAQC,MAAMmE,QAAQjD,EAAAA;UACpC;UAEIyB,IAAAA,QAAAA;AACF,gBAAKrF,KAAKyC,QAAQC;AAClB,qBAAO1C,KAAKyC,QAAQC,MAAM,CAAA;UAC5B;UAEIwC,IAAAA,OAAAA;AACF,gBAAKlF,KAAKyC,QAAQC;AAClB,qBAAO1C,KAAKyC,QAAQC,MAAM1C,KAAKyC,QAAQC,MAAM2B,SAAS,CAAA;UACxD;UAEAY,UAAUvC,IAAOoE,IAAAA;AACf,gBAAqB,YAAA,OAAVpE;AACTA,cAAAA,KAAQW,EAAYL,GAAMN,EAAAA,EAAOA,KAAAA;qBACxBqE,MAAMC,QAAQtE,EAAAA,GAAQ;AAC/BA,cAAAA,KAAQA,GAAMuE,MAAM,CAAA;AACpB,uBAAS1D,MAAKb;AACRa,gBAAAA,GAAEM,UAAQN,GAAEM,OAAOkC,YAAYxC,IAAG,QAAA;YAE1C,WAA0B,WAAfb,GAAMJ,QAAiC,eAAdtC,KAAKsC,MAAqB;AAC5DI,cAAAA,KAAQA,GAAMA,MAAMuE,MAAM,CAAA;AAC1B,uBAAS1D,MAAKb;AACRa,gBAAAA,GAAEM,UAAQN,GAAEM,OAAOkC,YAAYxC,IAAG,QAAA;YAE1C,WAAWb,GAAMJ;AACfI,cAAAA,KAAQ,CAACA,EAAAA;qBACAA,GAAM+B,MAAM;AACrB,kBAAA,WAAW/B,GAAM8D;AACf,sBAAM,IAAIU,MAAM,wCAAA;AACgB,0BAAA,OAAhBxE,GAAM8D,UACtB9D,GAAM8D,QAAQrG,OAAOuC,GAAM8D,KAAAA,IAE7B9D,KAAQ,CAAC,IAAIU,EAAYV,EAAAA,CAAAA;YAC3B,WAAWA,GAAMmC;AACfnC,cAAAA,KAAQ,CAAC,IAAIO,EAAKP,EAAAA,CAAAA;qBACTA,GAAMqC;AACfrC,cAAAA,KAAQ,CAAC,IAAIR,EAAOQ,EAAAA,CAAAA;iBACf;AAAA,kBAAA,CAAIA,GAAMyE;AAGf,sBAAM,IAAID,MAAM,oCAAA;AAFhBxE,cAAAA,KAAQ,CAAC,IAAIK,EAAQL,EAAAA,CAAAA;YAGvB;AAiBA,mBAfgBA,GAAMY,IAAIC,CAAAA,QAEnBA,GAAEJ,CAAAA,KAAKnB,EAAUoF,QAAQ7D,EAAAA,IAC9BA,KAAIA,GAAEd,SACAoB,UAAQN,GAAEM,OAAOkC,YAAYxC,EAAAA,GAC/BA,GAAEL,CAAAA,KAAUO,EAAYF,EAAAA,GAAAA,WACjBA,GAAE8D,KAAKC,UACZR,MAAAA,WAAiBA,GAAOO,KAAKC,WAC/B/D,GAAE8D,KAAKC,SAASR,GAAOO,KAAKC,OAAOb,QAAQ,OAAO,EAAA,IAGtDlD,GAAEM,SAAS7D,KAAKyC,SACTc,GAAAA;UAIX;UAEAgE,oBAAAA;AACE,mBAAO,EACLC,KAAG,CAAC9D,IAAMe,IAAM+B,QACV9C,GAAKe,EAAAA,MAAU+B,OACnB9C,GAAKe,EAAAA,IAAQ+B,IACA,WAAT/B,MAA4B,aAATA,MAA8B,eAATA,MAC1Cf,GAAKyB,UAAAA,IAAAA,OAKTsC,KAAG,CAAC/D,IAAMe,OACK,cAATA,KACKf,KACGA,GAAKe,EAAAA,IAGN,WAATA,MACiB,YAAA,OAATA,MAAqBA,GAAKiD,WAAW,MAAA,IAEtC,IAAIC,OACFjE,GAAKe,EAAAA,EAAAA,GACPkD,GAAKrE,IAAIC,CAAAA,OACO,cAAA,OAANA,KACF,CAACK,IAAOI,OAAUT,GAAEK,GAAMgE,QAAAA,GAAW5D,EAAAA,IAErCT,EAAAA,CAAAA,IAKG,YAATkB,MAA6B,WAATA,KACtBoD,CAAAA,OACEnE,GAAKe,EAAAA,EAAM,CAACb,OAAUkE,OAC3BD,GAAGjE,GAAMgE,QAAAA,GAAAA,GAAcE,EAAAA,CAAAA,IAGT,WAATrD,KACF,MAAMf,GAAKlE,KAAAA,EAAOoI,QAAAA,IACP,YAATnD,KACFf,GAAKhB,MAAMY,IAAIC,CAAAA,OAAKA,GAAEqE,QAAAA,CAAAA,IACX,YAATnD,MAA6B,WAATA,KACtBf,GAAKe,EAAAA,EAAMmD,QAAAA,IAEXlE,GAAKe,EAAAA,IA7BLf,GAAKe,EAAAA,EAAAA;UAiCpB;UAEAN,cAAAA;AACOnE,iBAAK+H,aAAU/H,KAAK+H,WAAW,IAC/B/H,KAAKoE,YAASpE,KAAKoE,UAAU,CAAC,IAEnCpE,KAAK+H,YAAY;AACjB,gBAAI7D,KAAWlE,KAAK+H;AAGpB,mBAFA/H,KAAKoE,QAAQF,EAAAA,IAAY,GAElBA;UACT;QAAA;AAGFlC,UAAUgG,gBAAgBC,CAAAA,OAAAA;AACxBjF,UAAAA,KAAQiF;QAAAA,GAGVjG,EAAUkG,eAAeD,CAAAA,OAAAA;AACvBhF,cAAOgF;QAAAA,GAGTjG,EAAUa,iBAAiBoF,CAAAA,OAAAA;AACzB/F,cAAS+F;QAAAA,GAGXtI,GAAOD,UAAUsC,GACjBA,EAAUY,UAAUZ,GAGpBA,EAAUoF,UAAU1D,CAAAA,OAAAA;AACA,uBAAdA,GAAKpB,OACP6F,OAAOC,eAAe1E,IAAMxB,EAAOmG,SAAAA,IACZ,WAAd3E,GAAKpB,OACd6F,OAAOC,eAAe1E,IAAMT,EAAKoF,SAAAA,IACV,WAAd3E,GAAKpB,OACd6F,OAAOC,eAAe1E,IAAMN,EAAYiF,SAAAA,IACjB,cAAd3E,GAAKpB,QACd6F,OAAOC,eAAe1E,IAAMX,EAAQsF,SAAAA,GAGtC3E,GAAKP,CAAAA,IAAAA,MAEDO,GAAKhB,SACPgB,GAAKhB,MAAM4F,QAAQ1E,CAAAA,OAAAA;AACjB5B,cAAUoF,QAAQxD,EAAAA;UAAK,CAAA;QAE3B;MAAA,GAAA,KAAA,CAAA3D,IAAAsI,IAAAtG,OAAA;AAAA;AC5aF,YAAIuG,KAAOvG,GAAQ,GAAA,GAEfwG,IAAoBxG,GAAQ,GAAA;QAEhC,MAAMyG,UAAuBxB,MAAAA;UAC3B/E,YAAYwG,IAASC,IAAMC,IAAQrF,IAAQsF,IAAMC,GAAAA;AAC/C1G,kBAAMsG,EAAAA,GACN3I,KAAK+E,OAAO,kBACZ/E,KAAKgJ,SAASL,IAEVG,OACF9I,KAAK8I,OAAOA,KAEVtF,OACFxD,KAAKwD,SAASA,KAEZuF,MACF/I,KAAK+I,SAASA,IAAAA,WAELH,MAAAA,WAA+BC,OACpB,YAAA,OAATD,MACT5I,KAAK4I,OAAOA,IACZ5I,KAAK6I,SAASA,OAEd7I,KAAK4I,OAAOA,GAAKA,MACjB5I,KAAK6I,SAASD,GAAKC,QACnB7I,KAAKiJ,UAAUJ,GAAOD,MACtB5I,KAAKkJ,YAAYL,GAAOA,UAI5B7I,KAAKmJ,WAAAA,GAEDjC,MAAMkC,qBACRlC,MAAMkC,kBAAkBpJ,MAAM0I,CAAAA;UAElC;UAEAS,aAAAA;AACEnJ,iBAAK2I,UAAU3I,KAAK+I,SAAS/I,KAAK+I,SAAS,OAAO,IAClD/I,KAAK2I,WAAW3I,KAAK8I,OAAO9I,KAAK8I,OAAO,eAAA,WAC7B9I,KAAK4I,SACd5I,KAAK2I,WAAW,MAAM3I,KAAK4I,OAAO,MAAM5I,KAAK6I,SAE/C7I,KAAK2I,WAAW,OAAO3I,KAAKgJ;UAC9B;UAEAK,eAAeC,IAAAA;AACb,gBAAA,CAAKtJ,KAAKwD;AAAQ,qBAAO;AAEzB,gBAAI+F,KAAMvJ,KAAKwD;AACF,oBAAT8F,OAAeA,KAAQd,GAAKnI,mBAC5BoI,KACEa,OAAOC,KAAMd,EAAkBc,EAAAA;AAGrC,gBAMIC,IAAMC,IANNC,IAAQH,GAAII,MAAM,OAAA,GAClBC,IAAQC,KAAKC,IAAI9J,KAAK4I,OAAO,GAAG,CAAA,GAChCmB,IAAMF,KAAKG,IAAIhK,KAAK4I,OAAO,GAAGc,EAAMrF,MAAAA,GAEpC4F,IAAW9J,OAAO4J,CAAAA,EAAK1F;AAG3B,gBAAIiF,IAAO;AACT,kBAAA,EAAI,MAAE/I,IAAI,KAAEQ,IAAG,MAAEO,GAAAA,IAASkH,GAAKzG,aAAAA,IAAa;AAC5CyH,cAAAA,KAAOrC,CAAAA,OAAQ5G,GAAKQ,GAAIoG,EAAAA,CAAAA,GACxBsC,KAAQtC,CAAAA,OAAQ7F,GAAK6F,EAAAA;YACvB;AACEqC,cAAAA,KAAOC,KAAQS,CAAAA,OAAOA;AAGxB,mBAAOR,EACJzC,MAAM2C,GAAOG,CAAAA,EACbzG,IAAI,CAACsF,IAAM5E,OAAAA;AACV,kBAAImG,KAASP,IAAQ,IAAI5F,IACrBoG,KAAS,OAAO,MAAMD,IAAQlD,MAAAA,CAAOgD,CAAAA,IAAY;AACrD,kBAAIE,OAAWnK,KAAK4I,MAAM;AACxB,oBAAIyB,KACFZ,GAAMW,GAAO3D,QAAQ,OAAO,GAAA,CAAA,IAC5BmC,GAAK3B,MAAM,GAAGjH,KAAK6I,SAAS,CAAA,EAAGpC,QAAQ,UAAU,GAAA;AACnD,uBAAO+C,GAAK,GAAA,IAAOC,GAAMW,EAAAA,IAAUxB,KAAO,QAAQyB,KAAUb,GAAK,GAAA;cACnE;AACA,qBAAO,MAAMC,GAAMW,EAAAA,IAAUxB;YAAAA,CAAAA,EAE9B0B,KAAK,IAAA;UACV;UAEAC,WAAAA;AACE,gBAAIC,KAAOxK,KAAKqJ,eAAAA;AAIhB,mBAHImB,OACFA,KAAO,SAASA,KAAO,OAElBxK,KAAK+E,OAAO,OAAO/E,KAAK2I,UAAU6B;UAC3C;QAAA;AAGF7K,QAAAA,GAAOD,UAAUgJ,GACjBA,EAAe9F,UAAU8F;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACjGzB,YAAI5F,KAAOb,GAAQ,GAAA;QAEnB,MAAMmB,UAAoBN,GAAAA;UACxBX,YAAYC,IAAAA;AAERA,YAAAA,MAAAA,WACOA,GAASoE,SACU,YAAA,OAAnBpE,GAASoE,UAEhBpE,KAAW,EAAA,GAAKA,IAAUoE,OAAOrG,OAAOiC,GAASoE,KAAAA,EAAAA,IAEnDnE,MAAMD,EAAAA,GACNpC,KAAKsC,OAAO;UACd;UAEImI,IAAAA,WAAAA;AACF,mBAAOzK,KAAKyE,KAAKiD,WAAW,IAAA,KAA0B,QAAjB1H,KAAKyE,KAAK,CAAA;UACjD;QAAA;AAGF9E,QAAAA,GAAOD,UAAU0D,GACjBA,EAAYR,UAAUQ;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACrBtB,YAEIsH,IAAYC,GAFZ3I,IAAYC,GAAQ,EAAA;QAIxB,MAAM2I,UAAiB5I,EAAAA;UACrBG,YAAYC,IAAAA;AAEVC,kBAAM,EAAEC,MAAM,YAAA,GAAeF,GAAAA,CAAAA,GAExBpC,KAAK0C,UACR1C,KAAK0C,QAAQ,CAAA;UAEjB;UAEAmI,SAAS1E,KAAO,CAAC,GAAA;AAGf,mBAFW,IAAIuE,GAAW,IAAIC,KAAa3K,MAAMmG,EAAAA,EAErC2E,UAAAA;UACd;QAAA;AAGFF,UAASG,qBAAqB9C,CAAAA,OAAAA;AAC5ByC,UAAAA,KAAazC;QAAAA,GAGf2C,EAASI,oBAAoB/C,CAAAA,OAAAA;AAC3B0C,cAAY1C;QAAAA,GAGdtI,GAAOD,UAAUkL,GACjBA,EAAShI,UAAUgI;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;AC9BnB,YAAIxH,KAAcnB,GAAQ,GAAA,GACtBgJ,IAAchJ,GAAQ,GAAA,GACtBc,IAAUd,GAAQ,GAAA,GAClBC,IAASD,GAAQ,GAAA,GACjBiJ,IAAQjJ,GAAQ,GAAA,GAChBkJ,IAAOlJ,GAAQ,EAAA,GACfgB,IAAOhB,GAAQ,GAAA;AAEnB,iBAASmJ,EAASC,IAAMC,IAAAA;AACtB,cAAIvE,MAAMC,QAAQqE,EAAAA;AAAO,mBAAOA,GAAK/H,IAAIiI,CAAAA,OAAKH,EAASG,EAAAA,CAAAA;AAEvD,cAAA,EAAMD,QAAQE,IAAAA,GAAcpJ,EAAAA,IAAaiJ;AACzC,cAAIG,IAAW;AACbF,YAAAA,KAAS,CAAA;AACT,qBAASG,MAASD,IAAW;AAC3B,kBAAIE,KAAgB,EAAA,GAAKD,IAAOE,WAAWT,EAAM7C,UAAAA;AAC7CqD,cAAAA,GAAcpI,QAChBoI,GAAcpI,MAAM,EAAA,GACfoI,GAAcpI,KACjBqI,WAAWV,EAAY5C,UAAAA,IAG3BiD,GAAO3H,KAAK+H,EAAAA;YACd;UACF;AAIA,cAHItJ,EAASM,UACXN,EAASM,QAAQ2I,GAAK3I,MAAMY,IAAIiI,CAAAA,OAAKH,EAASG,IAAGD,EAAAA,CAAAA,IAE/ClJ,EAASoB,QAAQ;AACnB,gBAAA,EAAI,SAAEoI,IAAAA,GAAYpI,GAAAA,IAAWpB,EAASoB;AACtCpB,cAASoB,SAASA,IACH,QAAXoI,OACFxJ,EAASoB,OAAOiI,QAAQH,GAAOM,EAAAA;UAEnC;AACA,cAAsB,WAAlBxJ,EAASE;AACX,mBAAO,IAAI6I,EAAK/I,CAAAA;AACX,cAAsB,WAAlBA,EAASE;AAClB,mBAAO,IAAIc,GAAYhB,CAAAA;AAClB,cAAsB,WAAlBA,EAASE;AAClB,mBAAO,IAAIW,EAAKb,CAAAA;AACX,cAAsB,cAAlBA,EAASE;AAClB,mBAAO,IAAIS,EAAQX,CAAAA;AACd,cAAsB,aAAlBA,EAASE;AAClB,mBAAO,IAAIJ,EAAOE,CAAAA;AAElB,gBAAM,IAAI8E,MAAM,wBAAwBmE,GAAK/I,IAAAA;QAEjD;AAEA3C,QAAAA,GAAOD,UAAU0L,GACjBA,EAASxI,UAAUwI;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACnDnB,YAAA,EAAI,mBAAES,IAAiB,oBAAEC,EAAAA,IAAuB7J,GAAQ,GAAA,GAAA,EACpD,eAAE8J,GAAa,eAAEC,EAAAA,IAAkB/J,GAAQ,GAAA,GAAA,EAC3C,SAAEgK,GAAO,YAAEC,EAAAA,IAAejK,GAAQ,GAAA,GAAA,EAClC,QAAEkK,EAAAA,IAAWlK,GAAQ,GAAA,GAErBwG,IAAoBxG,GAAQ,GAAA,GAC5ByG,IAAiBzG,GAAQ,GAAA,GACzBgJ,IAAchJ,GAAQ,GAAA,GAEtBmK,IAAkBC,OAAO,iBAAA,GAEzBC,IAAqBC,QAAQV,MAAqBC,CAAAA,GAClDU,IAAgBD,QAAQN,KAAWC,CAAAA;QAEvC,MAAMhB,EAAAA;UACJ/I,YAAYoH,IAAKpD,KAAO,CAAC,GAAA;AACvB,gBACEoD,QAAAA,MAEgB,YAAA,OAARA,MAAAA,CAAqBA,GAAIgB;AAEjC,oBAAM,IAAIrD,MAAM,oBAAoBqC,EAAAA,wBAAAA;AAwBtC,gBArBAvJ,KAAKuJ,MAAMA,GAAIgB,SAAAA,GAEK,aAAhBvK,KAAKuJ,IAAI,CAAA,KAAmC,QAAhBvJ,KAAKuJ,IAAI,CAAA,KACvCvJ,KAAKyM,SAAAA,MACLzM,KAAKuJ,MAAMvJ,KAAKuJ,IAAItC,MAAM,CAAA,KAE1BjH,KAAKyM,SAAAA,OAGHtG,GAAKuG,SAAAA,CAEJF,KACD,YAAY7H,KAAKwB,GAAKuG,IAAAA,KACtBR,EAAW/F,GAAKuG,IAAAA,IAEhB1M,KAAK8I,OAAO3C,GAAKuG,OAEjB1M,KAAK8I,OAAOmD,EAAQ9F,GAAKuG,IAAAA,IAIzBF,KAAiBF,GAAoB;AACvC,kBAAIhJ,KAAM,IAAI2H,EAAYjL,KAAKuJ,KAAKpD,EAAAA;AACpC,kBAAI7C,GAAI6D,MAAM;AACZnH,qBAAKsD,MAAMA;AACX,oBAAIwF,KAAOxF,GAAIqJ,SAAAA,EAAW7D;AAAAA,iBACrB9I,KAAK8I,QAAQA,OAAM9I,KAAK8I,OAAO9I,KAAK4M,WAAW9D,EAAAA;cACtD;YACF;AAEK9I,iBAAK8I,SACR9I,KAAKuF,KAAK,gBAAgB4G,EAAO,CAAA,IAAK,MAEpCnM,KAAKsD,QAAKtD,KAAKsD,IAAIwF,OAAO9I,KAAK0M;UACrC;UAEAG,WAAWC,IAAAA;AACT,gBAAIC,IAAUC;AACd,gBAAKhN,KAAKoM,CAAAA;AAYRY,cAAAA,KAAchN,KAAKoM,CAAAA;iBAZO;AAC1B,kBAAI1C,KAAQ1J,KAAKuJ,IAAII,MAAM,IAAA;AAC3BqD,cAAAA,KAAc,IAAIjG,MAAM2C,GAAMrF,MAAAA;AAC9B,kBAAI4I,KAAY;AAEhB,uBAAS1J,KAAI,GAAG2J,KAAIxD,GAAMrF,QAAQd,KAAI2J,IAAG3J;AACvCyJ,gBAAAA,GAAYzJ,EAAAA,IAAK0J,IACjBA,MAAavD,GAAMnG,EAAAA,EAAGc,SAAS;AAGjCrE,mBAAKoM,CAAAA,IAAmBY;YAC1B;AAGAD,YAAAA,KAAWC,GAAYA,GAAY3I,SAAS,CAAA;AAE5C,gBAAI2F,KAAM;AACV,gBAAI8C,MAAUC;AACZ/C,cAAAA,KAAMgD,GAAY3I,SAAS;iBACtB;AACL,kBACI8I,IADArD,KAAMkD,GAAY3I,SAAS;AAE/B,qBAAO2F,KAAMF;AAEX,oBADAqD,KAAMnD,MAAQF,KAAME,MAAQ,IACxB8C,KAASE,GAAYG,EAAAA;AACvBrD,kBAAAA,KAAMqD,KAAM;qBACP;AAAA,sBAAA,EAAIL,MAAUE,GAAYG,KAAM,CAAA,IAEhC;AACLnD,oBAAAA,KAAMmD;AACN;kBACF;AAJEnD,kBAAAA,KAAMmD,KAAM;gBAId;YAEJ;AACA,mBAAO,EACLvE,MAAMoB,KAAM,GACZoD,KAAKN,KAASE,GAAYhD,EAAAA,IAAO,EAAA;UAErC;UAEAqD,MAAM1E,IAASC,IAAMC,IAAQ1C,KAAO,CAAC,GAAA;AACnC,gBAAIlC,IAAQgF,IAASC;AAErB,gBAAIN,MAAwB,YAAA,OAATA,IAAmB;AACpC,kBAAIgB,KAAQhB,IACRmB,KAAMlB;AACV,kBAA2B,YAAA,OAAhBD,GAAKkE,QAAqB;AACnC,oBAAIQ,KAAMtN,KAAK6M,WAAWjD,GAAMkD,MAAAA;AAChClE,gBAAAA,KAAO0E,GAAI1E,MACXC,KAASyE,GAAIF;cACf;AACExE,gBAAAA,KAAOgB,GAAMhB,MACbC,KAASe,GAAMf;AAEjB,kBAA0B,YAAA,OAAfkB,GAAI+C,QAAqB;AAClC,oBAAIQ,KAAMtN,KAAK6M,WAAW9C,GAAI+C,MAAAA;AAC9B7D,gBAAAA,KAAUqE,GAAI1E,MACdM,KAAYoE,GAAIF;cAClB;AACEnE,gBAAAA,KAAUc,GAAInB,MACdM,KAAYa,GAAIlB;YAEpB,WAAO,CAAKA,IAAQ;AAClB,kBAAIyE,KAAMtN,KAAK6M,WAAWjE,EAAAA;AAC1BA,cAAAA,KAAO0E,GAAI1E,MACXC,KAASyE,GAAIF;YACf;AAEA,gBAAIG,KAASvN,KAAKuN,OAAO3E,IAAMC,IAAQI,IAASC,EAAAA;AAiChD,mBA/BEjF,KADEsJ,KACO,IAAI7E,EACXC,IAAAA,WACA4E,GAAOtE,UACHsE,GAAO3E,OACP,EAAEA,MAAM2E,GAAO3E,MAAMC,QAAQ0E,GAAO1E,OAAAA,GAAAA,WACxC0E,GAAOtE,UACHsE,GAAO1E,SACP,EAAED,MAAM2E,GAAOtE,SAASJ,QAAQ0E,GAAOrE,UAAAA,GAC3CqE,GAAO/J,QACP+J,GAAOzE,MACP3C,GAAK4C,MAAAA,IAGE,IAAIL,EACXC,IAAAA,WACAM,KAAwBL,KAAO,EAAEA,MAAAA,IAAMC,QAAAA,GAAAA,GAAAA,WACvCI,KAAwBJ,KAAS,EAAED,MAAMK,IAASJ,QAAQK,GAAAA,GAC1DlJ,KAAKuJ,KACLvJ,KAAK8I,MACL3C,GAAK4C,MAAAA,GAIT9E,GAAOwH,QAAQ,EAAE7C,MAAAA,IAAMC,QAAAA,IAAQI,SAAAA,IAASC,WAAAA,IAAW1F,QAAQxD,KAAKuJ,IAAAA,GAC5DvJ,KAAK8I,SACHkD,MACF/H,GAAOwH,MAAM+B,MAAMxB,EAAchM,KAAK8I,IAAAA,EAAMyB,SAAAA,IAE9CtG,GAAOwH,MAAM3C,OAAO9I,KAAK8I,OAGpB7E;UACT;UAEAsJ,OAAO3E,IAAMC,IAAQI,IAASC,IAAAA;AAC5B,gBAAA,CAAKlJ,KAAKsD;AAAK,qBAAA;AACf,gBAKImK,IAKAC,IAVAf,KAAW3M,KAAKsD,IAAIqJ,SAAAA,GAEpBD,KAAOC,GAASgB,oBAAoB,EAAE/E,MAAAA,IAAMC,QAAAA,GAAAA,CAAAA;AAChD,gBAAA,CAAK6D,GAAKlJ;AAAQ,qBAAA;AAGK,wBAAA,OAAZyF,OACTwE,KAAKd,GAASgB,oBAAoB,EAAE/E,MAAMK,IAASJ,QAAQK,GAAAA,CAAAA,IAM3DwE,KADExB,EAAWQ,GAAKlJ,MAAAA,IACRwI,EAAcU,GAAKlJ,MAAAA,IAEnB,IAAIoK,IACZlB,GAAKlJ,QACLxD,KAAKsD,IAAIqJ,SAAAA,EAAWkB,cAAc7B,EAAchM,KAAKsD,IAAIwK,OAAAA,CAAAA;AAI7D,gBAAI7J,KAAS,EACXuJ,KAAKE,GAAQnD,SAAAA,GACb3B,MAAM8D,GAAK9D,MACXC,QAAQ6D,GAAK7D,QACbI,SAASwE,MAAMA,GAAG7E,MAClBM,WAAWuE,MAAMA,GAAG5E,OAAAA;AAGtB,gBAAyB,YAArB6E,GAAQK,UAAsB;AAChC,kBAAA,CAAIhC;AAIF,sBAAM,IAAI7E,MAAM,uDAAA;AAHhBjD,cAAAA,GAAO6E,OAAOiD,EAAc2B,EAAAA;YAKhC;AAEA,gBAAIlK,KAASmJ,GAASqB,iBAAiBtB,GAAKlJ,MAAAA;AAG5C,mBAFIA,OAAQS,GAAOT,SAASA,KAErBS;UACT;UAEA2I,WAAW9D,IAAAA;AACT,mBAAI,YAAYnE,KAAKmE,EAAAA,IACZA,KAEFmD,EAAQjM,KAAKsD,IAAIqJ,SAAAA,EAAWkB,cAAc7N,KAAKsD,IAAI9D,QAAQ,KAAKsJ,EAAAA;UACzE;UAEI4D,IAAAA,OAAAA;AACF,mBAAO1M,KAAK8I,QAAQ9I,KAAKuF;UAC3B;UAEA0I,SAAAA;AACE,gBAAI5C,KAAO,CAAC;AACZ,qBAAStG,MAAQ,CAAC,UAAU,OAAO,QAAQ,IAAA;AACvB,sBAAd/E,KAAK+E,EAAAA,MACPsG,GAAKtG,EAAAA,IAAQ/E,KAAK+E,EAAAA;AAStB,mBANI/E,KAAKsD,QACP+H,GAAK/H,MAAM,EAAA,GAAKtD,KAAKsD,IAAAA,GACjB+H,GAAK/H,IAAI4K,kBACX7C,GAAK/H,IAAI4K,gBAAAA,UAGN7C;UACT;QAAA;AAGF1L,QAAAA,GAAOD,UAAUwL,GACjBA,EAAMtI,UAAUsI,GAEZzC,KAAqBA,EAAkB0F,iBACzC1F,EAAkB0F,cAAcjD,CAAAA;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACpPlC,YAAA,EAAI,SAAEhI,IAAO,IAAEC,EAAAA,IAAOlB,GAAQ,GAAA,GAC1BmM,IAAenM,GAAQ,GAAA,GACvB6I,IAAY7I,GAAQ,EAAA,GACpBD,IAAYC,GAAQ,EAAA,GACpB2I,IAAW3I,GAAQ,GAAA,GAEnBoM,KADWpM,GAAQ,GAAA,GACVA,GAAQ,GAAA,IACjBe,IAAQf,GAAQ,GAAA,GAChBkJ,IAAOlJ,GAAQ,EAAA;AAEnB,cAAMqM,IAAqB,EACzBC,UAAU,YACV/O,MAAM,QACNgP,QAAQ,UACRC,MAAM,QACNrI,MAAM,eACNsI,SAAS,UAAA,GAGLC,IAAe,EACnBC,eAAAA,MACAC,SAAAA,MACAC,MAAAA,MACAlE,UAAAA,MACAO,MAAAA,MACA/H,aAAAA,MACAH,MAAAA,MACAf,QAAAA,MACAa,SAAAA,MACAgM,iBAAAA,MACAC,UAAAA,MACAC,YAAAA,MACAC,aAAAA,MACAC,UAAAA,MACAC,cAAAA,MACAC,UAAAA,KAAU,GAGNC,IAAe,EACnBV,eAAAA,MACAC,SAAAA,MACAC,MAAAA,KAAM,GAGFS,IAAW;AAEjB,iBAASC,EAAUC,IAAAA;AACjB,iBAAsB,YAAA,OAARA,MAAwC,cAAA,OAAbA,GAAIC;QAC/C;AAEA,iBAASC,EAAUjM,IAAAA;AACjB,cAAIkM,KAAAA,OACAtN,KAAOgM,EAAmB5K,GAAKpB,IAAAA;AAOnC,iBANkB,WAAdoB,GAAKpB,OACPsN,KAAMlM,GAAKe,KAAKoL,YAAAA,IACO,aAAdnM,GAAKpB,SACdsN,KAAMlM,GAAKqB,KAAK8K,YAAAA,IAGdD,MAAOlM,GAAKnB,SACP,CACLD,IACAA,KAAO,MAAMsN,IACbL,GACAjN,KAAO,QACPA,KAAO,UAAUsN,EAAAA,IAEVA,KACF,CAACtN,IAAMA,KAAO,MAAMsN,IAAKtN,KAAO,QAAQA,KAAO,UAAUsN,EAAAA,IACvDlM,GAAKnB,SACP,CAACD,IAAMiN,GAAUjN,KAAO,MAAA,IAExB,CAACA,IAAMA,KAAO,MAAA;QAEzB;AAEA,iBAASwN,EAAQpM,IAAAA;AACf,cAAIqM;AASJ,iBAPEA,KADgB,eAAdrM,GAAKpB,OACE,CAAC,YAAYiN,GAAU,cAAA,IACT,WAAd7L,GAAKpB,OACL,CAAC,QAAQiN,GAAU,UAAA,IAEnBI,EAAUjM,EAAAA,GAGd,EACLA,MAAAA,IACAqM,QAAAA,IACAC,YAAY,GACZC,UAAU,CAAA,GACVC,cAAc,GACdhM,UAAU,EAAA;QAEd;AAEA,iBAASiM,EAAWzM,IAAAA;AAGlB,iBAFAA,GAAKR,EAAAA,IAAAA,OACDQ,GAAKhB,SAAOgB,GAAKhB,MAAM4F,QAAQ/E,CAAAA,OAAK4M,EAAW5M,EAAAA,CAAAA,GAC5CG;QACT;AAEA,YAAI0M,IAAU,CAAC;QAEf,MAAM1F,EAAAA;UACJvI,YAAYkO,IAAW9G,IAAKpD,IAAAA;AAI1B,gBAAI3G;AACJ,gBAJAQ,KAAKsQ,cAAAA,OACLtQ,KAAKuQ,YAAAA,OAIY,YAAA,OAARhH,MACC,SAARA,MACc,WAAbA,GAAIjH,QAAgC,eAAbiH,GAAIjH;AAGvB,kBAAIiH,cAAemB,KAAcnB,cAAe8E;AACrD7O,gBAAAA,KAAO2Q,EAAW5G,GAAI/J,IAAAA,GAClB+J,GAAIjG,QAAAA,WACK6C,GAAK7C,QAAqB6C,GAAK7C,MAAM,CAAC,IAC5C6C,GAAK7C,IAAIkN,WAAQrK,GAAK7C,IAAIkN,SAAAA,QAC/BrK,GAAK7C,IAAImN,OAAOlH,GAAIjG;mBAEjB;AACL,oBAAIoN,KAAS1N;AACTmD,gBAAAA,GAAKwK,WAAQD,KAASvK,GAAKwK,OAAO3N,QAClCmD,GAAKuK,WAAQA,KAASvK,GAAKuK,SAC3BA,GAAO1N,UAAO0N,KAASA,GAAO1N;AAElC,oBAAA;AACExD,kBAAAA,KAAOkR,GAAOnH,IAAKpD,EAAAA;gBAIrB,SAHSkH,IAAAA;AACPrN,uBAAKuQ,YAAAA,MACLvQ,KAAKqN,QAAQA;gBACf;AAEI7N,gBAAAA,MAAAA,CAASA,GAAK2D,CAAAA,KAEhBnB,EAAUoF,QAAQ5H,EAAAA;cAEtB;;AAzBEA,cAAAA,KAAO2Q,EAAW5G,EAAAA;AA2BpBvJ,iBAAKiE,SAAS,IAAIoK,EAAOgC,IAAW7Q,IAAM2G,EAAAA,GAC1CnG,KAAK4Q,UAAU,EAAA,GAAKR,GAASnM,QAAQjE,KAAKiE,QAAQmM,SAAAA,EAAAA,GAClDpQ,KAAK6Q,UAAU7Q,KAAKqQ,UAAUQ,QAAQvN,IAAIyF,CAAAA,OAClB,YAAA,OAAXA,MAAuBA,GAAO8F,UAChC,EAAA,GAAK9F,IAAAA,GAAWA,GAAO8F,QAAQ7O,KAAKiE,MAAAA,EAAAA,IAEpC8E,EAAAA;UAGb;UAEY+H,KAAPzE,OAAOyE,WAAAA,IAAAA;AACV,mBAAO;UACT;UAEIT,IAAAA,YAAAA;AACF,mBAAOrQ,KAAKiE,OAAOoM;UACrB;UAEIlK,IAAAA,OAAAA;AACF,mBAAOnG,KAAKiE,OAAOkC;UACrB;UAEIoD,IAAAA,MAAAA;AACF,mBAAOvJ,KAAK8K,UAAAA,EAAYvB;UAC1B;UAEIwH,IAAAA,UAAAA;AACF,mBAAO/Q,KAAK8K,UAAAA,EAAYiG;UAC1B;UAEIzN,IAAAA,MAAAA;AACF,mBAAOtD,KAAK8K,UAAAA,EAAYxH;UAC1B;UAEI9D,IAAAA,OAAAA;AACF,mBAAOQ,KAAKgR,KAAAA,EAAOxR;UACrB;UAEIyR,IAAAA,WAAAA;AACF,mBAAOjR,KAAKgR,KAAAA,EAAOC;UACrB;UAEAC,WAAAA;AACE,mBAAOlR,KAAKgR,KAAAA,EAAOE,SAAAA;UACrB;UAEA3G,WAAAA;AACE,mBAAOvK,KAAKuJ;UACd;UAEAmG,KAAKyB,IAAaC,IAAAA;AAUhB,mBAAOpR,KAAKqR,MAAAA,EAAQ3B,KAAKyB,IAAaC,EAAAA;UACxC;UAEAE,MAAMF,IAAAA;AACJ,mBAAOpR,KAAKqR,MAAAA,EAAQC,MAAMF,EAAAA;UAC5B;UAEAG,QAAQC,IAAAA;AACN,mBAAOxR,KAAKqR,MAAAA,EAAQ3B,KAAK8B,IAAWA,EAAAA;UACtC;UAEAH,QAAAA;AACE,mBAAIrR,KAAKqN,QAAcoE,QAAQC,OAAO1R,KAAKqN,KAAAA,IACvCrN,KAAKuQ,YAAkBkB,QAAQxF,QAAQjM,KAAKiE,MAAAA,KAC3CjE,KAAK2R,eACR3R,KAAK2R,aAAa3R,KAAK4R,SAAAA,IAElB5R,KAAK2R;UACd;UAEAX,OAAAA;AACE,gBAAIhR,KAAKqN;AAAO,oBAAMrN,KAAKqN;AAC3B,gBAAIrN,KAAKuQ;AAAW,qBAAOvQ,KAAKiE;AAGhC,gBAFAjE,KAAKuQ,YAAAA,MAEDvQ,KAAK2R;AACP,oBAAM3R,KAAK6R,cAAAA;AAGb,qBAAS9I,MAAU/I,KAAK6Q,SAAS;AAE/B,kBAAIrB,EADUxP,KAAK8R,UAAU/I,EAAAA,CAAAA;AAE3B,sBAAM/I,KAAK6R,cAAAA;YAEf;AAGA,gBADA7R,KAAK+R,gBAAAA,GACD/R,KAAKgS,aAAa;AACpB,kBAAIxS,KAAOQ,KAAKiE,OAAOzE;AACvB,qBAAA,CAAQA,GAAK0D,EAAAA;AACX1D,gBAAAA,GAAK0D,EAAAA,IAAAA,MACLlD,KAAKiS,SAASzS,EAAAA;AAEhB,kBAAIQ,KAAKkS,UAAU7C;AACjB,oBAAkB,eAAd7P,GAAK8C;AACP,2BAAS6P,MAAW3S,GAAKkD;AACvB1C,yBAAKoS,UAAUpS,KAAKkS,UAAU7C,UAAU8C,EAAAA;;AAG1CnS,uBAAKoS,UAAUpS,KAAKkS,UAAU7C,UAAU7P,EAAAA;YAG9C;AAEA,mBAAOQ,KAAKiE;UACd;UAEA6G,YAAAA;AACE,gBAAI9K,KAAKqN;AAAO,oBAAMrN,KAAKqN;AAC3B,gBAAIrN,KAAKsQ;AAAa,qBAAOtQ,KAAKiE;AAClCjE,iBAAKsQ,cAAAA,MAELtQ,KAAKgR,KAAAA;AAEL,gBAAI7K,KAAOnG,KAAKiE,OAAOkC,MACnB+D,KAAMY;AACN3E,YAAAA,GAAKwK,WAAQzG,KAAM/D,GAAKwK,OAAO7F,YAC/B3E,GAAKkM,gBAAanI,KAAM/D,GAAKkM,cAC7BnI,GAAIY,cAAWZ,KAAMA,GAAIY;AAE7B,gBACIwH,KADM,IAAIlE,EAAalE,IAAKlK,KAAKiE,OAAOzE,MAAMQ,KAAKiE,OAAOkC,IAAAA,EAC/CoM,SAAAA;AAIf,mBAHAvS,KAAKiE,OAAOsF,MAAM+I,GAAK,CAAA,GACvBtS,KAAKiE,OAAOX,MAAMgP,GAAK,CAAA,GAEhBtS,KAAKiE;UACd;UAEAgO,SAASvO,IAAAA;AACPA,YAAAA,GAAKR,EAAAA,IAAAA;AACL,gBAAI6M,KAASJ,EAAUjM,EAAAA;AACvB,qBAAS8O,MAASzC;AAChB,kBAAIyC,OAAUjD;AACR7L,gBAAAA,GAAKhB,SACPgB,GAAKI,KAAKF,CAAAA,OAAAA;AACHA,kBAAAA,GAAMV,EAAAA,KAAUlD,KAAKiS,SAASrO,EAAAA;gBAAK,CAAA;mBAGvC;AACL,oBAAIqM,KAAWjQ,KAAKkS,UAAUM,EAAAA;AAC9B,oBAAIvC,MACEjQ,KAAKoS,UAAUnC,IAAUvM,GAAKkE,QAAAA,CAAAA;AAAY;cAElD;UAEJ;UAEAwK,UAAUnC,IAAUvM,IAAAA;AAClB,qBAAK,CAAKqF,IAAQ0J,EAAAA,KAAYxC,IAAU;AAEtC,kBAAIyC;AADJ1S,mBAAKiE,OAAO0O,aAAa5J;AAEzB,kBAAA;AACE2J,gBAAAA,KAAUD,GAAQ/O,IAAM1D,KAAK4Q,OAAAA;cAG/B,SAFS3Q,IAAAA;AACP,sBAAMD,KAAK4S,YAAY3S,IAAGyD,GAAKjB,OAAAA;cACjC;AACA,kBAAkB,WAAdiB,GAAKpB,QAAiC,eAAdoB,GAAKpB,QAAAA,CAAwBoB,GAAKG;AAC5D,uBAAA;AAEF,kBAAI2L,EAAUkD,EAAAA;AACZ,sBAAM1S,KAAK6R,cAAAA;YAEf;UACF;UAEAC,UAAU/I,IAAAA;AACR/I,iBAAKiE,OAAO0O,aAAa5J;AACzB,gBAAA;AACE,kBAAsB,YAAA,OAAXA,MAAuBA,GAAO+F,MAAM;AAC7C,oBAA8B,eAA1B9O,KAAKiE,OAAOzE,KAAK8C,MAAqB;AACxC,sBAAIuQ,KAAQ7S,KAAKiE,OAAOzE,KAAKkD,MAAMY,IAAI9D,CAAAA,OACrCuJ,GAAO+F,KAAKtP,IAAMQ,KAAK4Q,OAAAA,CAAAA;AAGzB,yBAAIpB,EAAUqD,GAAM,CAAA,CAAA,IACXpB,QAAQqB,IAAID,EAAAA,IAGdA;gBACT;AAEA,uBAAO9J,GAAO+F,KAAK9O,KAAKiE,OAAOzE,MAAMQ,KAAK4Q,OAAAA;cAC5C;AAAO,kBAAsB,cAAA,OAAX7H;AAChB,uBAAOA,GAAO/I,KAAKiE,OAAOzE,MAAMQ,KAAKiE,MAAAA;YAIzC,SAFSoJ,IAAAA;AACP,oBAAMrN,KAAK4S,YAAYvF,EAAAA;YACzB;UACF;UAEAwE,gBAAAA;AACE,kBAAM,IAAI3K,MAAM,sDAAA;UAClB;UAEA0L,YAAYvF,IAAO3J,IAAAA;AACjB,gBAAIqF,KAAS/I,KAAKiE,OAAO0O;AACzB,gBAAA;AACMjP,cAAAA,MAAMA,GAAKa,WAAW8I,EAAAA,GAC1BrN,KAAKqN,QAAQA,IACM,qBAAfA,GAAMtI,QAA8BsI,GAAMtE,SAGnCA,GAAOgK,kBAFhB1F,GAAMtE,SAASA,GAAO6F,eACtBvB,GAAMlE,WAAAA;YA4BV,SAJS6J,IAAAA;AAGHC,yBAAWA,QAAQ5F,SAAO4F,QAAQ5F,MAAM2F,EAAAA;YAC9C;AACA,mBAAO3F;UACT;UAEAgE,MAAAA,WAAAA;AACErR,iBAAK+I,SAAS;AACd,qBAASxF,KAAI,GAAGA,KAAIvD,KAAK6Q,QAAQxM,QAAQd,MAAK;AAC5C,kBAAIwF,KAAS/I,KAAK6Q,QAAQtN,EAAAA,GACtBmP,KAAU1S,KAAK8R,UAAU/I,EAAAA;AAC7B,kBAAIyG,EAAUkD,EAAAA;AACZ,oBAAA;AAAA,wBACQA;gBAGR,SAFSrF,IAAAA;AACP,wBAAMrN,KAAK4S,YAAYvF,EAAAA;gBACzB;YAEJ;AAGA,gBADArN,KAAK+R,gBAAAA,GACD/R,KAAKgS,aAAa;AACpB,kBAAIxS,KAAOQ,KAAKiE,OAAOzE;AACvB,qBAAA,CAAQA,GAAK0D,EAAAA,KAAU;AACrB1D,gBAAAA,GAAK0D,EAAAA,IAAAA;AACL,oBAAIgQ,KAAQ,CAACpD,EAAQtQ,EAAAA,CAAAA;AACrB,uBAAO0T,GAAM7O,SAAS,KAAG;AACvB,sBAAIqO,KAAU1S,KAAKmT,UAAUD,EAAAA;AAC7B,sBAAI1D,EAAUkD,EAAAA;AACZ,wBAAA;AAAA,4BACQA;oBAIR,SAHSzS,IAAAA;AACP,0BAAIyD,KAAOwP,GAAMA,GAAM7O,SAAS,CAAA,EAAGX;AACnC,4BAAM1D,KAAK4S,YAAY3S,IAAGyD,EAAAA;oBAC5B;gBAEJ;cACF;AAEA,kBAAI1D,KAAKkS,UAAU7C;AACjB,yBAAK,CAAKtG,IAAQ0J,EAAAA,KAAYzS,KAAKkS,UAAU7C,UAAU;AACrDrP,uBAAKiE,OAAO0O,aAAa5J;AACzB,sBAAA;AACE,wBAAkB,eAAdvJ,GAAK8C,MAAqB;AAC5B,0BAAIuQ,KAAQrT,GAAKkD,MAAMY,IAAI6O,CAAAA,OACzBM,GAAQN,IAASnS,KAAK4Q,OAAAA,CAAAA;AAAAA,4BAGlBa,QAAQqB,IAAID,EAAAA;oBACpB;AAAA,4BACQJ,GAAQjT,IAAMQ,KAAK4Q,OAAAA;kBAI7B,SAFS3Q,IAAAA;AACP,0BAAMD,KAAK4S,YAAY3S,EAAAA;kBACzB;gBACF;YAEJ;AAGA,mBADAD,KAAKuQ,YAAAA,MACEvQ,KAAK8K,UAAAA;UACd;UAEAiH,kBAAAA;AACE/R,iBAAKkS,YAAY,CAAC;AAClB,gBAAItM,KAAM,CAACmD,IAAQzG,IAAMuF,OAAAA;AAClB7H,mBAAKkS,UAAU5P,EAAAA,MAAOtC,KAAKkS,UAAU5P,EAAAA,IAAQ,CAAA,IAClDtC,KAAKkS,UAAU5P,EAAAA,EAAMqB,KAAK,CAACoF,IAAQlB,EAAAA,CAAAA;YAAG;AAExC,qBAASkB,MAAU/I,KAAK6Q;AACtB,kBAAsB,YAAA,OAAX9H;AACT,yBAASyJ,MAASzJ,IAAQ;AACxB,sBAAA,CAAK4F,EAAa6D,EAAAA,KAAU,SAAS7N,KAAK6N,EAAAA;AACxC,0BAAM,IAAItL,MACR,iBAAiBsL,EAAAA,OAAYzJ,GAAO6F,aAAAA,4BACR5O,KAAKqQ,UAAU+C,OAAAA,QAAAA;AAG/C,sBAAA,CAAK9D,EAAakD,EAAAA;AAChB,wBAA6B,YAAA,OAAlBzJ,GAAOyJ,EAAAA;AAChB,+BAASa,MAAUtK,GAAOyJ,EAAAA;AAEtB5M,wBAAAA,GAAImD,IADS,QAAXsK,KACUb,KAIVA,KAAQ,MAAMa,GAAOxD,YAAAA,GAJJ9G,GAAOyJ,EAAAA,EAAOa,EAAAA,CAAAA;;AASH,oCAAA,OAAlBtK,GAAOyJ,EAAAA,KACvB5M,GAAImD,IAAQyJ,IAAOzJ,GAAOyJ,EAAAA,CAAAA;gBAGhC;AAGJxS,iBAAKgS,cAAc7J,OAAOmL,KAAKtT,KAAKkS,SAAAA,EAAW7N,SAAS;UAC1D;UAEA8O,UAAUD,IAAAA;AACR,gBAAIK,KAAQL,GAAMA,GAAM7O,SAAS,CAAA,GAAA,EAC7B,MAAEX,IAAI,UAAEuM,GAAAA,IAAasD;AAEzB,gBAAkB,WAAd7P,GAAKpB,QAAiC,eAAdoB,GAAKpB,QAAAA,CAAwBoB,GAAKG;AAE5D,qBAAA,KADAqP,GAAMM,IAAAA;AAIR,gBAAIvD,GAAS5L,SAAS,KAAKkP,GAAMrD,eAAeD,GAAS5L,QAAQ;AAC/D,kBAAA,CAAK0E,IAAQ0J,EAAAA,IAAWxC,GAASsD,GAAMrD,YAAAA;AACvCqD,cAAAA,GAAMrD,gBAAgB,GAClBqD,GAAMrD,iBAAiBD,GAAS5L,WAClCkP,GAAMtD,WAAW,CAAA,GACjBsD,GAAMrD,eAAe,IAEvBlQ,KAAKiE,OAAO0O,aAAa5J;AACzB,kBAAA;AACE,uBAAO0J,GAAQ/O,GAAKkE,QAAAA,GAAW5H,KAAK4Q,OAAAA;cAGtC,SAFS3Q,IAAAA;AACP,sBAAMD,KAAK4S,YAAY3S,IAAGyD,EAAAA;cAC5B;YACF;AAEA,gBAAuB,MAAnB6P,GAAMrP,UAAgB;AACxB,kBACIN,IADAM,KAAWqP,GAAMrP;AAErB,qBAAQN,KAAQF,GAAKhB,MAAMgB,GAAKU,QAAQF,EAAAA,CAAAA;AAEtC,oBADAR,GAAKU,QAAQF,EAAAA,KAAa,GAAA,CACrBN,GAAMV,EAAAA;AAGT,yBAFAU,GAAMV,EAAAA,IAAAA,MAAW,KACjBgQ,GAAMvP,KAAKmM,EAAQlM,EAAAA,CAAAA;AAIvB2P,cAAAA,GAAMrP,WAAW,GAAA,OACVR,GAAKU,QAAQF,EAAAA;YACtB;AAEA,gBAAI6L,KAASwD,GAAMxD;AACnB,mBAAOwD,GAAMvD,aAAaD,GAAO1L,UAAQ;AACvC,kBAAImO,KAAQzC,GAAOwD,GAAMvD,UAAAA;AAEzB,kBADAuD,GAAMvD,cAAc,GAChBwC,OAAUjD;AAKZ,uBAAA,MAJI7L,GAAKhB,SAASgB,GAAKhB,MAAM2B,WAC3BX,GAAKR,EAAAA,IAAAA,MACLqQ,GAAMrP,WAAWR,GAAKS,YAAAA;AAGnB,kBAAInE,KAAKkS,UAAUM,EAAAA;AAExB,uBAAA,MADAe,GAAMtD,WAAWjQ,KAAKkS,UAAUM,EAAAA;YAGpC;AACAU,YAAAA,GAAMM,IAAAA;UACR;QAAA;AAGF9I,UAAW+I,kBAAkBxL,CAAAA,OAAAA;AAC3BmI,cAAUnI;QAAAA,GAGZtI,GAAOD,UAAUgL,GACjBA,EAAW9H,UAAU8H,GAErBS,EAAKJ,mBAAmBL,CAAAA,GACxBE,EAASG,mBAAmBL,CAAAA;MAAAA,GAAAA,KAAAA,CAAAA,OAAAA;AAAAA;ACniB5B,YAAIgJ,KAAO,EACT/J,MAAMgK,IAAQC,IAAY1O,IAAAA;AACxB,cAAI2O,KAAQ,CAAA,GACRC,IAAU,IACVnK,IAAAA,OAEAoK,IAAO,GACPC,IAAAA,OACAC,IAAAA;AAEJ,mBAASC,MAAUP;AACbM,gBACFA,IAAAA,QACoB,SAAXC,KACTD,IAAAA,OACSD,IACLE,OAAWF,MACbA,IAAAA,SAEkB,QAAXE,MAA6B,QAAXA,KAC3BF,IAAQE,KACY,QAAXA,KACTH,KAAQ,IACY,QAAXG,KACLH,IAAO,MAAGA,KAAQ,KACJ,MAATA,KACLH,GAAWtN,SAAS4N,EAAAA,MAASvK,IAAAA,OAG/BA,KACc,OAAZmK,KAAgBD,GAAMlQ,KAAKmQ,EAAQK,KAAAA,CAAAA,GACvCL,IAAU,IACVnK,IAAAA,SAEAmK,KAAWI;AAKf,kBADIhP,MAAoB,OAAZ4O,MAAgBD,GAAMlQ,KAAKmQ,EAAQK,KAAAA,CAAAA,GACxCN;QACT,GAEAO,OAAMT,CAAAA,OAEGD,GAAK/J,MAAMgK,IADL,CAAC,KAAK,MAAM,GAAA,CAAA,GAI3BU,OAAMV,CAAAA,OACGD,GAAK/J,MAAMgK,IAAQ,CAAC,GAAA,GAAA,IAAM,EAAA;AAIrChU,QAAAA,GAAOD,UAAUgU,IACjBA,GAAK9Q,UAAU8Q;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACrDf,YAAA,EAAI,mBAAE7H,IAAiB,oBAAEC,EAAAA,IAAuB7J,GAAQ,GAAA,GAAA,EACpD,SAAEqS,GAAO,SAAErI,GAAO,UAAEsI,GAAQ,KAAEC,EAAAA,IAAQvS,GAAQ,GAAA,GAAA,EAC9C,eAAE+J,EAAAA,IAAkB/J,GAAQ,GAAA,GAE5BiJ,IAAQjJ,GAAQ,GAAA,GAEhBqK,IAAqBC,QAAQV,MAAqBC,CAAAA,GAClDU,IAAgBD,QAAQ+H,KAAWrI,KAAWsI,KAAYC,CAAAA;AAiU9D7U,QAAAA,GAAOD,UA/TP,MAAA;UACEyC,YAAY2I,IAAWtL,IAAM2G,IAAMsO,IAAAA;AACjCzU,iBAAK8K,YAAYA,IACjB9K,KAAK0U,UAAUvO,GAAK7C,OAAO,CAAC,GAC5BtD,KAAKR,OAAOA,IACZQ,KAAKmG,OAAOA,IACZnG,KAAKuJ,MAAMkL;UACb;UAEAE,QAAAA;AACE,mBAAA,WAAW3U,KAAKmG,KAAK7C,MAAAA,CAAAA,CACVtD,KAAKmG,KAAK7C,MAEdtD,KAAK4U,SAAAA,EAAWvQ,SAAS;UAClC;UAEAuQ,WAAAA;AACE,gBAAA,CAAK5U,KAAK6U;AAER,kBADA7U,KAAK6U,eAAe,CAAA,GAChB7U,KAAKR;AACPQ,qBAAKR,KAAK8E,KAAKZ,CAAAA,OAAAA;AACb,sBAAIA,GAAKF,UAAUE,GAAKF,OAAOiI,MAAMnI,KAAK;AACxC,wBAAIA,KAAMI,GAAKF,OAAOiI,MAAMnI;AACvBtD,yBAAK6U,aAAavO,SAAShD,EAAAA,KAC9BtD,KAAK6U,aAAalR,KAAKL,EAAAA;kBAE3B;gBAAA,CAAA;mBAEG;AACL,oBAAImI,KAAQ,IAAIP,EAAMlL,KAAKuJ,KAAKvJ,KAAKmG,IAAAA;AACjCsF,gBAAAA,GAAMnI,OAAKtD,KAAK6U,aAAalR,KAAK8H,GAAMnI,GAAAA;cAC9C;AAGF,mBAAOtD,KAAK6U;UACd;UAEAC,WAAAA;AACE,gBAAA,WAAW9U,KAAK0U,QAAQlE;AACtB,qBAAOxQ,KAAK0U,QAAQlE;AAGtB,gBAAIuE,KAAa/U,KAAK0U,QAAQK;AAC9B,oBAAA,WAAWA,MAAAA,SAA8BA,QAAAA,CAIrC/U,KAAK4U,SAAAA,EAAWvQ,UACXrE,KAAK4U,SAAAA,EAAWhO,KAAKrD,CAAAA,OAAKA,GAAEiN,MAAAA;UAGvC;UAEAwE,mBAAAA;AACE,mBAAA,WAAWhV,KAAK0U,QAAQO,iBACfjV,KAAK0U,QAAQO,iBAAAA,CAElBjV,KAAK4U,SAAAA,EAAWvQ,UACXrE,KAAK4U,SAAAA,EAAWhO,KAAKrD,CAAAA,OAAKA,GAAE2R,YAAAA,CAAAA;UAGvC;UAEAC,kBAAAA;AACE,gBAAA,UAAInV,KAAK0U,QAAQK;AAEjB,kBAAI/U,KAAKR,MAAM;AACb,oBAAIkE;AACJ,yBAASH,KAAIvD,KAAKR,KAAKkD,MAAM2B,SAAS,GAAGd,MAAK,GAAGA;AAC/CG,kBAAAA,KAAO1D,KAAKR,KAAKkD,MAAMa,EAAAA,GACL,cAAdG,GAAKpB,QACwC,MAA7CoB,GAAKyD,KAAKN,QAAQ,qBAAA,KACpB7G,KAAKR,KAAKuG,YAAYxC,EAAAA;cAG5B;AAAWvD,qBAAKuJ,QACdvJ,KAAKuJ,MAAMvJ,KAAKuJ,IAAI9C,QAAQ,6BAA6B,EAAA;UAE7D;UAEA2O,oBAAAA;AACE,gBAAIC,KAAU,CAAC;AACf,gBAAIrV,KAAKR;AACPQ,mBAAKR,KAAK8E,KAAKZ,CAAAA,OAAAA;AACb,oBAAIA,GAAKF,QAAQ;AACf,sBAAIkJ,KAAOhJ,GAAKF,OAAOiI,MAAMiB;AACzBA,kBAAAA,MAAAA,CAAS2I,GAAQ3I,EAAAA,MACnB2I,GAAQ3I,EAAAA,IAAAA,MACR1M,KAAKsD,IAAIgS,iBACPtV,KAAKuV,MAAMvV,KAAKwV,KAAK9I,EAAAA,CAAAA,GACrBhJ,GAAKF,OAAOiI,MAAMlC,GAAAA;gBAGxB;cAAA,CAAA;qBAEOvJ,KAAKuJ,KAAK;AACnB,kBAAImD,KAAO1M,KAAKmG,KAAKuG,OACjB1M,KAAKuV,MAAMvV,KAAKwV,KAAKxV,KAAKmG,KAAKuG,IAAAA,CAAAA,IAC/B;AACJ1M,mBAAKsD,IAAIgS,iBAAiB5I,IAAM1M,KAAKuJ,GAAAA;YACvC;UACF;UAEAkM,gBAAAA;AACE,qBAAShF,MAAQzQ,KAAK4U,SAAAA,GAAY;AAChC,kBAEItR,IAFAoJ,KAAO1M,KAAKuV,MAAMvV,KAAKwV,KAAK/E,GAAK3H,IAAAA,CAAAA,GACjCtJ,KAAOiR,GAAKjR,QAAQ8U,EAAQ7D,GAAK3H,IAAAA;AAAAA,wBAGjC9I,KAAK0U,QAAQO,kBACf3R,KAAM,IAAIuI,GAAkB4E,GAAKtJ,IAAAA,GAC7B7D,GAAI2R,mBACN3R,GAAI2R,iBAAiB3R,GAAI2R,eAAe3R,IAAI,MAAM,IAAA,MAGpDA,KAAMmN,GAAK9D,SAAAA,GAGb3M,KAAKsD,IAAIoS,eAAepS,IAAKoJ,IAAM1M,KAAKuV,MAAMvV,KAAKwV,KAAKhW,EAAAA,CAAAA,CAAAA;YAC1D;UACF;UAEAmW,eAAAA;AACE,mBAAA,CAAA,CAAI3V,KAAK8U,SAAAA,MAAAA,WAGE9U,KAAK0U,QAAQK,aACf/U,KAAK0U,QAAQK,aAAAA,CAElB/U,KAAK4U,SAAAA,EAAWvQ,UACXrE,KAAK4U,SAAAA,EAAWhO,KAAKrD,CAAAA,OAAKA,GAAEwR,UAAAA;UAGvC;UAEAa,SAAS1L,IAAAA;AACP,mBAAI2L,SACKA,OAAOnJ,KAAKxC,EAAAA,EAAKK,SAAS,QAAA,IAE1BxK,OAAO+V,KAAKC,SAASC,mBAAmB9L,EAAAA,CAAAA,CAAAA;UAEnD;UAEA+L,gBAAAA;AACE,gBAAIlF;AAGFA,YAAAA,KADE/Q,KAAK8U,SAAAA,IAEL,kCAAkC9U,KAAK4V,SAAS5V,KAAKsD,IAAIiH,SAAAA,CAAAA,IACf,YAAA,OAA5BvK,KAAK0U,QAAQK,aACnB/U,KAAK0U,QAAQK,aACqB,cAAA,OAA5B/U,KAAK0U,QAAQK,aACnB/U,KAAK0U,QAAQK,WAAW/U,KAAKmG,KAAKsH,IAAIzN,KAAKR,IAAAA,IAE3CQ,KAAKkW,WAAAA,IAAe;AAEhC,gBAAIC,KAAM;AACNnW,iBAAKuJ,IAAIjD,SAAS,MAAA,MAAS6P,KAAM,SAErCnW,KAAKuJ,OAAO4M,KAAM,0BAA0BpF,KAAU;UACxD;UAEAmF,aAAAA;AACE,mBAAIlW,KAAKmG,KAAKsH,KACLzN,KAAKwV,KAAKxV,KAAKmG,KAAKsH,EAAAA,IAClBzN,KAAKmG,KAAKuG,OACZ1M,KAAKwV,KAAKxV,KAAKmG,KAAKuG,IAAAA,IAEpB;UAEX;UAEA0J,cAAAA;AACE,gBAAIpW,KAAKR;AACPQ,mBAAKqW,eAAAA;qBAC+B,MAA3BrW,KAAK4U,SAAAA,EAAWvQ,QAAc;AACvC,kBAAIoM,KAAOzQ,KAAK4U,SAAAA,EAAW,CAAA,EAAGjI,SAAAA;AAC9B8D,cAAAA,GAAK3H,OAAO9I,KAAKkW,WAAAA,GACjBlW,KAAKsD,MAAMwI,EAAmBwK,cAAc7F,EAAAA;YAC9C;AACEzQ,mBAAKsD,MAAM,IAAIwI,EAAmB,EAAEhD,MAAM9I,KAAKkW,WAAAA,EAAAA,CAAAA,GAC/ClW,KAAKsD,IAAIiT,WAAW,EAClB/S,QAAQxD,KAAKmG,KAAKuG,OACd1M,KAAKuV,MAAMvV,KAAKwV,KAAKxV,KAAKmG,KAAKuG,IAAAA,CAAAA,IAC/B,eACJ8J,WAAW,EAAE5N,MAAM,GAAGC,QAAQ,EAAA,GAC9B4N,UAAU,EAAE7N,MAAM,GAAGC,QAAQ,EAAA,EAAA,CAAA;AAQjC,mBAJI7I,KAAKgV,iBAAAA,KAAoBhV,KAAKoV,kBAAAA,GAC9BpV,KAAKR,QAAQQ,KAAK4U,SAAAA,EAAWvQ,SAAS,KAAGrE,KAAKyV,cAAAA,GAC9CzV,KAAK2V,aAAAA,KAAgB3V,KAAKiW,cAAAA,GAE1BjW,KAAK8U,SAAAA,IACA,CAAC9U,KAAKuJ,GAAAA,IAEN,CAACvJ,KAAKuJ,KAAKvJ,KAAKsD,GAAAA;UAE3B;UAEAkS,KAAK1M,IAAAA;AACH,gBAA0B,MAAtBA,GAAKjC,QAAQ,GAAA;AAAY,qBAAOiC;AACpC,gBAAI,YAAYnE,KAAKmE,EAAAA;AAAO,qBAAOA;AACnC,gBAAI9I,KAAK0U,QAAQgC;AAAU,qBAAO5N;AAElC,gBAAI4D,KAAO1M,KAAKmG,KAAKsH,KAAK6G,EAAQtU,KAAKmG,KAAKsH,EAAAA,IAAM;AAOlD,mBALuC,YAAA,OAA5BzN,KAAK0U,QAAQK,eACtBrI,KAAO4H,EAAQrI,EAAQS,IAAM1M,KAAK0U,QAAQK,UAAAA,CAAAA,IAG5CjM,KAAOyL,EAAS7H,IAAM5D,EAAAA;UAExB;UAEAyM,MAAMC,IAAAA;AAIJ,mBAHY,SAARhB,MACFgB,KAAOA,GAAK/O,QAAQ,OAAO,GAAA,IAEtBkQ,UAAUnB,EAAAA,EAAM/O,QAAQ,SAASuP,kBAAAA;UAC1C;UAEAY,WAAWlT,IAAAA;AACT,gBAAI1D,KAAK0U,QAAQhI;AACf,qBAAO1M,KAAKuV,MAAMvV,KAAK0U,QAAQhI,IAAAA;AAC1B,gBAAI1M,KAAK0U,QAAQgC,UAAU;AAChC,kBAAI1K;AACF,uBAAOA,EAActI,GAAKF,OAAOiI,MAAMiB,IAAAA,EAAMnC,SAAAA;AAE7C,oBAAM,IAAIrD,MACR,8DAAA;YAGN;AACE,mBAAOlH,KAAKuV,MAAMvV,KAAKwV,KAAK9R,GAAKF,OAAOiI,MAAMiB,IAAAA,CAAAA;UAElD;UAEA2J,iBAAAA;AACErW,iBAAKuJ,MAAM,IACXvJ,KAAKsD,MAAM,IAAIwI,EAAmB,EAAEhD,MAAM9I,KAAKkW,WAAAA,EAAAA,CAAAA;AAE/C,gBAUIxM,IAAOxE,IAVP0D,KAAO,GACPC,KAAS,GAETgO,KAAW,eACXC,KAAU,EACZtT,QAAQ,IACRgT,WAAW,EAAE5N,MAAM,GAAGC,QAAQ,EAAA,GAC9B4N,UAAU,EAAE7N,MAAM,GAAGC,QAAQ,EAAA,EAAA;AAI/B7I,iBAAK8K,UAAU9K,KAAKR,MAAM,CAAC0K,IAAKxG,IAAMpB,OAAAA;AA4BpC,kBA3BAtC,KAAKuJ,OAAOW,IAERxG,MAAiB,UAATpB,OACVwU,GAAQN,UAAU5N,OAAOA,IACzBkO,GAAQN,UAAU3N,SAASA,KAAS,GAChCnF,GAAKF,UAAUE,GAAKF,OAAOoG,SAC7BkN,GAAQtT,SAASxD,KAAK4W,WAAWlT,EAAAA,GACjCoT,GAAQL,SAAS7N,OAAOlF,GAAKF,OAAOoG,MAAMhB,MAC1CkO,GAAQL,SAAS5N,SAASnF,GAAKF,OAAOoG,MAAMf,SAAS,GACrD7I,KAAKsD,IAAIiT,WAAWO,EAAAA,MAEpBA,GAAQtT,SAASqT,IACjBC,GAAQL,SAAS7N,OAAO,GACxBkO,GAAQL,SAAS5N,SAAS,GAC1B7I,KAAKsD,IAAIiT,WAAWO,EAAAA,KAIxBpN,KAAQQ,GAAI6M,MAAM,KAAA,GACdrN,MACFd,MAAQc,GAAMrF,QACda,KAAOgF,GAAI8M,YAAY,IAAA,GACvBnO,KAASqB,GAAI7F,SAASa,MAEtB2D,MAAUqB,GAAI7F,QAGZX,MAAiB,YAATpB,IAAkB;AAC5B,oBAAI2U,KAAIvT,GAAKG,UAAU,EAAEwD,MAAM,CAAC,EAAA;AAAA,iBACd,WAAd3D,GAAKpB,QAAmBoB,OAASuT,GAAE/R,QAAQ+R,GAAE5P,KAAK6P,eAChDxT,GAAKF,UAAUE,GAAKF,OAAOuG,OAC7B+M,GAAQtT,SAASxD,KAAK4W,WAAWlT,EAAAA,GACjCoT,GAAQL,SAAS7N,OAAOlF,GAAKF,OAAOuG,IAAInB,MACxCkO,GAAQL,SAAS5N,SAASnF,GAAKF,OAAOuG,IAAIlB,SAAS,GACnDiO,GAAQN,UAAU5N,OAAOA,IACzBkO,GAAQN,UAAU3N,SAASA,KAAS,GACpC7I,KAAKsD,IAAIiT,WAAWO,EAAAA,MAEpBA,GAAQtT,SAASqT,IACjBC,GAAQL,SAAS7N,OAAO,GACxBkO,GAAQL,SAAS5N,SAAS,GAC1BiO,GAAQN,UAAU5N,OAAOA,IACzBkO,GAAQN,UAAU3N,SAASA,KAAS,GACpC7I,KAAKsD,IAAIiT,WAAWO,EAAAA;cAG1B;YAAA,CAAA;UAEJ;UAEAvE,WAAAA;AAEE,gBADAvS,KAAKmV,gBAAAA,GACD3I,KAAiBF,KAAsBtM,KAAK2U,MAAAA;AAC9C,qBAAO3U,KAAKoW,YAAAA;AACP;AACL,kBAAInS,KAAS;AAIb,qBAHAjE,KAAK8K,UAAU9K,KAAKR,MAAM+D,CAAAA,OAAAA;AACxBU,gBAAAA,MAAUV;cAAAA,CAAAA,GAEL,CAACU,EAAAA;YACV;UACF;QAAA;MAAA,GAAA,KAAA,CAAAhE,IAAAsI,IAAAtG,OAAA;AAAA;ACrUF,YAAImM,KAAenM,GAAQ,GAAA,GACvB6I,IAAY7I,GAAQ,EAAA,GAEpBe,KADWf,GAAQ,GAAA,GACXA,GAAQ,GAAA;AACpB,cAAMoM,IAASpM,GAAQ,GAAA;QAEvB,MAAMkV,EAAAA;UACJhV,YAAYkO,IAAW9G,IAAKpD,IAAAA;AAQ1B,gBAAI3G;AAPJ+J,YAAAA,KAAMA,GAAIgB,SAAAA,GACVvK,KAAKsQ,cAAAA,OAELtQ,KAAKoX,aAAa/G,IAClBrQ,KAAKqX,OAAO9N,IACZvJ,KAAKsX,QAAQnR,IACbnG,KAAKuX,OAAAA;AAGL,gBAAIrN,KAAMY;AACV9K,iBAAKiE,SAAS,IAAIoK,EAAOrO,KAAKoX,YAAY5X,IAAMQ,KAAKsX,KAAAA,GACrDtX,KAAKiE,OAAOsF,MAAMA;AAElB,gBAAIiO,IAAOxX;AACXmI,mBAAOsP,eAAezX,KAAKiE,QAAQ,QAAQ,EACzCwD,KAAG,MACM+P,EAAKhY,KAAAA,CAAAA;AAIhB,gBAAI8D,IAAM,IAAI8K,GAAalE,IAAK1K,IAAMQ,KAAKsX,OAAO/N,EAAAA;AAClD,gBAAIjG,EAAIqR,MAAAA,GAAS;AACf,kBAAA,CAAK+C,IAAcC,EAAAA,IAAgBrU,EAAIiP,SAAAA;AACnCmF,cAAAA,OACF1X,KAAKiE,OAAOsF,MAAMmO,KAEhBC,OACF3X,KAAKiE,OAAOX,MAAMqU;YAEtB;UACF;UAEY7G,KAAPzE,OAAOyE,WAAAA,IAAAA;AACV,mBAAO;UACT;UAEIT,IAAAA,YAAAA;AACF,mBAAOrQ,KAAKiE,OAAOoM;UACrB;UAEIlK,IAAAA,OAAAA;AACF,mBAAOnG,KAAKiE,OAAOkC;UACrB;UAEIoD,IAAAA,MAAAA;AACF,mBAAOvJ,KAAKiE,OAAOsF;UACrB;UAEIwH,IAAAA,UAAAA;AACF,mBAAO/Q,KAAKiE,OAAOsF;UACrB;UAEIjG,IAAAA,MAAAA;AACF,mBAAOtD,KAAKiE,OAAOX;UACrB;UAEI9D,IAAAA,OAAAA;AACF,gBAAIQ,KAAK4X;AACP,qBAAO5X,KAAK4X;AAGd,gBAAIpY,IACAkR,KAAS1N;AAEb,gBAAA;AACExD,cAAAA,KAAOkR,GAAO1Q,KAAKqX,MAAMrX,KAAKsX,KAAAA;YAGhC,SAFSjK,IAAAA;AACPrN,mBAAKqN,QAAQA;YACf;AAEA,gBAAIrN,KAAKqN;AACP,oBAAMrN,KAAKqN;AAGX,mBADArN,KAAK4X,QAAQpY,IACNA;UAEX;UAEIyR,IAAAA,WAAAA;AACF,mBAAO,CAAA;UACT;UAEAC,WAAAA;AACE,mBAAO,CAAA;UACT;UAEA3G,WAAAA;AACE,mBAAOvK,KAAKqX;UACd;UAEA3H,KAAKyB,IAAaC,IAAAA;AAWhB,mBAAOpR,KAAKqR,MAAAA,EAAQ3B,KAAKyB,IAAaC,EAAAA;UACxC;UAEAE,MAAMF,IAAAA;AACJ,mBAAOpR,KAAKqR,MAAAA,EAAQC,MAAMF,EAAAA;UAC5B;UAEAG,QAAQC,IAAAA;AACN,mBAAOxR,KAAKqR,MAAAA,EAAQ3B,KAAK8B,IAAWA,EAAAA;UACtC;UAEAH,QAAAA;AACE,mBAAIrR,KAAKqN,QAAcoE,QAAQC,OAAO1R,KAAKqN,KAAAA,IACpCoE,QAAQxF,QAAQjM,KAAKiE,MAAAA;UAC9B;UAEA+M,OAAAA;AACE,gBAAIhR,KAAKqN;AAAO,oBAAMrN,KAAKqN;AAC3B,mBAAOrN,KAAKiE;UACd;QAAA;AAGFtE,QAAAA,GAAOD,UAAUyX,GACjBA,EAAavU,UAAUuU;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACpIvB,YAAA,EAAI,SAAEjU,IAAO,IAAEC,EAAAA,IAAOlB,GAAQ,GAAA,GAC1ByG,IAAiBzG,GAAQ,GAAA,GACzB4V,IAAc5V,GAAQ,EAAA,GACtB6I,IAAY7I,GAAQ,EAAA;AAExB,iBAAS6V,EAAUrI,IAAK5L,IAAAA;AACtB,cAAIkU,KAAS,IAAItI,GAAItN;AAErB,mBAASoB,MAAKkM,IAAK;AACjB,gBAAA,CAAKtH,OAAOE,UAAU2P,eAAeC,KAAKxI,IAAKlM,EAAAA;AAE7C;AAEF,gBAAU,iBAANA;AAAoB;AACxB,gBAAIiD,KAAQiJ,GAAIlM,EAAAA,GACZjB,KAAAA,OAAckE;AAER,yBAANjD,MAA2B,aAATjB,KAChBuB,OAAQkU,GAAOxU,EAAAA,IAAKM,MACT,aAANN,KACTwU,GAAOxU,EAAAA,IAAKiD,KACHO,MAAMC,QAAQR,EAAAA,IACvBuR,GAAOxU,EAAAA,IAAKiD,GAAMlD,IAAI4U,CAAAA,OAAKJ,EAAUI,IAAGH,EAAAA,CAAAA,KAE3B,aAATzV,MAA+B,SAAVkE,OAAgBA,KAAQsR,EAAUtR,EAAAA,IAC3DuR,GAAOxU,EAAAA,IAAKiD;UAEhB;AAEA,iBAAOuR;QACT;QAEA,MAAMjV,EAAAA;UACJX,YAAYC,KAAW,CAAC,GAAA;AACtBpC,iBAAKqH,OAAO,CAAC,GACbrH,KAAKkD,EAAAA,IAAAA,OACLlD,KAAKmD,CAAAA,IAAAA;AAEL,qBAAS4B,MAAQ3C;AACf,kBAAa,YAAT2C,IAAkB;AACpB/E,qBAAK0C,QAAQ,CAAA;AACb,yBAASgB,MAAQtB,GAAS2C,EAAAA;AACE,gCAAA,OAAfrB,GAAKyU,QACdnY,KAAKuC,OAAOmB,GAAKyU,MAAAA,CAAAA,IAEjBnY,KAAKuC,OAAOmB,EAAAA;cAGlB;AACE1D,qBAAK+E,EAAAA,IAAQ3C,GAAS2C,EAAAA;UAG5B;UAEAsI,MAAM1E,IAASxC,KAAO,CAAC,GAAA;AACrB,gBAAInG,KAAKwD,QAAQ;AACf,kBAAA,EAAI,OAAEoG,IAAK,KAAEG,GAAAA,IAAQ/J,KAAKoY,QAAQjS,EAAAA;AAClC,qBAAOnG,KAAKwD,OAAOiI,MAAM4B,MACvB1E,IACA,EAAEC,MAAMgB,GAAMhB,MAAMC,QAAQe,GAAMf,OAAAA,GAClC,EAAED,MAAMmB,GAAInB,MAAMC,QAAQkB,GAAIlB,OAAAA,GAC9B1C,EAAAA;YAEJ;AACA,mBAAO,IAAIuC,EAAeC,EAAAA;UAC5B;UAEA0P,KAAKpU,IAAQkD,IAAMhB,IAAAA;AACjB,gBAAImM,KAAO,EAAE5O,MAAM1D,KAAAA;AACnB,qBAASuD,MAAK4C;AAAMmM,cAAAA,GAAK/O,EAAAA,IAAK4C,GAAK5C,EAAAA;AACnC,mBAAOU,GAAOoU,KAAKlR,IAAMmL,EAAAA;UAC3B;UAEAgG,SAAAA;AAKE,mBAJItY,KAAK6D,UACP7D,KAAK6D,OAAOkC,YAAY/F,IAAAA,GAE1BA,KAAK6D,SAAAA,QACE7D;UACT;UAEAuK,SAAS8H,KAAcvH,GAAAA;AACjBuH,YAAAA,GAAYvH,cAAWuH,KAAcA,GAAYvH;AACrD,gBAAI7G,KAAS;AAIb,mBAHAoO,GAAYrS,MAAMuD,CAAAA,OAAAA;AAChBU,cAAAA,MAAUV;YAAAA,CAAAA,GAELU;UACT;UAEAsU,OAAOC,KAAY,CAAC,GAAA;AAClB,qBAASzT,MAAQyT;AACfxY,mBAAK+E,EAAAA,IAAQyT,GAAUzT,EAAAA;AAEzB,mBAAO/E;UACT;UAEAmY,MAAMK,KAAY,CAAC,GAAA;AACjB,gBAAIT,KAASD,EAAU9X,IAAAA;AACvB,qBAAS+E,MAAQyT;AACfT,cAAAA,GAAOhT,EAAAA,IAAQyT,GAAUzT,EAAAA;AAE3B,mBAAOgT;UACT;UAEAU,YAAYD,KAAY,CAAC,GAAA;AACvB,gBAAIT,KAAS/X,KAAKmY,MAAMK,EAAAA;AAExB,mBADAxY,KAAK6D,OAAO6B,aAAa1F,MAAM+X,EAAAA,GACxBA;UACT;UAEAW,WAAWF,KAAY,CAAC,GAAA;AACtB,gBAAIT,KAAS/X,KAAKmY,MAAMK,EAAAA;AAExB,mBADAxY,KAAK6D,OAAOiC,YAAY9F,MAAM+X,EAAAA,GACvBA;UACT;UAEAY,eAAejW,IAAAA;AACb,gBAAI1C,KAAK6D,QAAQ;AACf,kBAAI+U,KAAW5Y,MACX6Y,KAAAA;AACJ,uBAASnV,MAAQhB;AACXgB,gBAAAA,OAAS1D,OACX6Y,KAAAA,OACSA,MACT7Y,KAAK6D,OAAOiC,YAAY8S,IAAUlV,EAAAA,GAClCkV,KAAWlV,MAEX1D,KAAK6D,OAAO6B,aAAakT,IAAUlV,EAAAA;AAIlCmV,cAAAA,MACH7Y,KAAKsY,OAAAA;YAET;AAEA,mBAAOtY;UACT;UAEA8Y,OAAAA;AACE,gBAAA,CAAK9Y,KAAK6D;AAAQ;AAClB,gBAAIG,KAAQhE,KAAK6D,OAAOG,MAAMhE,IAAAA;AAC9B,mBAAOA,KAAK6D,OAAOnB,MAAMsB,KAAQ,CAAA;UACnC;UAEAyM,OAAAA;AACE,gBAAA,CAAKzQ,KAAK6D;AAAQ;AAClB,gBAAIG,KAAQhE,KAAK6D,OAAOG,MAAMhE,IAAAA;AAC9B,mBAAOA,KAAK6D,OAAOnB,MAAMsB,KAAQ,CAAA;UACnC;UAEAsD,OAAO1B,IAAAA;AAEL,mBADA5F,KAAK6D,OAAO6B,aAAa1F,MAAM4F,EAAAA,GACxB5F;UACT;UAEA+Y,MAAMnT,IAAAA;AAEJ,mBADA5F,KAAK6D,OAAOiC,YAAY9F,MAAM4F,EAAAA,GACvB5F;UACT;UAEAR,OAAAA;AACE,gBAAIyE,KAASjE;AACb,mBAAOiE,GAAOJ,UAAiC,eAAvBI,GAAOJ,OAAOvB;AACpC2B,cAAAA,KAASA,GAAOJ;AAElB,mBAAOI;UACT;UAEA+U,IAAIvU,IAAMwU,IAAAA;AAER,mBADU,IAAIpB,IACHmB,IAAIhZ,MAAMyE,IAAMwU,EAAAA;UAC7B;UAEAzT,UAAUC,IAAAA;AAAAA,mBACDzF,KAAKqH,KAAKC,QAAAA,OACVtH,KAAKqH,KAAK0R,OACZtT,MAAAA,OAAoBzF,KAAKqH,KAAK6R;UACrC;UAEAjL,OAAOkL,IAAG7N,IAAAA;AACR,gBAAI8N,KAAQ,CAAC,GACTC,KAAuB,QAAV/N;AACjBA,YAAAA,KAASA,MAAU,oBAAIgO;AACvB,gBAAIC,KAAkB;AAEtB,qBAASxU,MAAQ/E,MAAM;AACrB,kBAAA,CAAKmI,OAAOE,UAAU2P,eAAeC,KAAKjY,MAAM+E,EAAAA;AAE9C;AAEF,kBAAa,aAATA,MAA8B,iBAATA;AAAuB;AAChD,kBAAIyB,KAAQxG,KAAK+E,EAAAA;AAEjB,kBAAIgC,MAAMC,QAAQR,EAAAA;AAChB4S,gBAAAA,GAAMrU,EAAAA,IAAQyB,GAAMlD,IAAIC,CAAAA,OACL,YAAA,OAANA,MAAkBA,GAAE0K,SACtB1K,GAAE0K,OAAO,MAAM3C,EAAAA,IAEf/H,EAAAA;uBAGe,YAAA,OAAViD,MAAsBA,GAAMyH;AAC5CmL,gBAAAA,GAAMrU,EAAAA,IAAQyB,GAAMyH,OAAO,MAAM3C,EAAAA;uBACf,aAATvG,IAAmB;AAC5B,oBAAI6G,KAAUN,GAAO7D,IAAIjB,GAAMiF,KAAAA;AAChB,wBAAXG,OACFA,KAAU2N,IACVjO,GAAO9D,IAAIhB,GAAMiF,OAAO8N,EAAAA,GACxBA,OAEFH,GAAMrU,EAAAA,IAAQ,EACZ6G,SAAAA,IACAhC,OAAOpD,GAAMoD,OACbG,KAAKvD,GAAMuD,IAAAA;cAEf;AACEqP,gBAAAA,GAAMrU,EAAAA,IAAQyB;YAElB;AAMA,mBAJI6S,OACFD,GAAM9N,SAAS,CAAA,GAAIA,GAAOgI,KAAAA,CAAAA,EAAQhQ,IAAImI,CAAAA,OAASA,GAAMwC,OAAAA,CAAAA,IAGhDmL;UACT;UAEAI,eAAexV,IAAAA;AACb,gBAAI2P,KAAS3T,KAAKuK,SAAAA,GACd1B,KAAS7I,KAAKwD,OAAOoG,MAAMf,QAC3BD,KAAO5I,KAAKwD,OAAOoG,MAAMhB;AAE7B,qBAASrF,KAAI,GAAGA,KAAIS,IAAOT;AACP,uBAAdoQ,GAAOpQ,EAAAA,KACTsF,KAAS,GACTD,MAAQ,KAERC,MAAU;AAId,mBAAO,EAAED,MAAAA,IAAMC,QAAAA,GAAAA;UACjB;UAEA4Q,WAAWtT,IAAAA;AACT,gBAAImH,KAAMtN,KAAKwD,OAAOoG;AACtB,gBAAIzD,GAAKnC;AACPsJ,cAAAA,KAAMtN,KAAKwZ,eAAerT,GAAKnC,KAAAA;qBACtBmC,GAAKuT,MAAM;AACpB,kBAAI1V,KAAQhE,KAAKuK,SAAAA,EAAW1D,QAAQV,GAAKuT,IAAAA;AAAAA,qBACrC1V,OAAcsJ,KAAMtN,KAAKwZ,eAAexV,EAAAA;YAC9C;AACA,mBAAOsJ;UACT;UAEA8K,QAAQjS,IAAAA;AACN,gBAAIyD,KAAQ,EACVhB,MAAM5I,KAAKwD,OAAOoG,MAAMhB,MACxBC,QAAQ7I,KAAKwD,OAAOoG,MAAMf,OAAAA,GAExBkB,KAAM/J,KAAKwD,OAAOuG,MAClB,EACEnB,MAAM5I,KAAKwD,OAAOuG,IAAInB,MACtBC,QAAQ7I,KAAKwD,OAAOuG,IAAIlB,SAAS,EAAA,IAEnC,EACED,MAAMgB,GAAMhB,MACZC,QAAQe,GAAMf,SAAS,EAAA;AAG7B,gBAAI1C,GAAKuT,MAAM;AACb,kBAAI1V,KAAQhE,KAAKuK,SAAAA,EAAW1D,QAAQV,GAAKuT,IAAAA;AAAAA,qBACrC1V,OACF4F,KAAQ5J,KAAKwZ,eAAexV,EAAAA,GAC5B+F,KAAM/J,KAAKwZ,eAAexV,KAAQmC,GAAKuT,KAAKrV,MAAAA;YAEhD;AACM8B,cAAAA,GAAKyD,QACPA,KAAQ,EACNhB,MAAMzC,GAAKyD,MAAMhB,MACjBC,QAAQ1C,GAAKyD,MAAMf,OAAAA,IAEZ1C,GAAKnC,UACd4F,KAAQ5J,KAAKwZ,eAAerT,GAAKnC,KAAAA,IAG/BmC,GAAK4D,MACPA,KAAM,EACJnB,MAAMzC,GAAK4D,IAAInB,MACfC,QAAQ1C,GAAK4D,IAAIlB,OAAAA,IAEV1C,GAAKwT,WACd5P,KAAM/J,KAAKwZ,eAAerT,GAAKwT,QAAAA,IACtBxT,GAAKnC,UACd+F,KAAM/J,KAAKwZ,eAAerT,GAAKnC,QAAQ,CAAA;AAW3C,oBANE+F,GAAInB,OAAOgB,GAAMhB,QAChBmB,GAAInB,SAASgB,GAAMhB,QAAQmB,GAAIlB,UAAUe,GAAMf,YAEhDkB,KAAM,EAAEnB,MAAMgB,GAAMhB,MAAMC,QAAQe,GAAMf,SAAS,EAAA,IAG5C,EAAEe,OAAAA,IAAOG,KAAAA,GAAAA;UAClB;UAEAxC,oBAAAA;AACE,mBAAO,EACLC,KAAG,CAAC9D,IAAMe,IAAM+B,QACV9C,GAAKe,EAAAA,MAAU+B,OACnB9C,GAAKe,EAAAA,IAAQ+B,IAEF,WAAT/B,MACS,YAATA,MACS,WAATA,MACS,aAATA,MACS,gBAATA,MAES,WAATA,MAEAf,GAAKyB,UAAAA,IAAAA,OAKTsC,KAAG,CAAC/D,IAAMe,OACK,cAATA,KACKf,KACW,WAATe,KACF,MAAMf,GAAKlE,KAAAA,EAAOoI,QAAAA,IAElBlE,GAAKe,EAAAA,EAAAA;UAIpB;UAEAmD,UAAAA;AAIE,mBAHK5H,KAAK4Z,eACR5Z,KAAK4Z,aAAa,IAAIC,MAAM7Z,MAAMA,KAAKuH,kBAAAA,CAAAA,IAElCvH,KAAK4Z;UACd;UAEArV,WAAW8I,IAAAA;AAET,gBADAA,GAAMyM,cAAc9Z,MAChBqN,GAAM6F,SAASlT,KAAKwD,UAAU,aAAamB,KAAK0I,GAAM6F,KAAAA,GAAQ;AAChE,kBAAIjR,KAAIjC,KAAKwD;AACb6J,cAAAA,GAAM6F,QAAQ7F,GAAM6F,MAAMzM,QACxB,cACA,KAAKxE,GAAEwJ,MAAMiB,IAAAA,IAAQzK,GAAE2H,MAAMhB,IAAAA,IAAQ3G,GAAE2H,MAAMf,MAAAA,IAAAA;YAEjD;AACA,mBAAOwE;UACT;UAEAlI,YAAAA;AACE,gBAAInF,KAAKkD,EAAAA,GAAU;AACjBlD,mBAAKkD,EAAAA,IAAAA;AACL,kBAAI4V,KAAO9Y;AACX,qBAAQ8Y,KAAOA,GAAKjV;AAClBiV,gBAAAA,GAAK5V,EAAAA,IAAAA;YAET;UACF;UAEIT,IAAAA,UAAAA;AACF,mBAAOzC;UACT;QAAA;AAGFL,QAAAA,GAAOD,UAAUoD,GACjBA,EAAKF,UAAUE;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACxXf,YAAId,KAAYC,GAAQ,EAAA,GACpB8X,IAAS9X,GAAQ,GAAA,GACjBiJ,IAAQjJ,GAAQ,GAAA;AAEpB,iBAASe,EAAMuG,IAAKpD,IAAAA;AAClB,cAAIsF,KAAQ,IAAIP,EAAM3B,IAAKpD,EAAAA,GACvBuK,KAAS,IAAIqJ,EAAOtO,EAAAA;AACxB,cAAA;AACEiF,YAAAA,GAAO1N,MAAAA;UAuBT,SAtBS/C,IAAAA;AAqBP,kBAAMA;UACR;AAEA,iBAAOyQ,GAAOlR;QAChB;AAEAG,QAAAA,GAAOD,UAAUsD,GACjBA,EAAMJ,UAAUI,GAEhBhB,GAAUgG,cAAchF,CAAAA;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACvCxB,YAAII,KAAcnB,GAAQ,GAAA,GACtB+X,IAAY/X,GAAQ,GAAA,GACpBc,IAAUd,GAAQ,GAAA,GAClBC,IAASD,GAAQ,GAAA,GACjBkJ,IAAOlJ,GAAQ,EAAA,GACfgB,IAAOhB,GAAQ,GAAA;AAEnB,cAAMgY,IAAwB,EAC5BC,OAAAA,MACA9F,OAAAA,KAAO;AA+kBTzU,QAAAA,GAAOD,UApkBP,MAAA;UACEyC,YAAYsJ,IAAAA;AACVzL,iBAAKyL,QAAQA,IAEbzL,KAAKR,OAAO,IAAI2L,KAChBnL,KAAK8T,UAAU9T,KAAKR,MACpBQ,KAAKma,SAAS,IACdna,KAAKkX,YAAAA,OACLlX,KAAKoa,iBAAAA,OAELpa,KAAKqa,gBAAAA,GACLra,KAAKR,KAAKgE,SAAS,EAAEiI,OAAAA,IAAO7B,OAAO,EAAEkD,QAAQ,GAAGlE,MAAM,GAAGC,QAAQ,EAAA,EAAA;UACnE;UAEAwR,kBAAAA;AACEra,iBAAKga,YAAYA,EAAUha,KAAKyL,KAAAA;UAClC;UAEAzI,QAAAA;AACE,gBAAIsX;AACJ,mBAAA,CAAQta,KAAKga,UAAUO,UAAAA;AAGrB,sBAFAD,KAAQta,KAAKga,UAAUQ,UAAAA,GAEfF,GAAM,CAAA,GAAA;gBACZ,KAAK;AACHta,uBAAKma,UAAUG,GAAM,CAAA;AACrB;gBAEF,KAAK;AACHta,uBAAKya,cAAcH,EAAAA;AACnB;gBAEF,KAAK;AACHta,uBAAK+J,IAAIuQ,EAAAA;AACT;gBAEF,KAAK;AACHta,uBAAK0O,QAAQ4L,EAAAA;AACb;gBAEF,KAAK;AACHta,uBAAKwO,OAAO8L,EAAAA;AACZ;gBAEF,KAAK;AACHta,uBAAK0a,UAAUJ,EAAAA;AACf;gBAEF;AACEta,uBAAK8H,MAAMwS,EAAAA;cAAAA;AAIjBta,iBAAK2a,QAAAA;UACP;UAEAjM,QAAQ4L,IAAAA;AACN,gBAAI5W,KAAO,IAAIX;AACf/C,iBAAK4a,KAAKlX,IAAM4W,GAAM,CAAA,CAAA,GACtB5W,GAAKF,OAAOuG,MAAM/J,KAAK6a,YAAYP,GAAM,CAAA,KAAMA,GAAM,CAAA,CAAA;AAErD,gBAAInT,KAAOmT,GAAM,CAAA,EAAGrT,MAAM,GAAA,EAAI;AAC9B,gBAAI,QAAQtC,KAAKwC,EAAAA;AACfzD,cAAAA,GAAKyD,OAAO,IACZzD,GAAK2D,KAAKyT,OAAO3T,IACjBzD,GAAK2D,KAAK0T,QAAQ;iBACb;AACL,kBAAIhE,KAAQ5P,GAAK4P,MAAM,sBAAA;AACvBrT,cAAAA,GAAKyD,OAAO4P,GAAM,CAAA,GAClBrT,GAAK2D,KAAKyT,OAAO/D,GAAM,CAAA,GACvBrT,GAAK2D,KAAK0T,QAAQhE,GAAM,CAAA;YAC1B;UACF;UAEA2D,UAAUJ,IAAAA;AACR,gBAAI5W,KAAO,IAAIT;AACfjD,iBAAK4a,KAAKlX,IAAM4W,GAAM,CAAA,CAAA,GACtB5W,GAAKmB,WAAW,IAChBnB,GAAK2D,KAAK6R,UAAU,IACpBlZ,KAAK8T,UAAUpQ;UACjB;UAEAoE,MAAM8B,IAAAA;AACJ,gBAAIG,KAAAA,OACAzH,KAAO,MACP0Y,KAAAA,OACAC,KAAU,MACVC,KAAW,CAAA,GACXd,KAAiBxQ,GAAM,CAAA,EAAGlC,WAAW,IAAA,GAErCyT,KAAS,CAAA,GACTb,KAAQ1Q;AACZ,mBAAO0Q,MAAO;AAIZ,kBAHAhY,KAAOgY,GAAM,CAAA,GACba,GAAOxX,KAAK2W,EAAAA,GAEC,QAAThY,MAAyB,QAATA;AACb2Y,gBAAAA,OAASA,KAAUX,KACxBY,GAASvX,KAAc,QAATrB,KAAe,MAAM,GAAA;uBAC1B8X,MAAkBY,MAAkB,QAAT1Y;AAC/B2Y,gBAAAA,OAASA,KAAUX,KACxBY,GAASvX,KAAK,GAAA;uBACe,MAApBuX,GAAS7W,QAAc;AAChC,oBAAa,QAAT/B,IAAc;AAChB,sBAAI0Y;AAEF,2BAAA,KADAhb,KAAKoG,KAAK+U,IAAQf,EAAAA;AAGlB;gBAEJ;AAAO,oBAAa,QAAT9X;AAET,yBAAA,KADAtC,KAAKyO,KAAK0M,EAAAA;AAEL,oBAAa,QAAT7Y,IAAc;AACvBtC,uBAAKga,UAAUoB,KAAKD,GAAO3H,IAAAA,CAAAA,GAC3BzJ,KAAAA;AACA;gBACF;AAAoB,wBAATzH,OACT0Y,KAAAA;cAEJ;AAAW1Y,gBAAAA,OAAS4Y,GAASA,GAAS7W,SAAS,CAAA,MAC7C6W,GAAS1H,IAAAA,GACe,MAApB0H,GAAS7W,WAAc4W,KAAU;AAGvCX,cAAAA,KAAQta,KAAKga,UAAUQ,UAAAA;YACzB;AAKA,gBAHIxa,KAAKga,UAAUO,UAAAA,MAAaxQ,KAAAA,OAC5BmR,GAAS7W,SAAS,KAAGrE,KAAKqb,gBAAgBJ,EAAAA,GAE1ClR,MAAOiR,IAAO;AAChB,kBAAA,CAAKZ;AACH,uBAAOe,GAAO9W,WACZiW,KAAQa,GAAOA,GAAO9W,SAAS,CAAA,EAAG,CAAA,GACpB,YAAViW,MAA+B,cAAVA;AACzBta,uBAAKga,UAAUoB,KAAKD,GAAO3H,IAAAA,CAAAA;AAG/BxT,mBAAKoG,KAAK+U,IAAQf,EAAAA;YACpB;AACEpa,mBAAKsb,YAAYH,EAAAA;UAErB;UAEA1M,KAAK0M,IAAAA;AACHA,YAAAA,GAAO3H,IAAAA;AAEP,gBAAI9P,KAAO,IAAIT;AACfjD,iBAAK4a,KAAKlX,IAAMyX,GAAO,CAAA,EAAG,CAAA,CAAA,GAE1BzX,GAAK2D,KAAK6R,UAAUlZ,KAAKub,yBAAyBJ,EAAAA,GAClDnb,KAAKgZ,IAAItV,IAAM,YAAYyX,EAAAA,GAC3Bnb,KAAK8T,UAAUpQ;UACjB;UAEA0C,KAAK+U,IAAQf,IAAAA;AACX,gBAAI1W,KAAO,IAAIN;AACfpD,iBAAK4a,KAAKlX,IAAMyX,GAAO,CAAA,EAAG,CAAA,CAAA;AAE1B,gBA2BIb,IA3BApV,KAAOiW,GAAOA,GAAO9W,SAAS,CAAA;AAUlC,iBATgB,QAAZa,GAAK,CAAA,MACPlF,KAAKkX,YAAAA,MACLiE,GAAO3H,IAAAA,IAGT9P,GAAKF,OAAOuG,MAAM/J,KAAK6a,YACrB3V,GAAK,CAAA,KAAMA,GAAK,CAAA,KA/KtB,SAA8BiW,IAAAA;AAC5B,uBAAS5X,KAAI4X,GAAO9W,SAAS,GAAGd,MAAK,GAAGA,MAAK;AAC3C,oBAAI+W,KAAQa,GAAO5X,EAAAA,GACf+J,KAAMgN,GAAM,CAAA,KAAMA,GAAM,CAAA;AAC5B,oBAAIhN;AAAK,yBAAOA;cAClB;YACF,EAyKiD6N,EAAAA,CAAAA,GAGrB,WAAjBA,GAAO,CAAA,EAAG,CAAA;AACO,oBAAlBA,GAAO9W,UAAcrE,KAAKsb,YAAYH,EAAAA,GAC1CzX,GAAK2D,KAAKC,UAAU6T,GAAOK,MAAAA,EAAQ,CAAA;AAKrC,iBAHA9X,GAAKF,OAAOoG,QAAQ5J,KAAK6a,YAAYM,GAAO,CAAA,EAAG,CAAA,CAAA,GAE/CzX,GAAKe,OAAO,IACL0W,GAAO9W,UAAQ;AACpB,kBAAI/B,KAAO6Y,GAAO,CAAA,EAAG,CAAA;AACrB,kBAAa,QAAT7Y,MAAyB,YAATA,MAA6B,cAATA;AACtC;AAEFoB,cAAAA,GAAKe,QAAQ0W,GAAOK,MAAAA,EAAQ,CAAA;YAC9B;AAKA,iBAHA9X,GAAK2D,KAAK6R,UAAU,IAGbiC,GAAO9W,UAAQ;AAGpB,kBAFAiW,KAAQa,GAAOK,MAAAA,GAEE,QAAblB,GAAM,CAAA,GAAY;AACpB5W,gBAAAA,GAAK2D,KAAK6R,WAAWoB,GAAM,CAAA;AAC3B;cACF;AACmB,yBAAbA,GAAM,CAAA,KAAiB,KAAK3V,KAAK2V,GAAM,CAAA,CAAA,KACzCta,KAAKsb,YAAY,CAAChB,EAAAA,CAAAA,GAEpB5W,GAAK2D,KAAK6R,WAAWoB,GAAM,CAAA;YAE/B;AAEqB,oBAAjB5W,GAAKe,KAAK,CAAA,KAA+B,QAAjBf,GAAKe,KAAK,CAAA,MACpCf,GAAK2D,KAAKC,UAAU5D,GAAKe,KAAK,CAAA,GAC9Bf,GAAKe,OAAOf,GAAKe,KAAKwC,MAAM,CAAA;AAG9B,gBACI6R,IADA2C,KAAc,CAAA;AAElB,mBAAON,GAAO9W,WACZyU,KAAOqC,GAAO,CAAA,EAAG,CAAA,GACJ,YAATrC,MAA6B,cAATA;AACxB2C,cAAAA,GAAY9X,KAAKwX,GAAOK,MAAAA,CAAAA;AAG1Bxb,iBAAK0b,wBAAwBP,EAAAA;AAE7B,qBAAS5X,KAAI4X,GAAO9W,SAAS,GAAGd,MAAK,GAAGA,MAAK;AAE3C,kBADA+W,KAAQa,GAAO5X,EAAAA,GACgB,iBAA3B+W,GAAM,CAAA,EAAGzK,YAAAA,GAAgC;AAC3CnM,gBAAAA,GAAKiY,YAAAA;AACL,oBAAIhI,KAAS3T,KAAK4b,WAAWT,IAAQ5X,EAAAA;AACrCoQ,gBAAAA,KAAS3T,KAAK6b,cAAcV,EAAAA,IAAUxH,IACvB,kBAAXA,OAA0BjQ,GAAK2D,KAAKsU,YAAYhI;AACpD;cACF;AAAO,kBAA+B,gBAA3B2G,GAAM,CAAA,EAAGzK,YAAAA,GAA+B;AACjD,oBAAIiM,KAAQX,GAAOlU,MAAM,CAAA,GACrBiD,KAAM;AACV,yBAASgO,KAAI3U,IAAG2U,KAAI,GAAGA,MAAK;AAC1B,sBAAI5V,KAAOwZ,GAAM5D,EAAAA,EAAG,CAAA;AACpB,sBAAgC,MAA5BhO,GAAIiK,KAAAA,EAAOtN,QAAQ,GAAA,KAAuB,YAATvE;AACnC;AAEF4H,kBAAAA,KAAM4R,GAAMtI,IAAAA,EAAM,CAAA,IAAKtJ;gBACzB;AACgC,sBAA5BA,GAAIiK,KAAAA,EAAOtN,QAAQ,GAAA,MACrBnD,GAAKiY,YAAAA,MACLjY,GAAK2D,KAAKsU,YAAYzR,IACtBiR,KAASW;cAEb;AAEA,kBAAiB,YAAbxB,GAAM,CAAA,KAA+B,cAAbA,GAAM,CAAA;AAChC;YAEJ;AAEca,YAAAA,GAAOvU,KAAKrD,CAAAA,OAAc,YAATA,GAAE,CAAA,KAA2B,cAATA,GAAE,CAAA,CAAA,MAGnDG,GAAK2D,KAAK6R,WAAWuC,GAAYnY,IAAIC,CAAAA,OAAKA,GAAE,CAAA,CAAA,EAAI+G,KAAK,EAAA,GACrDmR,KAAc,CAAA,IAEhBzb,KAAKgZ,IAAItV,IAAM,SAAS+X,GAAYM,OAAOZ,EAAAA,GAASf,EAAAA,GAEhD1W,GAAK8C,MAAMF,SAAS,GAAA,KAAA,CAAS8T,MAC/Bpa,KAAKgc,qBAAqBb,EAAAA;UAE9B;UAEA3M,OAAO8L,IAAAA;AACL,gBAOIhY,IACAmO,IACA+K,IATA9X,KAAO,IAAIxB;AACfwB,YAAAA,GAAKqB,OAAOuV,GAAM,CAAA,EAAGrT,MAAM,CAAA,GACT,OAAdvD,GAAKqB,QACP/E,KAAKic,cAAcvY,IAAM4W,EAAAA,GAE3Bta,KAAK4a,KAAKlX,IAAM4W,GAAM,CAAA,CAAA;AAKtB,gBAAIpV,KAAAA,OACAgX,KAAAA,OACAC,KAAS,CAAA,GACTjB,KAAW,CAAA;AAEf,mBAAA,CAAQlb,KAAKga,UAAUO,UAAAA,KAAa;AAYlC,kBAVAjY,MADAgY,KAAQta,KAAKga,UAAUQ,UAAAA,GACV,CAAA,GAEA,QAATlY,MAAyB,QAATA,KAClB4Y,GAASvX,KAAc,QAATrB,KAAe,MAAM,GAAA,IACjB,QAATA,MAAgB4Y,GAAS7W,SAAS,IAC3C6W,GAASvX,KAAK,GAAA,IACLrB,OAAS4Y,GAASA,GAAS7W,SAAS,CAAA,KAC7C6W,GAAS1H,IAAAA,GAGa,MAApB0H,GAAS7W,QAAc;AACzB,oBAAa,QAAT/B,IAAc;AAChBoB,kBAAAA,GAAKF,OAAOuG,MAAM/J,KAAK6a,YAAYP,GAAM,CAAA,CAAA,GACzCta,KAAKkX,YAAAA;AACL;gBACF;AAAO,oBAAa,QAAT5U,IAAc;AACvB4Z,kBAAAA,KAAAA;AACA;gBACF;AAAO,oBAAa,QAAT5Z,IAAc;AACvB,sBAAI6Z,GAAO9X,SAAS,GAAG;AAGrB,yBAFAmX,KAAQW,GAAO9X,SAAS,GACxBoM,KAAO0L,GAAOX,EAAAA,GACP/K,MAAoB,YAAZA,GAAK,CAAA;AAClBA,sBAAAA,KAAO0L,GAAAA,EAASX,EAAAA;AAEd/K,oBAAAA,OACF/M,GAAKF,OAAOuG,MAAM/J,KAAK6a,YAAYpK,GAAK,CAAA,KAAMA,GAAK,CAAA,CAAA;kBAEvD;AACAzQ,uBAAK+J,IAAIuQ,EAAAA;AACT;gBACF;AACE6B,gBAAAA,GAAOxY,KAAK2W,EAAAA;cAEhB;AACE6B,gBAAAA,GAAOxY,KAAK2W,EAAAA;AAGd,kBAAIta,KAAKga,UAAUO,UAAAA,GAAa;AAC9BrV,gBAAAA,KAAAA;AACA;cACF;YACF;AAEAxB,YAAAA,GAAK2D,KAAK6R,UAAUlZ,KAAKub,yBAAyBY,EAAAA,GAC9CA,GAAO9X,UACTX,GAAK2D,KAAK+U,YAAYpc,KAAKqc,2BAA2BF,EAAAA,GACtDnc,KAAKgZ,IAAItV,IAAM,UAAUyY,EAAAA,GACrBjX,OACFoV,KAAQ6B,GAAOA,GAAO9X,SAAS,CAAA,GAC/BX,GAAKF,OAAOuG,MAAM/J,KAAK6a,YAAYP,GAAM,CAAA,KAAMA,GAAM,CAAA,CAAA,GACrDta,KAAKma,SAASzW,GAAK2D,KAAK6R,SACxBxV,GAAK2D,KAAK6R,UAAU,QAGtBxV,GAAK2D,KAAK+U,YAAY,IACtB1Y,GAAKyY,SAAS,KAGZD,OACFxY,GAAKhB,QAAQ,CAAA,GACb1C,KAAK8T,UAAUpQ;UAEnB;UAEAqG,IAAIuQ,IAAAA;AACEta,iBAAK8T,QAAQpR,SAAS1C,KAAK8T,QAAQpR,MAAM2B,WAC3CrE,KAAK8T,QAAQzM,KAAK6P,YAAYlX,KAAKkX,YAErClX,KAAKkX,YAAAA,OAELlX,KAAK8T,QAAQzM,KAAK0R,SAAS/Y,KAAK8T,QAAQzM,KAAK0R,SAAS,MAAM/Y,KAAKma,QACjEna,KAAKma,SAAS,IAEVna,KAAK8T,QAAQjQ,UACf7D,KAAK8T,QAAQtQ,OAAOuG,MAAM/J,KAAK6a,YAAYP,GAAM,CAAA,CAAA,GACjDta,KAAK8T,UAAU9T,KAAK8T,QAAQjQ,UAE5B7D,KAAKsc,gBAAgBhC,EAAAA;UAEzB;UAEAK,UAAAA;AACM3a,iBAAK8T,QAAQjQ,UAAQ7D,KAAKuc,cAAAA,GAC1Bvc,KAAK8T,QAAQpR,SAAS1C,KAAK8T,QAAQpR,MAAM2B,WAC3CrE,KAAK8T,QAAQzM,KAAK6P,YAAYlX,KAAKkX,YAErClX,KAAK8T,QAAQzM,KAAK0R,SAAS/Y,KAAK8T,QAAQzM,KAAK0R,SAAS,MAAM/Y,KAAKma;UACnE;UAEAM,cAAcH,IAAAA;AAEZ,gBADAta,KAAKma,UAAUG,GAAM,CAAA,GACjBta,KAAK8T,QAAQpR,OAAO;AACtB,kBAAI+N,KAAOzQ,KAAK8T,QAAQpR,MAAM1C,KAAK8T,QAAQpR,MAAM2B,SAAS,CAAA;AACtDoM,cAAAA,MAAsB,WAAdA,GAAKnO,QAAAA,CAAoBmO,GAAKpJ,KAAKmV,iBAC7C/L,GAAKpJ,KAAKmV,eAAexc,KAAKma,QAC9Bna,KAAKma,SAAS;YAElB;UACF;UAIAU,YAAY/N,IAAAA;AACV,gBAAIQ,KAAMtN,KAAKyL,MAAMoB,WAAWC,EAAAA;AAChC,mBAAO,EACLA,QAAAA,IACAlE,MAAM0E,GAAI1E,MACVC,QAAQyE,GAAIF,IAAAA;UAEhB;UAEAwN,KAAKlX,IAAMoJ,IAAAA;AACT9M,iBAAK8T,QAAQnQ,KAAKD,EAAAA,GAClBA,GAAKF,SAAS,EACZoG,OAAO5J,KAAK6a,YAAY/N,EAAAA,GACxBrB,OAAOzL,KAAKyL,MAAAA,GAEd/H,GAAK2D,KAAKC,SAAStH,KAAKma,QACxBna,KAAKma,SAAS,IACI,cAAdzW,GAAKpB,SAAoBtC,KAAKkX,YAAAA;UACpC;UAEA8B,IAAItV,IAAMe,IAAM0W,IAAQf,IAAAA;AACtB,gBAAIE,IAAOhY,IAIPwW,IAAMrI,IAHNpM,KAAS8W,GAAO9W,QAChBmC,IAAQ,IACRiW,IAAAA;AAGJ,qBAASlZ,KAAI,GAAGA,KAAIc,IAAQd,MAAK;AAC/B+W,cAAAA,KAAQa,GAAO5X,EAAAA,GACfjB,KAAOgY,GAAM,CAAA,GACA,YAAThY,MAAoBiB,OAAMc,KAAS,KAAM+V,KAEzB,cAAT9X,MACTmO,KAAO0K,GAAO5X,KAAI,CAAA,IAAK4X,GAAO5X,KAAI,CAAA,EAAG,CAAA,IAAK,SAC1CuV,KAAOqC,GAAO5X,KAAI,CAAA,IAAK4X,GAAO5X,KAAI,CAAA,EAAG,CAAA,IAAK,SACrC0W,EAAsBxJ,EAAAA,KAAUwJ,EAAsBnB,EAAAA,KACjC,QAApBtS,EAAMS,MAAAA,EAAO,IAMjBwV,IAAAA,QAHEjW,KAAS8T,GAAM,CAAA,KAMnB9T,KAAS8T,GAAM,CAAA,IAdfmC,IAAAA;AAiBJ,gBAAA,CAAKA,GAAO;AACV,kBAAIzD,KAAMmC,GAAOuB,OAAO,CAAC5J,IAAKvP,OAAMuP,KAAMvP,GAAE,CAAA,GAAI,EAAA;AAChDG,cAAAA,GAAK2D,KAAK5C,EAAAA,IAAQ,EAAE+B,OAAAA,GAAOwS,KAAAA,GAAAA;YAC7B;AACAtV,YAAAA,GAAKe,EAAAA,IAAQ+B;UACf;UAEA+U,yBAAyBJ,IAAAA;AACvB,gBAAIwB,IACAxC,KAAS;AACb,mBAAOgB,GAAO9W,WACZsY,KAAgBxB,GAAOA,GAAO9W,SAAS,CAAA,EAAG,CAAA,GACpB,YAAlBsY,MAA+C,cAAlBA;AACjCxC,cAAAA,KAASgB,GAAO3H,IAAAA,EAAM,CAAA,IAAK2G;AAE7B,mBAAOA;UACT;UAEAkC,2BAA2BlB,IAAAA;AACzB,gBAAIrC,IACAqB,KAAS;AACb,mBAAOgB,GAAO9W,WACZyU,KAAOqC,GAAO,CAAA,EAAG,CAAA,GACJ,YAATrC,MAA6B,cAATA;AACxBqB,cAAAA,MAAUgB,GAAOK,MAAAA,EAAQ,CAAA;AAE3B,mBAAOrB;UACT;UAEA0B,cAAcV,IAAAA;AACZ,gBAAIwB,IACAxC,KAAS;AACb,mBAAOgB,GAAO9W,WACZsY,KAAgBxB,GAAOA,GAAO9W,SAAS,CAAA,EAAG,CAAA,GACpB,YAAlBsY;AACJxC,cAAAA,KAASgB,GAAO3H,IAAAA,EAAM,CAAA,IAAK2G;AAE7B,mBAAOA;UACT;UAEAyB,WAAWT,IAAQzO,IAAAA;AACjB,gBAAIzI,KAAS;AACb,qBAASV,KAAImJ,IAAMnJ,KAAI4X,GAAO9W,QAAQd;AACpCU,cAAAA,MAAUkX,GAAO5X,EAAAA,EAAG,CAAA;AAGtB,mBADA4X,GAAOtV,OAAO6G,IAAMyO,GAAO9W,SAASqI,EAAAA,GAC7BzI;UACT;UAEA+W,MAAMG,IAAAA;AACJ,gBACIb,IAAOhY,IAAMmO,IADbyK,KAAW;AAEf,qBAAK,CAAK3X,IAAGqZ,EAAAA,KAAYzB,GAAO0B,QAAAA,GAAW;AAUzC,kBATAvC,KAAQsC,IACRta,KAAOgY,GAAM,CAAA,GAEA,QAAThY,OACF4Y,MAAY,IAED,QAAT5Y,OACF4Y,MAAY,IAEG,MAAbA,MAA2B,QAAT5Y,IAAc;AAClC,oBAAKmO,IAEE;AAAA,sBAAgB,WAAZA,GAAK,CAAA,KAA6B,aAAZA,GAAK,CAAA;AACpC;AAEA,yBAAOlN;gBACT;AALEvD,qBAAK8c,YAAYxC,EAAAA;cAMrB;AAEA7J,cAAAA,KAAO6J;YACT;AACA,mBAAA;UACF;UAIAe,gBAAgBJ,IAAAA;AACd,kBAAMjb,KAAKyL,MAAM4B,MACf,oBACA,EAAEP,QAAQmO,GAAQ,CAAA,EAAA,GAClB,EAAEnO,QAAQmO,GAAQ,CAAA,IAAK,EAAA,CAAA;UAE3B;UAEAK,YAAYH,IAAAA;AACV,kBAAMnb,KAAKyL,MAAM4B,MACf,gBACA,EAAEP,QAAQqO,GAAO,CAAA,EAAG,CAAA,EAAA,GACpB,EAAErO,QAAQqO,GAAO,CAAA,EAAG,CAAA,IAAKA,GAAO,CAAA,EAAG,CAAA,EAAG9W,OAAAA,CAAAA;UAE1C;UAEAiY,gBAAgBhC,IAAAA;AACd,kBAAMta,KAAKyL,MAAM4B,MACf,gBACA,EAAEP,QAAQwN,GAAM,CAAA,EAAA,GAChB,EAAExN,QAAQwN,GAAM,CAAA,IAAK,EAAA,CAAA;UAEzB;UAEAiC,gBAAAA;AACE,gBAAIjP,KAAMtN,KAAK8T,QAAQtQ,OAAOoG;AAC9B,kBAAM5J,KAAKyL,MAAM4B,MAAM,kBAAkBC,GAAI1E,MAAM0E,GAAIzE,MAAAA;UACzD;UAEAiU,YAAYxC,IAAAA;AACV,kBAAMta,KAAKyL,MAAM4B,MACf,gBACA,EAAEP,QAAQwN,GAAM,CAAA,EAAA,GAChB,EAAExN,QAAQwN,GAAM,CAAA,IAAKA,GAAM,CAAA,EAAGjW,OAAAA,CAAAA;UAElC;UAEA4X,cAAcvY,IAAM4W,IAAAA;AAClB,kBAAMta,KAAKyL,MAAM4B,MACf,wBACA,EAAEP,QAAQwN,GAAM,CAAA,EAAA,GAChB,EAAExN,QAAQwN,GAAM,CAAA,IAAKA,GAAM,CAAA,EAAGjW,OAAAA,CAAAA;UAElC;UAEAqX,0BAAAA;UAEA;UAEAM,qBAAqBb,IAAAA;AACnB,gBAAIH,KAAQhb,KAAKgb,MAAMG,EAAAA;AACvB,gBAAA,UAAIH;AAAiB;AAErB,gBACIV,IADAyC,KAAU;AAEd,qBAAS7E,KAAI8C,KAAQ,GAAG9C,MAAK,MAC3BoC,KAAQa,GAAOjD,EAAAA,GACE,YAAboC,GAAM,CAAA,MACRyC,MAAW,GACK,MAAZA,MAJwB7E;AAAAA;AAUhC,kBAAMlY,KAAKyL,MAAM4B,MACf,oBACa,WAAbiN,GAAM,CAAA,IAAgBA,GAAM,CAAA,IAAK,IAAIA,GAAM,CAAA,CAAA;UAE/C;QAAA;MAAA,GAAA,IAAA,CAAAra,IAAAsI,IAAAtG,OAAA;AAAA;ACrlBF,YAAIyG,KAAiBzG,GAAQ,GAAA,GACzBmB,IAAcnB,GAAQ,GAAA,GACtByI,IAAazI,GAAQ,GAAA,GACrBD,IAAYC,GAAQ,EAAA,GACpB0I,IAAY1I,GAAQ,GAAA,GACpB6I,IAAY7I,GAAQ,EAAA,GACpBmJ,IAAWnJ,GAAQ,GAAA,GACnB2I,IAAW3I,GAAQ,GAAA,GACnB+a,IAAU/a,GAAQ,GAAA,GAClBc,IAAUd,GAAQ,GAAA,GAClBC,IAASD,GAAQ,GAAA,GACjBoM,IAASpM,GAAQ,GAAA,GACjBiJ,IAAQjJ,GAAQ,GAAA,GAChBe,IAAQf,GAAQ,GAAA,GAChByR,IAAOzR,GAAQ,GAAA,GACfgB,IAAOhB,GAAQ,GAAA,GACfkJ,IAAOlJ,GAAQ,EAAA,GACfa,IAAOb,GAAQ,GAAA;AAEnB,iBAASmO,KAAWS,IAAAA;AAIlB,iBAHuB,MAAnBA,GAAQxM,UAAgB0C,MAAMC,QAAQ6J,GAAQ,CAAA,CAAA,MAChDA,KAAUA,GAAQ,CAAA,IAEb,IAAIlG,EAAUkG,EAAAA;QACvB;AAEAT,UAAQrH,SAAS,SAAgBhE,IAAMkY,IAAAA;AACrC,cA2BInB,IA3BAoB,KAAAA;AACJ,mBAASC,MAAWxV,IAAAA;AAEdsL,uBAAWA,QAAQoF,QAAAA,CAAS6E,OAC9BA,KAAAA,MAEAjK,QAAQoF,KACNtT,KACE,mHACA,GAEAqY,QAAQC,IAAIC,QAAQF,QAAQC,IAAIC,KAAK5V,WAAW,IAAA,KAGlDuL,QAAQoF,KACNtT,KACE,oEACA;AAIR,gBAAIwY,KAAcN,GAAAA,GAAetV,EAAAA;AAGjC,mBAFA4V,GAAY3O,gBAAgB7J,IAC5BwY,GAAYxK,iBAAiB,IAAIpI,IAAYyI,SACtCmK;UACT;AAcA,iBAXApV,OAAOsP,eAAe0F,IAAS,WAAW,EACxC1V,KAAG,OACIqU,OAAOA,KAAQqB,GAAAA,IACbrB,IAAAA,CAAAA,GAIXqB,GAAQC,UAAU,SAAU7T,IAAKiU,IAAaC,IAAAA;AAC5C,mBAAOrN,EAAQ,CAAC+M,GAAQM,EAAAA,CAAAA,CAAAA,EAAcL,QAAQ7T,IAAKiU,EAAAA;UACrD,GAEOL;QACT,GAEA/M,EAAQtF,YAAYA,GACpBsF,EAAQpN,QAAQA,GAChBoN,EAAQhF,WAAWA,GACnBgF,EAAQsD,OAAOA,GAEftD,EAAQ1B,UAAUtM,CAAAA,OAAY,IAAIW,EAAQX,EAAAA,GAC1CgO,EAAQsN,SAAStb,CAAAA,OAAY,IAAIF,EAAOE,EAAAA,GACxCgO,EAAQhK,OAAOhE,CAAAA,OAAY,IAAIgB,EAAYhB,EAAAA,GAC3CgO,EAAQ3B,OAAOrM,CAAAA,OAAY,IAAIa,EAAKb,EAAAA,GACpCgO,EAAQ5Q,OAAO4C,CAAAA,OAAY,IAAI+I,EAAK/I,EAAAA,GACpCgO,EAAQ7B,WAAWnM,CAAAA,OAAY,IAAIwI,EAASxI,EAAAA,GAE5CgO,EAAQ1H,iBAAiBA,IACzB0H,EAAQhN,cAAcA,GACtBgN,EAAQpO,YAAYA,GACpBoO,EAAQzF,YAAYA,GACpByF,EAAQxF,WAAWA,GACnBwF,EAAQrN,UAAUA,GAClBqN,EAAQ4M,UAAUA,GAClB5M,EAAQlO,SAASA,GACjBkO,EAAQ/B,SAASA,GACjB+B,EAAQlF,QAAQA,GAChBkF,EAAQnN,OAAOA,GACfmN,EAAQjF,OAAOA,GACfiF,EAAQtN,OAAOA,GAEf4H,EAAW+I,gBAAgBrD,CAAAA,GAE3BzQ,GAAOD,UAAU0Q,GACjBA,EAAQxN,UAAUwN;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;AClGlB,YAAA,EAAI,mBAAEvE,IAAiB,oBAAEC,EAAAA,IAAuB7J,GAAQ,GAAA,GAAA,EACpD,YAAE0b,GAAU,cAAEC,EAAAA,IAAiB3b,GAAQ,GAAA,GAAA,EACvC,SAAEqS,GAAO,MAAEhK,EAAAA,IAASrI,GAAQ,GAAA;QAWhC,MAAMgJ,EAAAA;UACJ9I,YAAYoH,IAAKpD,IAAAA;AACf,gBAAA,UAAIA,GAAK7C;AAAe;AACxBtD,iBAAK6d,eAAetU,EAAAA,GACpBvJ,KAAKwQ,SAASxQ,KAAK8d,UAAU9d,KAAK+U,YAAY,OAAA;AAE9C,gBAAItE,KAAOtK,GAAK7C,MAAM6C,GAAK7C,IAAImN,OAAAA,QAC3BtJ,KAAOnH,KAAK+d,QAAQ5X,GAAKuG,MAAM+D,EAAAA;AAAAA,aAC9BzQ,KAAK8N,WAAW3H,GAAKuG,SACxB1M,KAAK8N,UAAU3H,GAAKuG,OAElB1M,KAAK8N,YAAS9N,KAAKR,OAAO8U,EAAQtU,KAAK8N,OAAAA,IACvC3G,OAAMnH,KAAKmH,OAAOA;UACxB;UAEAwF,WAAAA;AAIE,mBAHK3M,KAAKkO,kBACRlO,KAAKkO,gBAAgB,IAAIrC,GAAkB7L,KAAKmH,IAAAA,IAE3CnH,KAAKkO;UACd;UAEAgH,cAAAA;AACE,mBAAA,CAAA,EACElV,KAAK2M,SAAAA,EAAWsI,kBAChBjV,KAAK2M,SAAAA,EAAWsI,eAAe5Q,SAAS;UAE5C;UAEAyZ,UAAUnK,IAAQ/J,IAAAA;AAChB,mBAAA,CAAA,CAAK+J,MACEA,GAAOqK,OAAO,GAAGpU,GAAMvF,MAAAA,MAAYuF;UAC5C;UAEAqU,iBAAiBC,IAAAA;AACf,mBAAOA,GAAgBzX,QAAQ,+BAA+B,EAAA,EAAI0N,KAAAA;UACpE;UAEA0J,eAAetU,IAAAA;AACb,gBAAI4U,KAAW5U,GAAIwN,MAAM,8BAAA;AACzB,gBAAA,CAAKoH;AAAU;AAGf,gBAAIvU,KAAQL,GAAIyN,YAAYmH,GAAS3K,IAAAA,CAAAA,GACjCzJ,KAAMR,GAAI1C,QAAQ,MAAM+C,EAAAA;AAExBA,YAAAA,KAAAA,MAAcG,KAAAA,OAEhB/J,KAAK+U,aAAa/U,KAAKie,iBAAiB1U,GAAI6U,UAAUxU,IAAOG,EAAAA,CAAAA;UAEjE;UAEAsU,aAAalX,IAAAA;AAMX,gBAHiB,0CAGFxC,KAAKwC,EAAAA,KAFV,2BAEuBxC,KAAKwC,EAAAA;AACpC,qBAAOmX,mBAAmBnX,GAAK6W,OAAOtZ,OAAO6Z,UAAUla,MAAAA,CAAAA;AAGzD,gBATqB,iDASFM,KAAKwC,EAAAA,KARV,kCAQ2BxC,KAAKwC,EAAAA;AAC5C,qBAxEc+C,KAwEI/C,GAAK6W,OAAOtZ,OAAO6Z,UAAUla,MAAAA,GAvE/CwR,SACKA,OAAOnJ,KAAKxC,IAAK,QAAA,EAAUK,SAAAA,IAG3BxK,OAAOye,KAAKtU,EAAAA;AALvB,gBAAoBA;AA2EhB,gBAAIuU,KAAWtX,GAAK4P,MAAM,iCAAA,EAAmC,CAAA;AAC7D,kBAAM,IAAI7P,MAAM,qCAAqCuX,EAAAA;UACvD;UAEAC,SAASlJ,IAAAA;AAEP,gBADAxV,KAAKR,OAAO8U,EAAQkB,EAAAA,GAChBmI,EAAWnI,EAAAA;AAEb,qBADAxV,KAAK8N,UAAU0H,IACRoI,EAAapI,IAAM,OAAA,EAASjL,SAAAA,EAAW4J,KAAAA;UAElD;UAEA4J,QAAQjV,IAAM2H,IAAAA;AACZ,gBAAA,UAAIA;AAAgB,qBAAA;AAEpB,gBAAIA,IAAM;AACR,kBAAoB,YAAA,OAATA;AACT,uBAAOA;AACF,kBAAoB,cAAA,OAATA,IAWX;AAAA,oBAAIA,cAAgB5E;AACzB,yBAAOC,EAAmBwK,cAAc7F,EAAAA,EAAMlG,SAAAA;AACzC,oBAAIkG,cAAgB3E;AACzB,yBAAO2E,GAAKlG,SAAAA;AACP,oBAAIvK,KAAK2U,MAAMlE,EAAAA;AACpB,yBAAOkO,KAAK7T,UAAU2F,EAAAA;AAEtB,sBAAM,IAAIvJ,MACR,6CAA6CuJ,GAAKlG,SAAAA,CAAAA;cAEtD;AArBuC;AACrC,oBAAIqU,KAAWnO,GAAK3H,EAAAA;AACpB,oBAAI8V,IAAU;AACZ,sBAAItb,KAAMtD,KAAK0e,SAASE,EAAAA;AACxB,sBAAA,CAAKtb;AACH,0BAAM,IAAI4D,MACR,yCAAyC0X,GAASrU,SAAAA,CAAAA;AAGtD,yBAAOjH;gBACT;cACF;YAWF,OAAO;AAAA,kBAAItD,KAAKwQ;AACd,uBAAOxQ,KAAKqe,aAAare,KAAK+U,UAAAA;AACzB,kBAAI/U,KAAK+U,YAAY;AAC1B,oBAAIzR,KAAMtD,KAAK+U;AAEf,uBADIjM,OAAMxF,KAAMgH,EAAKgK,EAAQxL,EAAAA,GAAOxF,EAAAA,IAC7BtD,KAAK0e,SAASpb,EAAAA;cACvB;YAAA;UACF;UAEAqR,MAAMrR,IAAAA;AACJ,mBAAmB,YAAA,OAARA,OAEe,YAAA,OAAjBA,GAAIub,YACc,YAAA,OAAlBvb,GAAIwb,aACX/X,MAAMC,QAAQ1D,GAAIyb,QAAAA;UAEtB;QAAA;AAGFpf,QAAAA,GAAOD,UAAUuL,GACjBA,EAAYrI,UAAUqI;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;AC3ItB,YAAIkM,KAAelV,GAAQ,GAAA,GACvByI,IAAazI,GAAQ,GAAA,GACrB2I,IAAW3I,GAAQ,GAAA,GACnBkJ,IAAOlJ,GAAQ,EAAA;QAEnB,MAAM0I,EAAAA;UACJxI,YAAY0O,KAAU,CAAA,GAAA;AACpB7Q,iBAAKoT,UAAU,UACfpT,KAAK6Q,UAAU7Q,KAAKiF,UAAU4L,EAAAA;UAChC;UAEAmO,IAAIjW,IAAAA;AAEF,mBADA/I,KAAK6Q,UAAU7Q,KAAK6Q,QAAQkL,OAAO/b,KAAKiF,UAAU,CAAC8D,EAAAA,CAAAA,CAAAA,GAC5C/I;UACT;UAEAod,QAAQ7T,IAAKpD,KAAO,CAAC,GAAA;AACnB,mBAC0B,MAAxBnG,KAAK6Q,QAAQxM,UAAAA,WACN8B,GAAKuK,UAAAA,WACLvK,GAAKkM,eAAAA,WACLlM,GAAKwK,SAEL,IAAIwG,GAAanX,MAAMuJ,IAAKpD,EAAAA,IAE5B,IAAIuE,EAAW1K,MAAMuJ,IAAKpD,EAAAA;UAErC;UAEAlB,UAAU4L,IAAAA;AACR,gBAAIoO,KAAa,CAAA;AACjB,qBAAS1b,MAAKsN;AAOZ,kBAAA,SANItN,GAAE6M,UACJ7M,KAAIA,GAAAA,IACKA,GAAE6M,YACX7M,KAAIA,GAAE6M,UAGS,YAAA,OAAN7M,MAAkBwD,MAAMC,QAAQzD,GAAEsN,OAAAA;AAC3CoO,gBAAAA,KAAaA,GAAWlD,OAAOxY,GAAEsN,OAAAA;uBACX,YAAA,OAANtN,MAAkBA,GAAEqL;AACpCqQ,gBAAAA,GAAWtb,KAAKJ,EAAAA;uBACM,cAAA,OAANA;AAChB0b,gBAAAA,GAAWtb,KAAKJ,EAAAA;uBACM,YAAA,OAANA,MAAAA,CAAmBA,GAAEP,SAAAA,CAASO,GAAEuH;AAShD,sBAAM,IAAI5D,MAAM3D,KAAI,0BAAA;AAGxB,mBAAO0b;UACT;QAAA;AAGFtf,QAAAA,GAAOD,UAAUiL,GACjBA,EAAU/H,UAAU+H,GAEpBQ,EAAKH,kBAAkBL,CAAAA,GACvBC,EAASI,kBAAkBL,CAAAA;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;AChE3B,YAAIqS,KAAU/a,GAAQ,GAAA;QAEtB,MAAMoM,EAAAA;UACJlM,YAAYkO,IAAW7Q,IAAM2G,IAAAA;AAC3BnG,iBAAKqQ,YAAYA,IACjBrQ,KAAKiR,WAAW,CAAA,GAChBjR,KAAKR,OAAOA,IACZQ,KAAKmG,OAAOA,IACZnG,KAAKuJ,MAAAA,QACLvJ,KAAKsD,MAAAA;UACP;UAEAiH,WAAAA;AACE,mBAAOvK,KAAKuJ;UACd;UAEA8O,KAAKlR,IAAMhB,KAAO,CAAC,GAAA;AACZA,YAAAA,GAAK4C,UACJ/I,KAAK2S,cAAc3S,KAAK2S,WAAW/D,kBACrCzI,GAAK4C,SAAS/I,KAAK2S,WAAW/D;AAIlC,gBAAIsQ,KAAU,IAAIlC,GAAQ7V,IAAMhB,EAAAA;AAGhC,mBAFAnG,KAAKiR,SAAStN,KAAKub,EAAAA,GAEZA;UACT;UAEAhO,WAAAA;AACE,mBAAOlR,KAAKiR,SAASoC,OAAO9P,CAAAA,OAAgB,cAAXA,GAAEjB,IAAAA;UACrC;UAEIyO,IAAAA,UAAAA;AACF,mBAAO/Q,KAAKuJ;UACd;QAAA;AAGF5J,QAAAA,GAAOD,UAAU2O,GACjBA,EAAOzL,UAAUyL;MAAAA,GAAAA,IAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACvCjB,YAEI3D,IAAYC,GAFZ3I,IAAYC,GAAQ,EAAA;QAIxB,MAAMkJ,UAAanJ,EAAAA;UACjBG,YAAYC,IAAAA;AACVC,kBAAMD,EAAAA,GACNpC,KAAKsC,OAAO,QACPtC,KAAK0C,UAAO1C,KAAK0C,QAAQ,CAAA;UAChC;UAEAqD,YAAYnC,IAAOub,IAAAA;AACjB,gBAAInb,KAAQhE,KAAKgE,MAAMJ,EAAAA;AAMvB,mBAAA,CAJKub,MAAoB,MAAVnb,MAAehE,KAAK0C,MAAM2B,SAAS,MAChDrE,KAAK0C,MAAM,CAAA,EAAG2E,KAAKC,SAAStH,KAAK0C,MAAMsB,EAAAA,EAAOqD,KAAKC,SAG9CjF,MAAM0D,YAAYnC,EAAAA;UAC3B;UAEAqB,UAAUrB,IAAOkD,IAAQxE,IAAAA;AACvB,gBAAII,KAAQL,MAAM4C,UAAUrB,EAAAA;AAE5B,gBAAIkD;AACF,kBAAa,cAATxE;AACEtC,qBAAK0C,MAAM2B,SAAS,IACtByC,GAAOO,KAAKC,SAAStH,KAAK0C,MAAM,CAAA,EAAG2E,KAAKC,SAAAA,OAEjCR,GAAOO,KAAKC;uBAEZtH,KAAKqF,UAAUyB;AACxB,yBAASpD,MAAQhB;AACfgB,kBAAAA,GAAK2D,KAAKC,SAASR,GAAOO,KAAKC;;AAKrC,mBAAO5E;UACT;UAEAmI,SAAS1E,KAAO,CAAC,GAAA;AAEf,mBADW,IAAIuE,GAAW,IAAIC,KAAa3K,MAAMmG,EAAAA,EACrC2E,UAAAA;UACd;QAAA;AAGFK,UAAKJ,qBAAqB9C,CAAAA,OAAAA;AACxByC,UAAAA,KAAazC;QAAAA,GAGfkD,EAAKH,oBAAoB/C,CAAAA,OAAAA;AACvB0C,cAAY1C;QAAAA,GAGdtI,GAAOD,UAAUyL,GACjBA,EAAKvI,UAAUuI;MAAAA,GAAAA,KAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;ACxDf,YAAInJ,KAAYC,GAAQ,EAAA,GACpByR,IAAOzR,GAAQ,GAAA;QAEnB,MAAMgB,UAAajB,GAAAA;UACjBG,YAAYC,IAAAA;AACVC,kBAAMD,EAAAA,GACNpC,KAAKsC,OAAO,QACPtC,KAAK0C,UAAO1C,KAAK0C,QAAQ,CAAA;UAChC;UAEI0c,IAAAA,YAAAA;AACF,mBAAO1L,EAAKW,MAAMrU,KAAK6E,QAAAA;UACzB;UAEIua,IAAAA,UAAUC,IAAAA;AACZ,gBAAItI,KAAQ/W,KAAK6E,WAAW7E,KAAK6E,SAASkS,MAAM,MAAA,IAAU,MACtDvC,KAAMuC,KAAQA,GAAM,CAAA,IAAK,MAAM/W,KAAKgZ,IAAI,WAAW,YAAA;AACvDhZ,iBAAK6E,WAAWwa,GAAO/U,KAAKkK,EAAAA;UAC9B;QAAA;AAGF7U,QAAAA,GAAOD,UAAUuD,GACjBA,EAAKL,UAAUK,GAEfjB,GAAUkG,aAAajF,CAAAA;MAAAA,GAAAA,IAAAA,CAAAA,OAAAA;AAAAA;ACxBvB,cAAMqc,KAAc,EAClBtE,OAAO,MACPuE,QAAQ,QACRC,YAAY,MACZC,YAAY,MACZC,YAAY,KACZC,aAAa,MACbC,eAAe,MACf7G,OAAO,MACP8G,WAAW,IACXC,aAAa,KACbC,cAAc,KACd7I,WAAAA,MAAW;QAOb,MAAMW,GAAAA;UACJ1V,YAAY6d,IAAAA;AACVhgB,iBAAKggB,UAAUA;UACjB;UAEAlV,UAAUpH,IAAMwT,IAAAA;AAEd,gBAAA,CAAKlX,KAAK0D,GAAKpB,IAAAA;AACb,oBAAM,IAAI4E,MACR,2BACExD,GAAKpB,OACL,iDACA;AAINtC,iBAAK0D,GAAKpB,IAAAA,EAAMoB,IAAMwT,EAAAA;UACxB;UAEA3I,SAAS7K,IAAAA;AACP1D,iBAAKigB,KAAKvc,EAAAA;UACZ;UAEAlE,KAAKkE,IAAAA;AACH1D,iBAAKigB,KAAKvc,EAAAA,GACNA,GAAK2D,KAAK0R,SAAO/Y,KAAKggB,QAAQtc,GAAK2D,KAAK0R,KAAAA;UAC9C;UAEArK,QAAQhL,IAAAA;AACN,gBAAIoX,KAAO9a,KAAKgZ,IAAItV,IAAM,QAAQ,aAAA,GAC9BqX,KAAQ/a,KAAKgZ,IAAItV,IAAM,SAAS,cAAA;AACpC1D,iBAAKggB,QAAQ,OAAOlF,KAAOpX,GAAKyD,OAAO4T,KAAQ,MAAMrX,EAAAA;UACvD;UAEA0C,KAAK1C,IAAMwT,IAAAA;AACT,gBAAIgC,KAAUlZ,KAAKgZ,IAAItV,IAAM,WAAW,OAAA,GACpCiQ,KAASjQ,GAAKe,OAAOyU,KAAUlZ,KAAKkgB,SAASxc,IAAM,OAAA;AAEnDA,YAAAA,GAAKiY,cACPhI,MAAUjQ,GAAK2D,KAAKsU,aAAa,gBAG/BzE,OAAWvD,MAAU,MACzB3T,KAAKggB,QAAQrM,IAAQjQ,EAAAA;UACvB;UAEA+K,KAAK/K,IAAAA;AACH1D,iBAAKmgB,MAAMzc,IAAM1D,KAAKkgB,SAASxc,IAAM,UAAA,CAAA,GACjCA,GAAK2D,KAAKmV,gBACZxc,KAAKggB,QAAQtc,GAAK2D,KAAKmV,cAAc9Y,IAAM,KAAA;UAE/C;UAEA8K,OAAO9K,IAAMwT,IAAAA;AACX,gBAAInS,KAAO,MAAMrB,GAAKqB,MAClBoX,KAASzY,GAAKyY,SAASnc,KAAKkgB,SAASxc,IAAM,QAAA,IAAY;AAQ3D,gBAAA,WANWA,GAAK2D,KAAK+U,YACnBrX,MAAQrB,GAAK2D,KAAK+U,YACTD,OACTpX,MAAQ,MAGNrB,GAAKhB;AACP1C,mBAAKmgB,MAAMzc,IAAMqB,KAAOoX,EAAAA;iBACnB;AACL,kBAAIpS,KAAOrG,GAAK2D,KAAK6R,WAAW,OAAOhC,KAAY,MAAM;AACzDlX,mBAAKggB,QAAQjb,KAAOoX,KAASpS,GAAKrG,EAAAA;YACpC;UACF;UAEAuc,KAAKvc,IAAAA;AACH,gBAAIwB,KAAOxB,GAAKhB,MAAM2B,SAAS;AAC/B,mBAAOa,KAAO,KACkB,cAA1BxB,GAAKhB,MAAMwC,EAAAA,EAAM5C;AACrB4C,cAAAA,MAAQ;AAGV,gBAAIgS,KAAYlX,KAAKgZ,IAAItV,IAAM,WAAA;AAC/B,qBAASH,KAAI,GAAGA,KAAIG,GAAKhB,MAAM2B,QAAQd,MAAK;AAC1C,kBAAIK,IAAQF,GAAKhB,MAAMa,EAAAA,GACnB+D,IAAStH,KAAKgZ,IAAIpV,GAAO,QAAA;AACzB0D,mBAAQtH,KAAKggB,QAAQ1Y,CAAAA,GACzBtH,KAAK8K,UAAUlH,GAAOsB,OAAS3B,MAAK2T,EAAAA;YACtC;UACF;UAEAiJ,MAAMzc,IAAMkG,IAAAA;AACV,gBAGImP,IAHAG,KAAUlZ,KAAKgZ,IAAItV,IAAM,WAAW,YAAA;AACxC1D,iBAAKggB,QAAQpW,KAAQsP,KAAU,KAAKxV,IAAM,OAAA,GAGtCA,GAAKhB,SAASgB,GAAKhB,MAAM2B,UAC3BrE,KAAKigB,KAAKvc,EAAAA,GACVqV,KAAQ/Y,KAAKgZ,IAAItV,IAAM,OAAA,KAEvBqV,KAAQ/Y,KAAKgZ,IAAItV,IAAM,SAAS,WAAA,GAG9BqV,MAAO/Y,KAAKggB,QAAQjH,EAAAA,GACxB/Y,KAAKggB,QAAQ,KAAKtc,IAAM,KAAA;UAC1B;UAEAsV,IAAItV,IAAM0c,IAAKC,IAAAA;AACb,gBAAI7Z;AAIJ,gBAHK6Z,OAAQA,KAASD,KAGlBA,OACF5Z,IAAQ9C,GAAK2D,KAAK+Y,EAAAA,GAAAA,WACP5Z;AAAuB,qBAAOA;AAG3C,gBAAI3C,IAASH,GAAKG;AAElB,gBAAe,aAAXwc,IAAqB;AAEvB,kBAAA,CAAKxc,KAA2B,WAAhBA,EAAOvB,QAAmBuB,EAAOwB,UAAU3B;AACzD,uBAAO;AAIT,kBAAIG,KAA0B,eAAhBA,EAAOvB;AACnB,uBAAO;YAEX;AAGA,gBAAA,CAAKuB;AAAQ,qBAAOyb,GAAYe,EAAAA;AAGhC,gBAAI7gB,IAAOkE,GAAKlE,KAAAA;AAEhB,gBADKA,EAAK8gB,aAAU9gB,EAAK8gB,WAAW,CAAC,IAAA,WAC1B9gB,EAAK8gB,SAASD,EAAAA;AACvB,qBAAO7gB,EAAK8gB,SAASD,EAAAA;AAGvB,gBAAe,aAAXA,MAAkC,YAAXA;AACzB,qBAAOrgB,KAAKugB,YAAY7c,IAAM2c,EAAAA;AACzB;AACL,kBAAIG,KAAS,UAhJCtW,IAgJkBmW,IA/IzB,CAAA,EAAGI,YAAAA,IAAgBvW,EAAIjD,MAAM,CAAA;AAgJhCjH,mBAAKwgB,EAAAA,IACPha,IAAQxG,KAAKwgB,EAAAA,EAAQhhB,GAAMkE,EAAAA,IAE3BlE,EAAK8E,KAAKf,CAAAA,OAAAA;AAER,oBADAiD,IAAQjD,GAAE8D,KAAK+Y,EAAAA,GAAAA,WACJ5Z;AAAuB,yBAAA;cAAO,CAAA;YAG/C;AAzJJ,gBAAoB0D;AA8JhB,mBAAA,WAHW1D,MAAuBA,IAAQ8Y,GAAYe,EAAAA,IAEtD7gB,EAAK8gB,SAASD,EAAAA,IAAU7Z,GACjBA;UACT;UAEAka,aAAalhB,IAAAA;AACX,gBAAIgH;AAOJ,mBANAhH,GAAK8E,KAAKf,CAAAA,OAAAA;AACR,kBAAIA,GAAEb,SAASa,GAAEb,MAAM2B,UAA0B,WAAhBd,GAAE2B,KAAK5C,SACtCkE,KAAQjD,GAAE8D,KAAK6P,WAAAA,WACJ1Q;AAAuB,uBAAA;YACpC,CAAA,GAEKA;UACT;UAEAma,aAAanhB,IAAAA;AACX,gBAAIgH;AAOJ,mBANAhH,GAAK8E,KAAKf,CAAAA,OAAAA;AACR,kBAAIA,GAAEb,SAA4B,MAAnBa,GAAEb,MAAM2B,WACrBmC,KAAQjD,GAAE8D,KAAK0R,OAAAA,WACJvS;AAAuB,uBAAA;YACpC,CAAA,GAEKA;UACT;UAEAoa,UAAUphB,IAAAA;AACR,gBAAIA,GAAK6H,KAAKkY;AAAQ,qBAAO/f,GAAK6H,KAAKkY;AACvC,gBAAI/Y;AAYJ,mBAXAhH,GAAK8E,KAAKf,CAAAA,OAAAA;AACR,kBAAI0T,KAAI1T,GAAEM;AACV,kBAAIoT,MAAKA,OAAMzX,MAAQyX,GAAEpT,UAAUoT,GAAEpT,WAAWrE,MAAAA,WACnC+D,GAAE8D,KAAKC,QAAwB;AACxC,oBAAIuZ,KAAQtd,GAAE8D,KAAKC,OAAOqC,MAAM,IAAA;AAGhC,uBAFAnD,KAAQqa,GAAMA,GAAMxc,SAAS,CAAA,GAC7BmC,KAAQA,GAAMC,QAAQ,OAAO,EAAA,GAAA;cAE/B;YACF,CAAA,GAEKD;UACT;UAEAsa,iBAAiBthB,IAAMkE,IAAAA;AACrB,gBAAI8C;AAeJ,mBAdAhH,GAAKwF,aAAazB,CAAAA,OAAAA;AAChB,kBAAA,WAAWA,GAAE8D,KAAKC;AAKhB,uBAJAd,KAAQjD,GAAE8D,KAAKC,QACXd,GAAMF,SAAS,IAAA,MACjBE,KAAQA,GAAMC,QAAQ,WAAW,EAAA,IAAA;YAGrC,CAAA,GAAA,WAESD,KACTA,KAAQxG,KAAKgZ,IAAItV,IAAM,MAAM,YAAA,IACpB8C,OACTA,KAAQA,GAAMC,QAAQ,OAAO,EAAA,IAExBD;UACT;UAEAua,cAAcvhB,IAAMkE,IAAAA;AAClB,gBAAI8C;AAeJ,mBAdAhH,GAAKgF,UAAUjB,CAAAA,OAAAA;AACb,kBAAA,WAAWA,GAAE8D,KAAKC;AAKhB,uBAJAd,KAAQjD,GAAE8D,KAAKC,QACXd,GAAMF,SAAS,IAAA,MACjBE,KAAQA,GAAMC,QAAQ,WAAW,EAAA,IAAA;YAGrC,CAAA,GAAA,WAESD,KACTA,KAAQxG,KAAKgZ,IAAItV,IAAM,MAAM,YAAA,IACpB8C,OACTA,KAAQA,GAAMC,QAAQ,OAAO,EAAA,IAExBD;UACT;UAEAwa,cAAcxhB,IAAAA;AACZ,gBAAIgH;AAaJ,mBAZAhH,GAAK8E,KAAKf,CAAAA,OAAAA;AACR,kBAAIA,GAAEb,UAAUa,GAAEM,WAAWrE,MAAQA,GAAK6F,UAAU9B,OAAAA,WACvCA,GAAE8D,KAAKC;AAKhB,uBAJAd,KAAQjD,GAAE8D,KAAKC,QACXd,GAAMF,SAAS,IAAA,MACjBE,KAAQA,GAAMC,QAAQ,WAAW,EAAA,IAAA;YAIvC,CAAA,GAEED,OAAOA,KAAQA,GAAMC,QAAQ,OAAO,EAAA,IACjCD;UACT;UAEAya,eAAezhB,IAAAA;AACb,gBAAIgH;AAaJ,mBAZAhH,GAAK8E,KAAKf,CAAAA,OAAAA;AACR,kBAAIA,GAAEb,SAASa,GAAEb,MAAM2B,SAAS,KAAA,WACnBd,GAAE8D,KAAK0R;AAKhB,uBAJAvS,KAAQjD,GAAE8D,KAAK0R,OACXvS,GAAMF,SAAS,IAAA,MACjBE,KAAQA,GAAMC,QAAQ,WAAW,EAAA,IAAA;YAIvC,CAAA,GAEED,OAAOA,KAAQA,GAAMC,QAAQ,OAAO,EAAA,IACjCD;UACT;UAEA0a,cAAc1hB,IAAAA;AACZ,gBAAIgH;AAOJ,mBANAhH,GAAK8E,KAAKf,CAAAA,OAAAA;AACR,kBAAe,WAAXA,GAAEjB,SACJkE,KAAQjD,GAAE8D,KAAK6R,SAAAA,WACJ1S;AAAuB,uBAAA;YACpC,CAAA,GAEKA;UACT;UAEA2a,SAAS3hB,IAAAA;AACP,gBAAIgH;AAOJ,mBANAhH,GAAKgF,UAAUjB,CAAAA,OAAAA;AACb,kBAAA,WAAWA,GAAE8D,KAAK6R;AAEhB,uBADA1S,KAAQjD,GAAE8D,KAAK6R,QAAQzS,QAAQ,WAAW,EAAA,GAAA;YAE5C,CAAA,GAEKD;UACT;UAEA+Z,YAAY7c,IAAM2c,IAAAA;AAChB,gBAAI7Z;AAEFA,YAAAA,KADgB,WAAd9C,GAAKpB,OACCtC,KAAKgZ,IAAItV,IAAM,MAAM,YAAA,IACN,cAAdA,GAAKpB,OACNtC,KAAKgZ,IAAItV,IAAM,MAAM,eAAA,IACT,aAAX2c,KACDrgB,KAAKgZ,IAAItV,IAAM,MAAM,YAAA,IAErB1D,KAAKgZ,IAAItV,IAAM,MAAM,aAAA;AAG/B,gBAAI0d,KAAM1d,GAAKG,QACXwd,IAAQ;AACZ,mBAAOD,MAAoB,WAAbA,GAAI9e;AAChB+e,mBAAS,GACTD,KAAMA,GAAIvd;AAGZ,gBAAI2C,GAAMF,SAAS,IAAA,GAAO;AACxB,kBAAIiZ,KAASvf,KAAKgZ,IAAItV,IAAM,MAAM,QAAA;AAClC,kBAAI6b,GAAOlb;AACT,yBAASid,KAAO,GAAGA,KAAOD,GAAOC;AAAQ9a,kBAAAA,MAAS+Y;YAEtD;AAEA,mBAAO/Y;UACT;UAEA0Z,SAASxc,IAAMe,IAAAA;AACb,gBAAI+B,KAAQ9C,GAAKe,EAAAA,GACbuU,KAAMtV,GAAK2D,KAAK5C,EAAAA;AACpB,mBAAIuU,MAAOA,GAAIxS,UAAUA,KAChBwS,GAAIA,MAGNxS;UACT;QAAA;AAGF7G,QAAAA,GAAOD,UAAUmY,IACjBA,GAAYjV,UAAUiV;MAAAA,GAAAA,IAAAA,CAAAA,IAAAA,IAAAA,OAAAA;AAAAA;AC9VtB,YAAIA,KAAc5V,GAAQ,EAAA;AAE1B,iBAAS6I,EAAUpH,IAAMsc,IAAAA;AACb,cAAInI,GAAYmI,EAAAA,EACtBlV,UAAUpH,EAAAA;QAChB;AAEA/D,QAAAA,GAAOD,UAAUoL,GACjBA,EAAUlI,UAAUkI;MAAAA,GAAAA,KAAAA,CAAAA,OAAAA;AAAAA;ACRpBnL,QAAAA,GAAOD,QAAQwD,UAAUmJ,OAAO,SAAA,GAEhC1M,GAAOD,QAAQyD,KAAKkJ,OAAO,IAAA;MAAA,GAAA,KAAA,CAAApM,OAAA;AAAA;ACF3B,cAAMshB,KAAe,IAAIC,WAAW,CAAA,GAC9BC,KAAe,IAAID,WAAW,CAAA,GAC9BE,KAAY,KAAKF,WAAW,CAAA,GAC5BG,IAAQ,IAAIH,WAAW,CAAA,GACvBI,IAAU,KAAKJ,WAAW,CAAA,GAC1BK,IAAQ,IAAIL,WAAW,CAAA,GACvBM,IAAO,KAAKN,WAAW,CAAA,GACvBO,IAAM,IAAKP,WAAW,CAAA,GACtBQ,IAAK,KAAKR,WAAW,CAAA,GACrBS,IAAc,IAAIT,WAAW,CAAA,GAC7BU,IAAe,IAAIV,WAAW,CAAA,GAC9BW,IAAmB,IAAIX,WAAW,CAAA,GAClCY,IAAoB,IAAIZ,WAAW,CAAA,GACnCa,IAAa,IAAIb,WAAW,CAAA,GAC5Bc,IAAc,IAAId,WAAW,CAAA,GAC7Be,IAAY,IAAIf,WAAW,CAAA,GAC3BgB,IAAW,IAAIhB,WAAW,CAAA,GAC1BiB,IAAQ,IAAIjB,WAAW,CAAA,GACvBkB,IAAK,IAAIlB,WAAW,CAAA,GAEpBmB,IAAY,8BACZC,IAAc,yCACdC,IAAiB,eACjBC,IAAgB;AAEtBnjB,QAAAA,GAAOD,UAAU,SAAmB+L,IAAOsX,IAAU,CAAC,GAAA;AACpD,cAGIvY,GAAMsO,GAAM9E,GAAOjD,GAASkD,GAC5B+O,GAASC,GAAWxS,GAAMlF,GAAG2X,GAJ7B3Z,IAAMkC,GAAMlC,IAAI4Z,QAAAA,GAChBhE,IAAS4D,EAAQK,cAKjB/e,IAASkF,EAAIlF,QACbiJ,IAAM,GACN+V,IAAS,CAAA,GACTC,IAAW,CAAA;AAMf,mBAASC,EAASC,IAAAA;AAChB,kBAAM/X,GAAM4B,MAAM,cAAcmW,IAAMlW,CAAAA;UACxC;AAsNA,iBAAO,EACL8N,MALF,SAAcd,IAAAA;AACZgJ,cAAS3f,KAAK2W,EAAAA;UAChB,GAIEE,WAlNF,SAAmBrU,IAAAA;AACjB,gBAAImd,EAASjf;AAAQ,qBAAOif,EAAS9P,IAAAA;AACrC,gBAAIlG,KAAOjJ;AAAQ;AAEnB,gBAAIof,KAAAA,CAAAA,CAAiBtd,MAAOA,GAAKsd;AAIjC,oBAFAjZ,IAAOjB,EAAIiY,WAAWlU,CAAAA,GAEd9C,GAAAA;cACN,KAAKoX;cACL,KAAKC;cACL,KAAKE;cACL,KAAKC;cACL,KAAKF;AACHhJ,oBAAOxL;AACP,mBAAA;AACEwL,uBAAQ,GACRtO,IAAOjB,EAAIiY,WAAW1I,CAAAA;gBAAAA,SAEtBtO,MAASqX,KACTrX,MAASoX,KACTpX,MAASuX,KACTvX,MAASwX,KACTxX,MAASsX;AAGXoB,oBAAe,CAAC,SAAS3Z,EAAItC,MAAMqG,GAAKwL,CAAAA,CAAAA,GACxCxL,IAAMwL,IAAO;AACb;cAGF,KAAKmJ;cACL,KAAKC;cACL,KAAKG;cACL,KAAKC;cACL,KAAKG;cACL,KAAKF;cACL,KAAKH,GAAmB;AACtB,oBAAIsB,KAAcvjB,OAAOwjB,aAAanZ,CAAAA;AACtC0Y,oBAAe,CAACQ,IAAaA,IAAapW,CAAAA;AAC1C;cACF;cAEA,KAAK6U;AAGH,oBAFA1R,IAAO4S,EAAOhf,SAASgf,EAAO7P,IAAAA,EAAM,CAAA,IAAK,IACzCjI,IAAIhC,EAAIiY,WAAWlU,IAAM,CAAA,GAEd,UAATmD,KACAlF,MAAMgW,MACNhW,MAAMkW,MACNlW,MAAMsW,KACNtW,MAAMqW,KACNrW,MAAMwW,KACNxW,MAAMuW,KACNvW,MAAMyW,GACN;AACAlJ,sBAAOxL;AACP,qBAAG;AAGD,wBAFA0V,IAAAA,OACAlK,IAAOvP,EAAI1C,QAAQ,KAAKiS,IAAO,CAAA,GAAA,OAC3BA,GAAa;AACf,0BAAIqG,KAAUsE,IAAgB;AAC5B3K,4BAAOxL;AACP;sBACF;AACEiW,wBAAS,SAAA;oBAEb;AAEA,yBADAN,IAAYnK,GACLvP,EAAIiY,WAAWyB,IAAY,CAAA,MAAOvB;AACvCuB,2BAAa,GACbD,IAAAA,CAAWA;kBAEf,SAASA;AAETE,sBAAe,CAAC,YAAY3Z,EAAItC,MAAMqG,GAAKwL,IAAO,CAAA,GAAIxL,GAAKwL,CAAAA,GAE3DxL,IAAMwL;gBACR;AACEA,sBAAOvP,EAAI1C,QAAQ,KAAKyG,IAAM,CAAA,GAC9ByD,IAAUxH,EAAItC,MAAMqG,GAAKwL,IAAO,CAAA,GAAA,OAE5BA,KAAe+J,EAAele,KAAKoM,CAAAA,IACrCmS,IAAe,CAAC,KAAK,KAAK5V,CAAAA,KAE1B4V,IAAe,CAAC,YAAYnS,GAASzD,GAAKwL,CAAAA,GAC1CxL,IAAMwL;AAIV;cAGF,KAAKyI;cACL,KAAKE;AACHzN,oBAAQxJ,MAAS+W,KAAe,MAAM,KACtCzI,IAAOxL;AACP,mBAAG;AAGD,sBAFA0V,IAAAA,OACAlK,IAAOvP,EAAI1C,QAAQmN,GAAO8E,IAAO,CAAA,GAAA,OAC7BA,GAAa;AACf,wBAAIqG,KAAUsE,IAAgB;AAC5B3K,0BAAOxL,IAAM;AACb;oBACF;AACEiW,sBAAS,QAAA;kBAEb;AAEA,uBADAN,IAAYnK,GACLvP,EAAIiY,WAAWyB,IAAY,CAAA,MAAOvB;AACvCuB,yBAAa,GACbD,IAAAA,CAAWA;gBAEf,SAASA;AAETE,oBAAe,CAAC,UAAU3Z,EAAItC,MAAMqG,GAAKwL,IAAO,CAAA,GAAIxL,GAAKwL,CAAAA,GACzDxL,IAAMwL;AACN;cAGF,KAAK4J;AACHC,kBAAUiB,YAAYtW,IAAM,GAC5BqV,EAAUhe,KAAK4E,CAAAA,GAEbuP,IAD0B,MAAxB6J,EAAUiB,YACLra,EAAIlF,SAAS,IAEbse,EAAUiB,YAAY,GAG/BV,IAAe,CAAC,WAAW3Z,EAAItC,MAAMqG,GAAKwL,IAAO,CAAA,GAAIxL,GAAKwL,CAAAA,GAE1DxL,IAAMwL;AACN;cAGF,KAAK4I;AAGH,qBAFA5I,IAAOxL,GACP2G,IAAAA,MACO1K,EAAIiY,WAAW1I,IAAO,CAAA,MAAO4I;AAClC5I,uBAAQ,GACR7E,IAAAA,CAAUA;AAGZ,oBADAzJ,IAAOjB,EAAIiY,WAAW1I,IAAO,CAAA,GAE3B7E,KACAzJ,MAASmX,KACTnX,MAASqX,KACTrX,MAASoX,KACTpX,MAASuX,KACTvX,MAASwX,KACTxX,MAASsX,MAEThJ,KAAQ,GACJgK,EAAcne,KAAK4E,EAAIsa,OAAO/K,CAAAA,CAAAA,IAAQ;AACxC,yBAAOgK,EAAcne,KAAK4E,EAAIsa,OAAO/K,IAAO,CAAA,CAAA;AAC1CA,yBAAQ;AAENvP,oBAAIiY,WAAW1I,IAAO,CAAA,MAAO+I,MAC/B/I,KAAQ;gBAEZ;AAGFoK,oBAAe,CAAC,QAAQ3Z,EAAItC,MAAMqG,GAAKwL,IAAO,CAAA,GAAIxL,GAAKwL,CAAAA,GAEvDxL,IAAMwL;AACN;cAGF;AACMtO,sBAASmX,KAASpY,EAAIiY,WAAWlU,IAAM,CAAA,MAAOkV,KAChD1J,IAAOvP,EAAI1C,QAAQ,MAAMyG,IAAM,CAAA,IAAK,GACvB,MAATwL,MACEqG,KAAUsE,KACZ3K,IAAOvP,EAAIlF,SAEXkf,EAAS,SAAA,IAIbL,IAAe,CAAC,WAAW3Z,EAAItC,MAAMqG,GAAKwL,IAAO,CAAA,GAAIxL,GAAKwL,CAAAA,GAC1DxL,IAAMwL,MAEN8J,EAAYgB,YAAYtW,IAAM,GAC9BsV,EAAYje,KAAK4E,CAAAA,GAEfuP,IAD4B,MAA1B8J,EAAYgB,YACPra,EAAIlF,SAAS,IAEbue,EAAYgB,YAAY,GAGjCV,IAAe,CAAC,QAAQ3Z,EAAItC,MAAMqG,GAAKwL,IAAO,CAAA,GAAIxL,GAAKwL,CAAAA,GACvDuK,EAAO1f,KAAKuf,CAAAA,GACZ5V,IAAMwL;YAAAA;AAQZ,mBADAxL,KACO4V;UACT,GASE3I,WAvNF,WAAA;AACE,mBAA2B,MAApB+I,EAASjf,UAAgBiJ,KAAOjJ;UACzC,GAsNEyf,UAhOF,WAAA;AACE,mBAAOxW;UACT,EAAA;QAgOF;MAAA,GAAA,KAAA,CAAArN,OAAA;AAAA;ACtQA,YAAI8jB,KAAU,CAAC;AAEfpkB,QAAAA,GAAOD,UAAU,SAAkBiJ,IAAAA;AAC7Bob,UAAAA,GAAQpb,EAAAA,MACZob,GAAQpb,EAAAA,IAAAA,MAEe,eAAA,OAAZsK,WAA2BA,QAAQoF,QAC5CpF,QAAQoF,KAAK1P,EAAAA;QAEjB;MAAA,GAAA,KAAA,CAAA1I,OAAA;AAAA;QCVA,MAAM+c,GAAAA;UACJ7a,YAAYgF,IAAMhB,KAAO,CAAC,GAAA;AAIxB,gBAHAnG,KAAKsC,OAAO,WACZtC,KAAKmH,OAAOA,IAERhB,GAAKzC,QAAQyC,GAAKzC,KAAKF,QAAQ;AACjC,kBAAIwgB,KAAQ7d,GAAKzC,KAAK0U,QAAQjS,EAAAA;AAC9BnG,mBAAK4I,OAAOob,GAAMpa,MAAMhB,MACxB5I,KAAK6I,SAASmb,GAAMpa,MAAMf,QAC1B7I,KAAKiJ,UAAU+a,GAAMja,IAAInB,MACzB5I,KAAKkJ,YAAY8a,GAAMja,IAAIlB;YAC7B;AAEA,qBAASob,MAAO9d;AAAMnG,mBAAKikB,EAAAA,IAAO9d,GAAK8d,EAAAA;UACzC;UAEA1Z,WAAAA;AACE,mBAAIvK,KAAK0D,OACA1D,KAAK0D,KAAK2J,MAAMrN,KAAKmH,MAAM,EAChC4B,QAAQ/I,KAAK+I,QACb/E,OAAOhE,KAAKgE,OACZ0V,MAAM1Z,KAAK0Z,KAAAA,CAAAA,EACV/Q,UAGD3I,KAAK+I,SACA/I,KAAK+I,SAAS,OAAO/I,KAAKmH,OAG5BnH,KAAKmH;UACd;QAAA;AAGFxH,QAAAA,GAAOD,UAAUsd,IACjBA,GAAQpa,UAAUoa;MAAAA,GAAAA,KAAAA,MAAAA;MAAAA,GAAAA,KAAAA,MAAAA;MAAAA,GAAAA,KAAAA,MAAAA;MAAAA,GAAAA,KAAAA,MAAAA;MAAAA,GAAAA,KAAAA,MAAAA;MAAAA,GAAAA,KAAAA,CAAAA,OAAAA;ACpClB,YAAIkH,KACF;AAmBFvkB,QAAAA,GAAOD,UAAU,EAAEyM,QARN,CAACgY,KAAO,OAAA;AACnB,cAAI5e,KAAK,IACLhC,KAAI4gB;AACR,iBAAO5gB;AACLgC,YAAAA,MAAM2e,GAA6B,KAAhBra,KAAKua,OAAAA,IAAiB,CAAA;AAE3C,iBAAO7e;QAAAA,GAEkB8e,gBAlBN,CAACC,IAAUC,KAAc,OACrC,CAACJ,KAAOI,OAAAA;AACb,cAAIhf,KAAK,IACLhC,IAAI4gB;AACR,iBAAO5gB;AACLgC,YAAAA,MAAM+e,GAAUza,KAAKua,OAAAA,IAAWE,GAASjgB,SAAU,CAAA;AAErD,iBAAOkB;QAAAA,EAAAA;MAAAA,EAAAA,GCRPif,IAA2B,CAAC;AAGhC,eAASC,EAAoBC,IAAAA;AAE5B,YAAIC,IAAeH,EAAyBE,EAAAA;AAC5C,YAAA,WAAIC;AACH,iBAAOA,EAAajlB;AAGrB,YAAIC,IAAS6kB,EAAyBE,EAAAA,IAAY,EAGjDhlB,SAAS,CAAC,EAAA;AAOX,eAHAklB,EAAoBF,EAAAA,EAAU/kB,GAAQA,EAAOD,SAAS+kB,CAAAA,GAG/C9kB,EAAOD;MACf;ACrBA+kB,QAAoBI,IAAI,CAACnlB,IAASolB,OAAAA;AACjC,iBAAQlV,MAAOkV;AACXL,YAAoBM,EAAED,IAAYlV,EAAAA,KAAAA,CAAS6U,EAAoBM,EAAErlB,IAASkQ,EAAAA,KAC5EzH,OAAOsP,eAAe/X,IAASkQ,IAAK,EAAEoV,YAAAA,MAAkBvd,KAAKqd,GAAWlV,EAAAA,EAAAA,CAAAA;MAE1E,GCND6U,EAAoBM,IAAI,CAACtV,IAAKhL,OAAU0D,OAAOE,UAAU2P,eAAeC,KAAKxI,IAAKhL,EAAAA,GCClFggB,EAAoBQ,IAAKvlB,CAAAA,OAAAA;AACH,uBAAA,OAAX2M,UAA0BA,OAAOyE,eAC1C3I,OAAOsP,eAAe/X,IAAS2M,OAAOyE,aAAa,EAAEtK,OAAO,SAAA,CAAA,GAE7D2B,OAAOsP,eAAe/X,IAAS,cAAc,EAAE8G,OAAAA,KAAO,CAAA;MAAO;AAAA,UAAA,IAAA,CAAA;AAAA,cAAA,MAAA;AAAA;AAAA,UAAA,EAAA,CAAA,GAAA,EAAA,EAAA,GAAA,EAAA,SAAA,MAAA,EAAA,CAAA;AAAA,YAAAvG,KAAA,EAAA,EAAA;ACH9D,cAAAsI,KAAAtI;AAEyBmQ,QAAAA,GAAQtF,WACTsF,GAAQhF,UACVgF,GAAQrH,QACTqH,GAAQpN,OACToN,GAAQsD,MAEJtD,GAAQ7B,UACT6B,GAAQ1B,SACT0B,GAAQsN,QACVtN,GAAQ3B,MACR2B,GAAQhK,MACRgK,GAAQ5Q,MAEE4Q,GAAQ1H,gBACX0H,GAAQhN,aACVgN,GAAQpO,WACRoO,GAAQzF,WACTyF,GAAQxF,UACTwF,GAAQrN,SACRqN,GAAQ4M,SACT5M,GAAQlO,QACRkO,GAAQ/B,QACT+B,GAAQlF,OACTkF,GAAQnN,MACRmN,GAAQjF,MACRiF,GAAQtN;AAAAA,YAAAA,IAAAA,WAAAA;AAAAA,iBAAAA,IAAAA,OAAAA,UAAAA,SAAAA,IAAAA;AAAAA,qBAAAA,IAAAA,KAAAA,GAAAA,KAAAA,UAAAA,QAAAA,KAAAA,IAAAA;AAAAA,uBAAAA,MAAAA,KAAAA,UAAAA,EAAAA;AAAAA,uBAAAA,UAAAA,eAAAA,KAAAA,IAAAA,EAAAA,MAAAA,GAAAA,EAAAA,IAAAA,GAAAA,EAAAA;AAAAA,mBAAAA;UAAAA,GAAAA,EAAAA,MAAAA,MAAAA,SAAAA;QAAAA,GCZfoiB,IAAM,SAACC,IAAgBC,IAAAA;AAClC,iBAAAD,MAAUA,GAAOD,IAAIE,IAAK,EAAEC,IAAI,gBAAA,CAAA;QAAhC,GAOWC,IAAa,SAAC5hB,IAAAA;AACzB,cAAM6hB,KAAgB7hB,GAAKhB,SAA2B,CAAA,GAChD8iB,KAAgC,CAAC;AAMvC,iBAJAD,GAAajd,QAAQ,SAACrI,IAAA;AAAA,gBAAEwE,KAAIxE,GAAA,MAAEuG,KAAKvG,GAAA,OAAE0b,KAAS1b,GAAA;AAC5CulB,YAAAA,GAAM/gB,EAAAA,IAAQ+B,MAASmV,KAAY,gBAAgB;UACrD,CAAA,GAEO,EACLyD,WAAW1b,GAAKmB,YAAY,IAC5B2gB,OAAKvjB,GAAA;QAET;AA6BA,cAAA,IAAA,SAAgBsH,IAAa4b,IAAAA;AAC3B,cAAMlhB,KAAuB,CAAA;AAC7BihB,YAAIC,IAAQ,CAAC,aAAa5b,EAAAA,CAAAA;AAE1B,cAAMkc,KAAMld,GAAA,EAAU6U,QAAQ7T,EAAAA,EAAKyH,KAAAA,EAAOxR;AAkB1C,iBAjBA0lB,EAAIC,IAAQ,CAAC,eAAeM,EAAAA,CAAAA,GAE5BA,GAAI/iB,MAAM4F,QAAQ,SAAA5E,IAAAA;AAGhB,oBAFiBA,GAAI,MAAA;cAGnB,KAAK;AACHO,gBAAAA,GAAON,KAAK2hB,EAAW5hB,EAAAA,CAAAA;AACvB;cACF,KAAK;AAAA,iBAnCiB,SAACA,IAAcO,IAAAA;AACjC,sBAAAc,KAAiBrB,GAAI,MAAfyY,KAAWzY,GAAI;AACZ,mBAAC,SAAS,WAAA,EAAamD,QAAQ9B,EAAAA,KAAS,IAGvDrB,GAAKhB,MAAM4F,QAAQ,SAAA5E,IAAAA;AACjBO,oBAAAA,GAAON,KAAK,EAAD,EAAA,CAAA,GACN2hB,EAAW5hB,EAAAA,CAAAA,GAAa,EAC3Bga,QAAQ3Y,IACRoX,QAAM8I,GAAA,CAAA,CAAA;kBAEV,CAAA,IAEAhhB,GAAON,KAAK,EAAD,EAAA,CAAA,GAEN2hB,EAAW5hB,EAAAA,CAAAA,GAAa,EAC3Bga,QAAQ3Y,GAAAA,CAAAA,CAAAA;gBAGd,EAiBqBrB,IAAMO,EAAAA;YAAAA;UAGzB,CAAA,GAEAihB,EAAIC,IAAQ,CAAC,UAAUlhB,EAAAA,CAAAA,GAEhBA;QACR;AClFD,cAAA,IAJgC,SAACkhB,IAAAA;AAC/BA,UAAAA,GAAOO,mBAAmBhV,CAAAA;QAC5B;MAAA,GAAA,GAAA;IAAA,GAAA,CAAA;;;",
  "names": ["root", "factory", "exports", "module", "define", "amd", "globalThis", "window", "this", "e", "x", "String", "create", "isColorSupported", "reset", "bold", "dim", "italic", "underline", "inverse", "hidden", "strikethrough", "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white", "gray", "bgBlack", "bgRed", "bgGreen", "bgYellow", "bgBlue", "bgMagenta", "bgCyan", "bgWhite", "createColors", "Container", "s", "AtRule", "constructor", "defaults", "super", "type", "append", "children", "proxyOf", "nodes", "prepend", "default", "registerAtRule", "Node", "Comment", "parse", "Rule", "isClean", "my", "Declaration", "cleanSource", "map", "i", "source", "markDirtyUp", "node", "push", "child", "parent", "each", "callback", "index", "result", "iterator", "getIterator", "indexes", "length", "walk", "addToError", "walkDecls", "prop", "RegExp", "test", "walkRules", "selector", "walkAtRules", "name", "walkComments", "normalize", "last", "markDirty", "reverse", "first", "unshift", "id", "cleanRaws", "keepBetween", "insertBefore", "exist", "add", "splice", "insertAfter", "removeChild", "removeAll", "replaceValues", "pattern", "opts", "decl", "props", "includes", "fast", "value", "replace", "every", "condition", "some", "indexOf", "sample", "Array", "isArray", "slice", "Error", "text", "rebuild", "raws", "before", "getProxyProcessor", "set", "get", "startsWith", "args", "toProxy", "cb", "other", "lastEach", "registerParse", "dependant", "registerRule", "Object", "setPrototypeOf", "prototype", "forEach", "t", "pico", "terminalHighlight", "CssSyntaxError", "message", "line", "column", "file", "plugin", "reason", "endLine", "endColumn", "setMessage", "captureStackTrace", "showSourceCode", "color", "css", "mark", "aside", "lines", "split", "start", "Math", "max", "end", "min", "maxWidth", "str", "number", "gutter", "spacing", "join", "toString", "code", "variable", "LazyResult", "Processor", "Document", "toResult", "stringify", "registerLazyResult", "registerProcessor", "PreviousMap", "Input", "Root", "fromJSON", "json", "inputs", "n", "ownInputs", "input", "inputHydrated", "__proto__", "inputId", "SourceMapConsumer", "SourceMapGenerator", "fileURLToPath", "pathToFileURL", "resolve", "isAbsolute", "nanoid", "fromOffsetCache", "Symbol", "sourceMapAvailable", "Boolean", "pathAvailable", "hasBOM", "from", "consumer", "mapResolve", "fromOffset", "offset", "lastLine", "lineToIndex", "prevIndex", "l", "mid", "col", "error", "pos", "origin", "url", "to", "fromUrl", "originalPositionFor", "URL", "sourceRoot", "mapFile", "protocol", "sourceContentFor", "toJSON", "consumerCache", "registerInput", "MapGenerator", "Result", "TYPE_TO_CLASS_NAME", "document", "atrule", "rule", "comment", "PLUGIN_PROPS", "postcssPlugin", "prepare", "Once", "DeclarationExit", "RuleExit", "AtRuleExit", "CommentExit", "RootExit", "DocumentExit", "OnceExit", "NOT_VISITORS", "CHILDREN", "isPromise", "obj", "then", "getEvents", "key", "toLowerCase", "toStack", "events", "eventIndex", "visitors", "visitorIndex", "cleanMarks", "postcss", "processor", "stringified", "processed", "inline", "prev", "parser", "syntax", "helpers", "plugins", "toStringTag", "content", "sync", "messages", "warnings", "onFulfilled", "onRejected", "async", "catch", "finally", "onFinally", "Promise", "reject", "processing", "runAsync", "getAsyncError", "runOnRoot", "prepareVisitors", "hasListener", "walkSync", "listeners", "subRoot", "visitSync", "stringifier", "data", "generate", "event", "visitor", "promise", "lastPlugin", "handleError", "roots", "all", "postcssVersion", "err", "console", "stack", "visitTick", "version", "filter", "keys", "visit", "pop", "registerPostcss", "list", "string", "separators", "array", "current", "func", "quote", "escape", "letter", "trim", "space", "comma", "dirname", "relative", "sep", "cssString", "mapOpts", "isMap", "previous", "previousMaps", "isInline", "annotation", "isSourcesContent", "sourcesContent", "withContent", "clearAnnotation", "setSourcesContent", "already", "setSourceContent", "toUrl", "path", "applyPrevMaps", "applySourceMap", "isAnnotation", "toBase64", "Buffer", "btoa", "unescape", "encodeURIComponent", "addAnnotation", "outputFile", "eol", "generateMap", "generateString", "fromSourceMap", "addMapping", "generated", "original", "absolute", "encodeURI", "sourcePath", "noSource", "mapping", "match", "lastIndexOf", "p", "semicolon", "NoWorkResult", "_processor", "_css", "_opts", "_map", "self", "defineProperty", "generatedCSS", "generatedMap", "_root", "Stringifier", "cloneNode", "cloned", "hasOwnProperty", "call", "j", "clone", "rangeBy", "warn", "remove", "assign", "overrides", "cloneBefore", "cloneAfter", "replaceWith", "bookmark", "foundSelf", "next", "after", "raw", "defaultType", "between", "_", "fixed", "emitInputs", "Map", "inputsNextIndex", "positionInside", "positionBy", "word", "endIndex", "proxyCache", "Proxy", "postcssNode", "Parser", "tokenizer", "SAFE_COMMENT_NEIGHBOR", "empty", "spaces", "customProperty", "createTokenizer", "token", "endOfFile", "nextToken", "freeSemicolon", "emptyRule", "endFile", "init", "getPosition", "left", "right", "colon", "bracket", "brackets", "tokens", "back", "unclosedBracket", "unknownWord", "spacesAndCommentsFromEnd", "shift", "firstSpaces", "precheckMissedSemicolon", "important", "stringFrom", "spacesFromEnd", "cache", "concat", "checkMissedSemicolon", "unnamedAtrule", "open", "params", "afterName", "spacesAndCommentsFromStart", "unexpectedClose", "unclosedBlock", "ownSemicolon", "clean", "reduce", "lastTokenType", "element", "entries", "doubleColon", "founded", "Warning", "initializer", "warningPrinted", "creator", "process", "env", "LANG", "transformer", "processOpts", "pluginOpts", "atRule", "existsSync", "readFileSync", "loadAnnotation", "startWith", "loadMap", "substr", "getAnnotationURL", "sourceMapString", "comments", "substring", "decodeInline", "decodeURIComponent", "lastMatch", "atob", "encoding", "loadFile", "JSON", "prevPath", "mappings", "_mappings", "sections", "use", "normalized", "warning", "ignore", "selectors", "values", "DEFAULT_RAW", "indent", "beforeDecl", "beforeRule", "beforeOpen", "beforeClose", "beforeComment", "emptyBody", "commentLeft", "commentRight", "builder", "body", "rawValue", "block", "own", "detect", "rawCache", "beforeAfter", "method", "toUpperCase", "rawSemicolon", "rawEmptyBody", "rawIndent", "parts", "rawBeforeComment", "rawBeforeDecl", "rawBeforeRule", "rawBeforeClose", "rawBeforeOpen", "rawColon", "buf", "depth", "step", "SINGLE_QUOTE", "charCodeAt", "DOUBLE_QUOTE", "BACKSLASH", "SLASH", "NEWLINE", "SPACE", "FEED", "TAB", "CR", "OPEN_SQUARE", "CLOSE_SQUARE", "OPEN_PARENTHESES", "CLOSE_PARENTHESES", "OPEN_CURLY", "CLOSE_CURLY", "SEMICOLON", "ASTERISK", "COLON", "AT", "RE_AT_END", "RE_WORD_END", "RE_BAD_BRACKET", "RE_HEX_ESCAPE", "options", "escaped", "escapePos", "currentToken", "valueOf", "ignoreErrors", "buffer", "returned", "unclosed", "what", "ignoreUnclosed", "controlChar", "fromCharCode", "lastIndex", "charAt", "position", "printed", "range", "opt", "urlAlphabet", "size", "random", "customAlphabet", "alphabet", "defaultSize", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__", "d", "definition", "o", "enumerable", "r", "log", "editor", "msg", "ns", "createRule", "declarations", "style", "ast", "setCustomParserCss"]
}
